# GENERATED BY KOMAND SDK - DO NOT EDIT
import komand
import json


class Component:
    DESCRIPTION = "Update an individual issues's attributes (only the attributes submitted are modified)"


class Input:
    ASSIGNEDTO = "assignedTo"
    HASSEEN = "hasSeen"
    ISBOOKMARKED = "isBookmarked"
    ISPUBLIC = "isPublic"
    ISSUBSCRIBED = "isSubscribed"
    ISSUE_ID = "issue_id"
    STATUS = "status"
    

class Output:
    ISSUE = "issue"
    

class UpdateIssueInput(komand.Input):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "assignedTo": {
      "type": "string",
      "title": "Assigned To",
      "description": "The actor ID (or username) of the user or team that should be assigned to this issue",
      "order": 3
    },
    "hasSeen": {
      "type": "boolean",
      "title": "Has Seen",
      "description": "In case this API call is invoked with a user context this allows changing of the flag that indicates if the user has seen the event",
      "order": 4
    },
    "isBookmarked": {
      "type": "boolean",
      "title": "Is Bookmarked",
      "description": "In case this API call is invoked with a user context this allows changing of the bookmark flag",
      "order": 5
    },
    "isPublic": {
      "type": "boolean",
      "title": "Is Public",
      "description": "Sets the issue to public or private",
      "order": 7
    },
    "isSubscribed": {
      "type": "boolean",
      "title": "Is Subscribed",
      "description": "In case this API call is invoked with a user context this allows subscribing to/unsubscribing from this issue",
      "order": 6
    },
    "issue_id": {
      "type": "string",
      "title": "Issue ID",
      "description": "The ID of the group to retrieve",
      "order": 1
    },
    "status": {
      "type": "string",
      "title": "Status",
      "description": "The new status for the issue. Valid values are 'resolved', 'resolvedInNextRelease', 'unresolved', and 'ignored'",
      "enum": [
        "resolved",
        "resolvedInNextRelease",
        "unresolved",
        "ignored"
      ],
      "order": 2
    }
  },
  "required": [
    "issue_id"
  ]
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)


class UpdateIssueOutput(komand.Output):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "issue": {
      "$ref": "#/definitions/Issue",
      "title": "Issue",
      "description": "Updated issue",
      "order": 1
    }
  },
  "required": [
    "issue"
  ],
  "definitions": {
    "Issue": {
      "type": "object",
      "title": "Issue",
      "properties": {
        "annotations": {
          "type": "array",
          "title": "Annotations",
          "items": {
            "type": "string"
          },
          "order": 13
        },
        "assignedTo": {
          "type": "string",
          "title": "AssignedTo",
          "order": 23
        },
        "count": {
          "type": "string",
          "title": "Count",
          "order": 6
        },
        "culprit": {
          "type": "string",
          "title": "Culprit",
          "order": 9
        },
        "firstSeen": {
          "type": "string",
          "title": "FirstSeen",
          "displayType": "date",
          "format": "date-time",
          "order": 2
        },
        "hasSeen": {
          "type": "boolean",
          "title": "HasSeen",
          "order": 3
        },
        "id": {
          "type": "string",
          "title": "Id",
          "order": 4
        },
        "isBookmarked": {
          "type": "boolean",
          "title": "IsBookmarked",
          "order": 17
        },
        "isPublic": {
          "type": "boolean",
          "title": "IsPublic",
          "order": 15
        },
        "isSubscribed": {
          "type": "boolean",
          "title": "IsSubscribed",
          "order": 16
        },
        "lastSeen": {
          "type": "string",
          "title": "LastSeen",
          "displayType": "date",
          "format": "date-time",
          "order": 1
        },
        "level": {
          "type": "string",
          "title": "Level",
          "order": 19
        },
        "logger": {
          "type": "string",
          "title": "Logger",
          "order": 24
        },
        "metadata": {
          "type": "object",
          "title": "Metadata",
          "order": 18
        },
        "numComments": {
          "type": "integer",
          "title": "NumComments",
          "order": 11
        },
        "permalink": {
          "type": "string",
          "title": "Permalink",
          "order": 21
        },
        "project": {
          "type": "object",
          "title": "Project",
          "order": 20
        },
        "shareId": {
          "type": "string",
          "title": "ShareId",
          "order": 26
        },
        "shortId": {
          "type": "string",
          "title": "ShortId",
          "order": 5
        },
        "stats": {
          "type": "object",
          "title": "Stats",
          "order": 8
        },
        "status": {
          "type": "string",
          "title": "Status",
          "order": 14
        },
        "statusDetails": {
          "type": "object",
          "title": "StatusDetails",
          "order": 22
        },
        "subscriptionDetails": {
          "type": "object",
          "title": "SubscriptionDetails",
          "order": 25
        },
        "title": {
          "type": "string",
          "title": "Title",
          "order": 10
        },
        "type": {
          "type": "string",
          "title": "Type",
          "order": 12
        },
        "userCount": {
          "type": "integer",
          "title": "UserCount",
          "order": 7
        }
      }
    }
  }
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)
