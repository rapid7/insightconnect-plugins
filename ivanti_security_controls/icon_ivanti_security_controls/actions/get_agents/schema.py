# GENERATED BY KOMAND SDK - DO NOT EDIT
import insightconnect_plugin_runtime
import json


class Component:
    DESCRIPTION = "Retrieve Agent from Ivanti Security Controls"


class Input:
    AGENT_CONFIGURATION_FILTER = "agent_configuration_filter"
    NAME_FILTER = "name_filter"
    

class Output:
    AGENTS = "agents"
    COUNT = "count"
    

class GetAgentsInput(insightconnect_plugin_runtime.Input):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "agent_configuration_filter": {
      "type": "string",
      "title": "Agent Configuration Filter",
      "description": "Filters agents based on listening configuration",
      "default": "All",
      "enum": [
        "Listening",
        "Not Listening",
        "All"
      ],
      "order": 1
    },
    "name_filter": {
      "type": "string",
      "title": "Name Filter",
      "description": "Filters agents where host or DNS name equals this value",
      "order": 2
    }
  }
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)


class GetAgentsOutput(insightconnect_plugin_runtime.Output):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "agents": {
      "type": "array",
      "title": "Agents",
      "description": "List of agent details",
      "items": {
        "$ref": "#/definitions/agent_detail"
      },
      "order": 2
    },
    "count": {
      "type": "integer",
      "title": "Count",
      "description": "Number of agents returned",
      "order": 1
    }
  },
  "definitions": {
    "agent_detail": {
      "type": "object",
      "title": "agent_detail",
      "properties": {
        "agentId": {
          "type": "string",
          "title": "Agent ID",
          "description": "The agent ID",
          "order": 1
        },
        "assignedPolicyId": {
          "type": "string",
          "title": "Assigned Policy ID",
          "description": "The unique identifier of the policy that is in effect for this agent",
          "order": 2
        },
        "dnsName": {
          "type": "string",
          "title": "DNS Name",
          "description": "The DNS name of the agent machine",
          "order": 3
        },
        "domain": {
          "type": "string",
          "title": "Domain",
          "description": "The domain of the agent machine",
          "order": 4
        },
        "frameworkVersion": {
          "type": "string",
          "title": "Framework Version",
          "description": "The installed agent framework version",
          "order": 5
        },
        "isListening": {
          "type": "boolean",
          "title": "Is Listening",
          "description": "Specifies if the agent is a listening agent",
          "order": 6
        },
        "lastCheckIn": {
          "type": "string",
          "title": "Last Check-In",
          "description": "The date and time of the most recent check-in",
          "order": 7
        },
        "lastKnownIPAddress": {
          "type": "string",
          "title": "Last Known IP Address",
          "description": "The last known IP address of the agent machine",
          "order": 8
        },
        "links": {
          "type": "object",
          "title": "Agent Links",
          "description": "Shows the related URLs for the agent",
          "order": 13
        },
        "listeningPort": {
          "type": "integer",
          "title": "Listening Port",
          "description": "The listening port number",
          "order": 9
        },
        "machineName": {
          "type": "string",
          "title": "Machine Name",
          "description": "The agent machine's host name",
          "order": 10
        },
        "reportedPolicyId": {
          "type": "string",
          "title": "Reported Policy ID",
          "description": "The agent policy ID",
          "order": 11
        },
        "status": {
          "type": "string",
          "title": "Status",
          "description": "The current status of the agent",
          "order": 12
        }
      },
      "required": [
        "agentId",
        "status"
      ]
    }
  }
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)
