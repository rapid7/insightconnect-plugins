# GENERATED BY KOMAND SDK - DO NOT EDIT
import insightconnect_plugin_runtime
import json


class Component:
    DESCRIPTION = "Start a Deep Visibility Query and get the queryId. You can use the queryId for other commands, such as Get Events and Get Query Status"


class Input:
    ACCOUNT_IDS = "account_ids"
    FROM_DATE = "from_date"
    GROUP_IDS = "group_ids"
    IS_VERBOSE = "is_verbose"
    LIMIT = "limit"
    QUERY = "query"
    QUERY_TYPE = "query_type"
    SITE_IDS = "site_ids"
    TENANT = "tenant"
    TO_DATE = "to_date"
    

class Output:
    RESPONSE = "response"
    

class CreateQueryInput(insightconnect_plugin_runtime.Input):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "account_ids": {
      "type": "array",
      "title": "Account IDs",
      "description": "List of account IDs to filter by",
      "items": {
        "type": "string"
      },
      "order": 7
    },
    "from_date": {
      "type": "string",
      "title": "From Date",
      "description": "From date",
      "order": 2
    },
    "group_ids": {
      "type": "array",
      "title": "Account IDs",
      "description": "List of group IDs to filter by",
      "items": {
        "type": "string"
      },
      "order": 9
    },
    "is_verbose": {
      "type": "boolean",
      "title": "Is Verbose",
      "description": "Show all fields or just priority fields",
      "order": 8
    },
    "limit": {
      "type": "integer",
      "title": "Limit",
      "description": "Limit number of returned items (1-20000)",
      "order": 4
    },
    "query": {
      "type": "string",
      "title": "Query",
      "description": "Events matching the query search term will be returned",
      "order": 1
    },
    "query_type": {
      "type": "array",
      "title": "Query Type",
      "description": "Query search type",
      "items": {
        "type": "string"
      },
      "order": 10
    },
    "site_ids": {
      "type": "array",
      "title": "Site IDs",
      "description": "List of site IDs to filter by",
      "items": {
        "type": "string"
      },
      "order": 5
    },
    "tenant": {
      "type": "boolean",
      "title": "Tenant",
      "description": "Indicates a Global (tenant) scope request",
      "order": 6
    },
    "to_date": {
      "type": "string",
      "title": "To Date",
      "description": "Events created before or at this timestamp",
      "order": 3
    }
  },
  "required": [
    "from_date",
    "query",
    "to_date"
  ]
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)


class CreateQueryOutput(insightconnect_plugin_runtime.Output):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "response": {
      "$ref": "#/definitions/create_query_response",
      "title": "Response",
      "description": "SentinelOne API call response data",
      "order": 1
    }
  },
  "definitions": {
    "create_query_response": {
      "type": "object",
      "title": "create_query_response",
      "properties": {
        "data": {
          "$ref": "#/definitions/query_id",
          "title": "Data",
          "description": "Response data",
          "order": 2
        },
        "errors": {
          "type": "array",
          "title": "Errors",
          "description": "Errors",
          "items": {
            "type": "object"
          },
          "order": 1
        }
      },
      "definitions": {
        "query_id": {
          "type": "object",
          "title": "query_id",
          "properties": {
            "queryID": {
              "type": "string",
              "title": "Query ID",
              "description": "Query ID",
              "order": 1
            }
          }
        }
      }
    },
    "query_id": {
      "type": "object",
      "title": "query_id",
      "properties": {
        "queryID": {
          "type": "string",
          "title": "Query ID",
          "description": "Query ID",
          "order": 1
        }
      }
    }
  }
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)
