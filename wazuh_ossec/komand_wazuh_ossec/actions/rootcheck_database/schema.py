# GENERATED BY KOMAND SDK - DO NOT EDIT
import komand
import json


class Component:
    DESCRIPTION = "Returns the rootcheck database of an agent"


class Input:
    AGENT_ID = "agent_id"
    CIS = "cis"
    LIMIT = "limit"
    OFFSET = "offset"
    PCI = "pci"
    SEARCH = "search"
    SORT = "sort"
    

class Output:
    ERROR = "error"
    ROOTCHECK_EVENTS = "rootcheck_events"
    TOTALITEMS = "totalItems"
    

class RootcheckDatabaseInput(komand.Input):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "agent_id": {
      "type": "string",
      "title": "Agent ID",
      "description": "Agent ID e.g. 003",
      "order": 1
    },
    "cis": {
      "type": "string",
      "title": "CIS",
      "description": "Filters by CIS",
      "order": 6
    },
    "limit": {
      "type": "integer",
      "title": "Limit",
      "description": "Maximum number of elements to return",
      "order": 3
    },
    "offset": {
      "type": "integer",
      "title": "Offset",
      "description": "First element to return in the collection",
      "order": 2
    },
    "pci": {
      "type": "string",
      "title": "PCI",
      "description": "Filters by PCI requirement",
      "order": 7
    },
    "search": {
      "type": "string",
      "title": "Search",
      "description": "Looks for elements with the specified string",
      "order": 5
    },
    "sort": {
      "type": "string",
      "title": "Sort",
      "description": "Sorts the collection by a field or fields (separated by comma). Use +/- at the begining to ascending or descending order. Allowed sort fields: status, oldDay, event, and readDay",
      "order": 4
    }
  },
  "required": [
    "agent_id"
  ]
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)


class RootcheckDatabaseOutput(komand.Output):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "error": {
      "type": "integer",
      "title": "Error Code",
      "description": "Error code",
      "order": 3
    },
    "rootcheck_events": {
      "type": "array",
      "title": "Rootcheck Events",
      "description": "Rootcheck events",
      "items": {
        "$ref": "#/definitions/rootcheck_events"
      },
      "order": 2
    },
    "totalItems": {
      "type": "integer",
      "title": "Total Items",
      "description": "Total items",
      "order": 1
    }
  },
  "required": [
    "error",
    "rootcheck_events",
    "totalItems"
  ],
  "definitions": {
    "rootcheck_events": {
      "type": "object",
      "title": "rootcheck_events",
      "properties": {
        "cis": {
          "type": "string",
          "title": "Cis",
          "description": "Cis",
          "order": 1
        },
        "event": {
          "type": "string",
          "title": "Event",
          "description": "Event",
          "order": 2
        },
        "oldDay": {
          "type": "string",
          "title": "Old Day",
          "description": "Old Day",
          "order": 3
        },
        "readDay": {
          "type": "string",
          "title": "Read Day",
          "description": "Read Day",
          "order": 4
        },
        "status": {
          "type": "string",
          "title": "Status",
          "description": "Status",
          "order": 5
        }
      }
    }
  }
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)
