# GENERATED BY KOMAND SDK - DO NOT EDIT
import komand
import json


class Component:
    DESCRIPTION = "Searches the daily activity of all our monitored TLDs on any given name server. "


class Input:
    DAYS_BACK = "days_back"
    PAGE = "page"
    QUERY = "query"
    

class Output:
    RESPONSE = "response"
    

class NameServerMonitorInput(komand.Input):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "days_back": {
      "type": "string",
      "title": "Days Back",
      "description": "Use this parameter search domain changes up to six days prior to the current date",
      "default": 0,
      "enum": [
        0,
        1,
        2,
        3,
        4,
        5,
        6
      ],
      "order": 2
    },
    "page": {
      "type": "integer",
      "title": "Page",
      "description": "If the result set is larger than 1000 records for a given day, request additional pages with this parameter",
      "default": 1,
      "order": 3
    },
    "query": {
      "type": "string",
      "title": "Query",
      "description": "The hostname of the Name Server you wish to query ( i.e. dynect.net )",
      "order": 1
    }
  },
  "required": [
    "query"
  ]
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)


class NameServerMonitorOutput(komand.Output):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "response": {
      "$ref": "#/definitions/name_server_monitor_response",
      "title": "Response",
      "description": "Response",
      "order": 1
    }
  },
  "definitions": {
    "name_server_monitor_alerts": {
      "type": "object",
      "title": "name_server_monitor_alerts",
      "properties": {
        "action": {
          "type": "string",
          "title": "Action",
          "order": 1
        },
        "domain": {
          "type": "string",
          "title": "Domain",
          "order": 2
        },
        "new_name_server": {
          "type": "string",
          "title": "New Name Server",
          "order": 3
        },
        "old_name_server": {
          "type": "string",
          "title": "Old Name Server",
          "order": 4
        }
      }
    },
    "name_server_monitor_response": {
      "type": "object",
      "title": "name_server_monitor_response",
      "properties": {
        "alerts": {
          "type": "array",
          "title": "Alerts",
          "items": {
            "$ref": "#/definitions/name_server_monitor_alerts"
          },
          "order": 1
        },
        "date": {
          "type": "string",
          "title": "Date",
          "order": 2
        },
        "limit": {
          "type": "integer",
          "title": "Limit",
          "order": 3
        },
        "name_server": {
          "type": "string",
          "title": "Name Server",
          "order": 4
        },
        "page": {
          "type": "integer",
          "title": "Page",
          "order": 5
        },
        "page_count": {
          "type": "integer",
          "title": "Page Count",
          "order": 6
        },
        "total": {
          "type": "string",
          "title": "Total",
          "order": 7
        }
      },
      "definitions": {
        "name_server_monitor_alerts": {
          "type": "object",
          "title": "name_server_monitor_alerts",
          "properties": {
            "action": {
              "type": "string",
              "title": "Action",
              "order": 1
            },
            "domain": {
              "type": "string",
              "title": "Domain",
              "order": 2
            },
            "new_name_server": {
              "type": "string",
              "title": "New Name Server",
              "order": 3
            },
            "old_name_server": {
              "type": "string",
              "title": "Old Name Server",
              "order": 4
            }
          }
        }
      }
    }
  }
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)
