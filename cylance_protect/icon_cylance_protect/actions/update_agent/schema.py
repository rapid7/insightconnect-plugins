# GENERATED BY KOMAND SDK - DO NOT EDIT
import insightconnect_plugin_runtime
import json


class Component:
    DESCRIPTION = "Adds or removes zones and/or updates the policy of a specific Console device resource belonging to a Tenant"


class Input:
    ADD_ZONES = "add_zones"
    AGENT = "agent"
    POLICY = "policy"
    REMOVE_ZONES = "remove_zones"
    

class Output:
    SUCCESS = "success"
    

class UpdateAgentInput(insightconnect_plugin_runtime.Input):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "add_zones": {
      "type": "array",
      "title": "Add Zones",
      "description": "The list of zone identifiers which the device is to be assigned. The input should be an array of zone IDs",
      "items": {
        "type": "string"
      },
      "order": 2
    },
    "agent": {
      "type": "string",
      "title": "Agent",
      "description": "Agent to update device information from. Accepts IP address, MAC address, hostname, or device ID",
      "order": 1
    },
    "policy": {
      "type": "string",
      "title": "Policy",
      "description": "The unique identifier for the policy to assign to the device. Specify policy, or leave the string empty to remove the current policy from the device",
      "order": 4
    },
    "remove_zones": {
      "type": "array",
      "title": "Remove Zones",
      "description": "The list of zone identifiers from which the device is to be removed. The input should be an array of zone IDs",
      "items": {
        "type": "string"
      },
      "order": 3
    }
  },
  "required": [
    "agent"
  ]
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)


class UpdateAgentOutput(insightconnect_plugin_runtime.Output):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "success": {
      "type": "boolean",
      "title": "Success",
      "description": "Return true if the agent was updated",
      "order": 1
    }
  },
  "required": [
    "success"
  ]
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)
