package http

// Code generated by the Komand Go SDK Generator. DO NOT EDIT

import (
	"fmt"
	"net/http"
	"time"

	"github.com/rapid7/komand-plugins/kafka/connection"
)

// NewServer returns a new http server
func NewServer(port int, c *connection.Cache) (*http.Server, error) {
	// TODO each plugin needs a unique port to expose
	// but internally, can all use a common port
	addr := fmt.Sprintf(":%d", port)
	// TODO make these configurable somehow
	readTimeout := time.Second * time.Duration(600)
	writeTimeout := time.Second * time.Duration(600)

	mux := http.NewServeMux()
	// one for each action
	mux.Handle("/actions/get_brokers", NewGetBrokersHandler(c))
	mux.Handle("/actions/get_brokers/test", NewGetBrokersHandler(c))
	mux.Handle("/actions/get_leader", NewGetLeaderHandler(c))
	mux.Handle("/actions/get_leader/test", NewGetLeaderHandler(c))
	mux.Handle("/actions/get_partitions", NewGetPartitionsHandler(c))
	mux.Handle("/actions/get_partitions/test", NewGetPartitionsHandler(c))
	mux.Handle("/actions/get_topics", NewGetTopicsHandler(c))
	mux.Handle("/actions/get_topics/test", NewGetTopicsHandler(c))
	mux.Handle("/actions/get_writeable_partitions", NewGetWriteablePartitionsHandler(c))
	mux.Handle("/actions/get_writeable_partitions/test", NewGetWriteablePartitionsHandler(c))
	mux.Handle("/actions/produce", NewProduceHandler(c))
	mux.Handle("/actions/produce/test", NewProduceHandler(c))
	mux.Handle("/actions/produce_async", NewProduceAsyncHandler(c))
	mux.Handle("/actions/produce_async/test", NewProduceAsyncHandler(c))
	mux.Handle("/triggers/consume/test", NewConsumeTriggerHandler(c))

	s := &http.Server{
		Addr:           addr,
		Handler:        mux,
		ReadTimeout:    readTimeout,
		WriteTimeout:   writeTimeout,
		MaxHeaderBytes: 1 << 20,
	}
	return s, nil
}
