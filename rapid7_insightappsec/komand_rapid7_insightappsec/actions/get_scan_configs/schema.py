# GENERATED BY KOMAND SDK - DO NOT EDIT
import komand
import json


class Component:
    DESCRIPTION = "Get a page of scan configurations, based on supplied pagination parameters"


class Input:
    INDEX = "index"
    SIZE = "size"
    SORT = "sort"
    

class Output:
    SCAN_CONFIGS = "scan_configs"
    

class GetScanConfigsInput(komand.Input):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "index": {
      "type": "integer",
      "title": "Index",
      "description": "The page index to start form. If blank, index will be 0",
      "order": 1
    },
    "size": {
      "type": "integer",
      "title": "Size",
      "description": "The number of entries on each page. If blank, size will be 50",
      "order": 2
    },
    "sort": {
      "type": "string",
      "title": "Sort",
      "description": "How to sort the scan configs. If blank, sort will be alphabetical by scan config name",
      "order": 3
    }
  }
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)


class GetScanConfigsOutput(komand.Output):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "scan_configs": {
      "type": "array",
      "title": "Scan Configs",
      "description": "A list of scan configurations",
      "items": {
        "$ref": "#/definitions/scan_config"
      },
      "order": 1
    }
  },
  "definitions": {
    "link": {
      "type": "object",
      "title": "link",
      "properties": {
        "href": {
          "type": "string",
          "title": "Href",
          "description": "Href",
          "order": 1
        },
        "rel": {
          "type": "string",
          "title": "Rel",
          "description": "rel",
          "order": 2
        }
      }
    },
    "scan_config": {
      "type": "object",
      "title": "scan_config",
      "properties": {
        "app_id": {
          "type": "string",
          "title": "App ID",
          "description": "App UUID",
          "order": 4
        },
        "attack_template_id": {
          "type": "string",
          "title": "Attack Template ID",
          "description": "Attack template UUID",
          "order": 5
        },
        "config_description": {
          "type": "string",
          "title": "Description",
          "description": "The description of the scan configuration",
          "order": 3
        },
        "config_name": {
          "type": "string",
          "title": "Name",
          "description": "The name of the scan configuration",
          "order": 2
        },
        "errors": {
          "type": "array",
          "title": "Errors",
          "description": "A list of errors that detail any current validation failures",
          "items": {
            "type": "string"
          },
          "order": 6
        },
        "id": {
          "type": "string",
          "title": "UUID",
          "description": "The UUID of the scan configuration",
          "order": 1
        },
        "links": {
          "type": "array",
          "title": "Links",
          "description": "A list of links",
          "items": {
            "$ref": "#/definitions/link"
          },
          "order": 7
        }
      },
      "definitions": {
        "link": {
          "type": "object",
          "title": "link",
          "properties": {
            "href": {
              "type": "string",
              "title": "Href",
              "description": "Href",
              "order": 1
            },
            "rel": {
              "type": "string",
              "title": "Rel",
              "description": "rel",
              "order": 2
            }
          }
        }
      }
    }
  }
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)
