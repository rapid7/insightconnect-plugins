# GENERATED BY KOMAND SDK - DO NOT EDIT
import komand
import json


class Component:
    DESCRIPTION = "Query data and manage databases, retention policies, and users"


class Input:
    CHUNKED = "chunked"
    DATABASE_NAME = "database_name"
    EPOCH = "epoch"
    PASSWORD = "password"
    QUERY = "query"
    USERNAME = "username"
    

class Output:
    RESULTS = "results"
    

class QueryInput(komand.Input):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "chunked": {
      "type": "string",
      "title": "Chunked",
      "description": "If set to true, InfluxDB chunks responses by series or by every 10,000 points, whichever occurs first. If set to a specific value, InfluxDB chunks responses by series or by that number of points",
      "order": 2
    },
    "database_name": {
      "type": "string",
      "title": "Database",
      "description": "Database name",
      "order": 1
    },
    "epoch": {
      "type": "string",
      "title": "Epoch",
      "description": "Returns epoch timestamps with the specified precision. Default is nanoseconds",
      "order": 3
    },
    "password": {
      "type": "string",
      "title": "Password",
      "displayType": "password",
      "description": "Sets the password for authentication",
      "format": "password",
      "order": 5
    },
    "query": {
      "type": "string",
      "title": "Query",
      "description": "Database query. Must follow InfluxQL syntax. See https://docs.influxdata.com/influxdb/v1.2/query_language/",
      "order": 6
    },
    "username": {
      "type": "string",
      "title": "Username",
      "description": "Sets the username for authentication",
      "order": 4
    }
  },
  "required": [
    "database_name"
  ]
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)


class QueryOutput(komand.Output):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "results": {
      "type": "array",
      "title": "Results",
      "description": "Results",
      "items": {
        "$ref": "#/definitions/result"
      },
      "order": 1
    }
  },
  "definitions": {
    "point": {
      "type": "object",
      "title": "point",
      "properties": {
        "columns": {
          "type": "array",
          "title": "Columns",
          "items": {
            "type": "string"
          },
          "order": 2
        },
        "name": {
          "type": "string",
          "title": "Name",
          "order": 1
        },
        "values": {
          "type": "array",
          "title": "Values",
          "items": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "order": 3
        }
      }
    },
    "result": {
      "type": "object",
      "title": "result",
      "properties": {
        "error": {
          "type": "string",
          "title": "Error",
          "order": 2
        },
        "series": {
          "type": "array",
          "title": "Series",
          "items": {
            "$ref": "#/definitions/point"
          },
          "order": 3
        },
        "statement_id": {
          "type": "integer",
          "title": "Statement ID",
          "order": 1
        }
      },
      "definitions": {
        "point": {
          "type": "object",
          "title": "point",
          "properties": {
            "columns": {
              "type": "array",
              "title": "Columns",
              "items": {
                "type": "string"
              },
              "order": 2
            },
            "name": {
              "type": "string",
              "title": "Name",
              "order": 1
            },
            "values": {
              "type": "array",
              "title": "Values",
              "items": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "order": 3
            }
          }
        }
      }
    }
  }
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)
