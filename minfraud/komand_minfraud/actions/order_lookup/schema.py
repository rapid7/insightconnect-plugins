# GENERATED BY KOMAND SDK - DO NOT EDIT
import komand
import json


class Component:
    DESCRIPTION = "Query order info"


class Input:
    ADDRESS = "address"
    ORDER_AFFILIATE_ID = "order_affiliate_id"
    ORDER_AMOUNT = "order_amount"
    ORDER_CURRENCY = "order_currency"
    ORDER_DISCOUNT_CODE = "order_discount_code"
    ORDER_HAS_GIFT_MESSAGE = "order_has_gift_message"
    ORDER_IS_GIFT = "order_is_gift"
    ORDER_REFERRER_URI = "order_referrer_uri"
    ORDER_SUBAFFILIATE_ID = "order_subaffiliate_id"
    

class Output:
    RISK_SCORE = "risk_score"
    

class OrderLookupInput(komand.Input):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "address": {
      "type": "string",
      "title": "IP Address",
      "description": "IP address to query",
      "order": 1
    },
    "order_affiliate_id": {
      "type": "string",
      "title": "Affiliate ID",
      "description": "ID of the affiliate",
      "order": 5
    },
    "order_amount": {
      "type": "string",
      "title": "Order Amount",
      "description": "Total order amount",
      "order": 2
    },
    "order_currency": {
      "type": "string",
      "title": "Order Currency",
      "description": "Currency code for the currency used",
      "order": 3
    },
    "order_discount_code": {
      "type": "string",
      "title": "Order Discount Code",
      "description": "Discount code applied to transaction",
      "order": 4
    },
    "order_has_gift_message": {
      "type": "boolean",
      "title": "Order Has Gift Message",
      "description": "Order has gift message",
      "order": 9
    },
    "order_is_gift": {
      "type": "boolean",
      "title": "Order is Gift",
      "description": "Order is gift",
      "order": 8
    },
    "order_referrer_uri": {
      "type": "string",
      "title": "Order Referrer URI",
      "description": "URI of the referring site",
      "order": 7
    },
    "order_subaffiliate_id": {
      "type": "string",
      "title": "Sub-affiliate ID",
      "description": "ID of the sub affiliate",
      "order": 6
    }
  },
  "required": [
    "address"
  ]
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)


class OrderLookupOutput(komand.Output):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "risk_score": {
      "type": "string",
      "title": "Risk Score",
      "description": "Overall risk score",
      "order": 1
    }
  }
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)
