package http

// Code generated by the Komand Go SDK Generator. DO NOT EDIT

import (
	"fmt"
	"net/http"
	"time"

	"github.com/rapid7/komand-plugins/type_converter/connection"
)

// NewServer returns a new http server
func NewServer(port int, c *connection.Cache) (*http.Server, error) {
	// TODO each plugin needs a unique port to expose
	// but internally, can all use a common port
	addr := fmt.Sprintf(":%d", port)
	// TODO make these configurable somehow
	readTimeout := time.Second * time.Duration(600)
	writeTimeout := time.Second * time.Duration(600)

	mux := http.NewServeMux()
	// one for each action
	mux.Handle("/actions/array_to_string", NewArrayToStringHandler(c))
	mux.Handle("/actions/array_to_string/test", NewArrayToStringHandler(c))
	mux.Handle("/actions/boolean_to_integer", NewBooleanToIntegerHandler(c))
	mux.Handle("/actions/boolean_to_integer/test", NewBooleanToIntegerHandler(c))
	mux.Handle("/actions/boolean_to_string", NewBooleanToStringHandler(c))
	mux.Handle("/actions/boolean_to_string/test", NewBooleanToStringHandler(c))
	mux.Handle("/actions/integer_to_boolean", NewIntegerToBooleanHandler(c))
	mux.Handle("/actions/integer_to_boolean/test", NewIntegerToBooleanHandler(c))
	mux.Handle("/actions/integer_to_number", NewIntegerToNumberHandler(c))
	mux.Handle("/actions/integer_to_number/test", NewIntegerToNumberHandler(c))
	mux.Handle("/actions/integer_to_string", NewIntegerToStringHandler(c))
	mux.Handle("/actions/integer_to_string/test", NewIntegerToStringHandler(c))
	mux.Handle("/actions/number_to_integer", NewNumberToIntegerHandler(c))
	mux.Handle("/actions/number_to_integer/test", NewNumberToIntegerHandler(c))
	mux.Handle("/actions/object_to_string", NewObjectToStringHandler(c))
	mux.Handle("/actions/object_to_string/test", NewObjectToStringHandler(c))
	mux.Handle("/actions/string_to_boolean", NewStringToBooleanHandler(c))
	mux.Handle("/actions/string_to_boolean/test", NewStringToBooleanHandler(c))
	mux.Handle("/actions/string_to_float", NewStringToFloatHandler(c))
	mux.Handle("/actions/string_to_float/test", NewStringToFloatHandler(c))
	mux.Handle("/actions/string_to_integer", NewStringToIntegerHandler(c))
	mux.Handle("/actions/string_to_integer/test", NewStringToIntegerHandler(c))
	mux.Handle("/actions/string_to_list", NewStringToListHandler(c))
	mux.Handle("/actions/string_to_list/test", NewStringToListHandler(c))
	mux.Handle("/actions/string_to_object", NewStringToObjectHandler(c))
	mux.Handle("/actions/string_to_object/test", NewStringToObjectHandler(c))

	s := &http.Server{
		Addr:           addr,
		Handler:        mux,
		ReadTimeout:    readTimeout,
		WriteTimeout:   writeTimeout,
		MaxHeaderBytes: 1 << 20,
	}
	return s, nil
}
