import komand
from .schema import (
    GetExpiringVulnerabilityExceptionsInput,
    GetExpiringVulnerabilityExceptionsOutput,
    Input,
    Output,
    Component,
)

# Custom imports below
from komand_rapid7_insightvm.util import endpoints
from komand_rapid7_insightvm.util.resource_requests import ResourceRequests
import maya


class GetExpiringVulnerabilityExceptions(komand.Action):
    def __init__(self):
        super(self.__class__, self).__init__(
            name="get_expiring_vulnerability_exceptions",
            description=Component.DESCRIPTION,
            input=GetExpiringVulnerabilityExceptionsInput(),
            output=GetExpiringVulnerabilityExceptionsOutput(),
        )

    def run(self, params={}):
        days_left = params.get(Input.EXPIRES_IN_LESS_THAN)

        params = {"sort": "expires,ASC"}

        # Get all the exceptions
        resource_helper = ResourceRequests(self.connection.session, self.logger)
        endpoint = endpoints.VulnerabilityException.vulnerability_exceptions(self.connection.console_url)
        response = resource_helper.resource_request(endpoint=endpoint, method="get", params=params)
        resources = response.get("resources", [])

        now = maya.now()
        exceptions_to_return = []

        # This looks for any exceptions that are expiring sooner than the
        # days specified by the user. It appends any that are to the output array.
        for i, exception in enumerate(resources):
            expires = exception.get("expires")
            if expires:  # If an exception is set to never expire, it will not have an expires key
                exception_date_expires = maya.parse(expires)
                days = (now - exception_date_expires).days
                if days > (-days_left):  # Expiration dates should be in the future, thus -days_left
                    exceptions_to_return.append(exception)

        return {Output.EXCEPTIONS: exceptions_to_return}
