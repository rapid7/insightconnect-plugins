import komand
from .schema import AssetVulnerabilitySolutionInput, AssetVulnerabilitySolutionOutput, Input, Output, Component
# Custom imports below
import asyncio
from komand_rapid7_insightvm.util import endpoints


class AssetVulnerabilitySolution(komand.Action):

    def __init__(self):
        super(self.__class__, self).__init__(
                name='asset_vulnerability_solution',
                description=Component.DESCRIPTION,
                input=AssetVulnerabilitySolutionInput(),
                output=AssetVulnerabilitySolutionOutput())

    def run(self, params={}):
        asset_id = params.get(Input.ASSET_ID)
        vulnerability_ids = params.get(Input.VULNERABILITY_IDS)

        solutions = asyncio.run(self.async_get_asset_vulnerability_solutions(asset_id, vulnerability_ids))
        return {Output.VULNERABILITIES_SOLUTION: solutions}

    async def async_get_asset_vulnerability_solutions(self, asset_id: str, vulnerability_ids: [str]) -> [dict]:
        """
        Asynchronously get solutions
        :param asset_id: The Asset ID
        :param vulnerability_ids: A list of Vulnerability IDs for the asset
        :return: A list of solutions
        """
        connection = self.connection.async_connection
        async with connection.get_async_session() as async_session:
            tasks: [asyncio.Future] = []
            for vuln_id in vulnerability_ids:
                endpoint = endpoints.Asset.asset_vulnerability_solution(self.connection.console_url, asset_id, vuln_id)
                tasks.append(asyncio.ensure_future(connection.async_request(session=async_session,
                                                                            endpoint=endpoint, method='get')))
                solutions = await asyncio.gather(*tasks)
                return solutions
