# GENERATED BY KOMAND SDK - DO NOT EDIT
import komand
import json


class Component:
    DESCRIPTION = "Posts a malware event for processing and optionally adds it to the customer's domain list"


class Input:
    EVENTS = "events"
    

class Output:
    ID = "ID"
    

class AddEventInput(komand.Input):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "events": {
      "type": "array",
      "title": "Events",
      "description": "Generic event format field. More info at https://docs.umbrella.com/developer/enforcement-api/generic-event-format2/",
      "items": {
        "$ref": "#/definitions/event"
      },
      "order": 1
    }
  },
  "required": [
    "events"
  ],
  "definitions": {
    "event": {
      "type": "object",
      "title": "event",
      "properties": {
        "ID": {
          "type": "string",
          "title": "ID",
          "description": "The ID of the device sending the event",
          "order": 1
        },
        "alertTime": {
          "type": "string",
          "title": "AlertTime",
          "description": "Time event was sent to Umbrella must match the following style 2013-02-08T09:30:26Z",
          "order": 4
        },
        "deviceVersion": {
          "type": "string",
          "title": "DeviceVersion",
          "description": "Version of device sending the event",
          "order": 2
        },
        "disableDstSafeguards": {
          "type": "boolean",
          "title": "DisableDstSafeguards",
          "description": "A value of 'true' will bypass validations normally performed against submitted events before adding them to any of the domain lists in Umbrella",
          "order": 9
        },
        "dstDomain": {
          "type": "string",
          "title": "DstDomain",
          "description": "The destination domain, specified following RFC3986 encoding guidelines and without the protocol included. An example would be www.internetbadguys.com",
          "order": 5
        },
        "dstIP": {
          "type": "string",
          "title": "DstIP",
          "description": "The destination IP of the domain, specified in IPv4 dotted-decimal notation. An example would be 8.8.8.8",
          "order": 15
        },
        "dstURL": {
          "type": "string",
          "title": "DstURL",
          "description": "The destination URL encoded using standard percent-encoding following RFC3986](http://www.ietf.org/rfc/rfc3986.txt) encoding guidelines. An example would be http://internetbadguys.com/security?foo=there%20are%20spaces%20here",
          "order": 6
        },
        "eventDescription": {
          "type": "string",
          "title": "EventDescription",
          "description": "Variant or other descriptor of event type",
          "order": 18
        },
        "eventHash": {
          "type": "string",
          "title": "EventHash",
          "description": "A unique hash of the event",
          "order": 10
        },
        "eventSeverity": {
          "type": "string",
          "title": "EventSeverity",
          "description": "The parter threat level or rating, eg: severe, bad, high, etc",
          "order": 16
        },
        "eventTime": {
          "type": "string",
          "title": "EventTime",
          "description": "Time event was detected, must match the following style 2013-02-08T09:30:26Z",
          "order": 3
        },
        "eventType": {
          "type": "string",
          "title": "EventType",
          "description": "Common name or classification of threat",
          "order": 17
        },
        "externalURL": {
          "type": "string",
          "title": "ExternalURL",
          "description": "External page containing additional information about event",
          "order": 13
        },
        "fileHash": {
          "type": "string",
          "title": "FileHash",
          "description": "SHA-1 of file reported by appliance",
          "order": 12
        },
        "fileName": {
          "type": "string",
          "title": "FileName",
          "description": "Path to file exhibiting malicious behavior",
          "order": 11
        },
        "protocolVersion": {
          "type": "string",
          "title": "ProtocolVersion",
          "description": "The version of the protocol for the API. Value should always be 1.0a",
          "order": 7
        },
        "providerName": {
          "type": "string",
          "title": "ProviderName",
          "description": "The provider name for the API. Value should always be Security Platform",
          "order": 8
        },
        "src": {
          "type": "string",
          "title": "Src",
          "description": "IP/Host of the infected computer/device that was patient 0 for the event",
          "order": 14
        }
      },
      "required": [
        "ID",
        "alertTime",
        "deviceVersion",
        "dstDomain",
        "dstURL",
        "eventTime",
        "protocolVersion",
        "providerName"
      ]
    }
  }
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)


class AddEventOutput(komand.Output):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "ID": {
      "type": "array",
      "title": "ID List",
      "description": "List of added IDs",
      "items": {
        "type": "string"
      },
      "order": 1
    }
  },
  "required": [
    "ID"
  ]
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)
