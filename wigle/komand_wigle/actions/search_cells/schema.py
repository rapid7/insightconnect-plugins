# GENERATED BY KOMAND SDK - DO NOT EDIT
import komand
import json


class Component:
    DESCRIPTION = "Query the WiGLE cell database for paginated results based on multiple criteria"


class Input:
    CELL_ID = "cell_id"
    CELL_NET = "cell_net"
    CELL_OP = "cell_op"
    ENDTRANSID = "endTransID"
    LASTUPDT = "lastupdt"
    LATRANGE1 = "latrange1"
    LATRANGE2 = "latrange2"
    LONGRANGE1 = "longrange1"
    LONGRANGE2 = "longrange2"
    MINQOS = "minQoS"
    NOTMINE = "notmine"
    ONLYMINE = "onlymine"
    RESULTSPERPAGE = "resultsPerPage"
    SEARCHAFTER = "searchAfter"
    SHOWCDMA = "showCdma"
    SHOWGSM = "showGsm"
    SSID = "ssid"
    SSIDLIKE = "ssidlike"
    STARTTRANSID = "startTransID"
    VARIANCE = "variance"
    

class Output:
    FIRST = "first"
    LAST = "last"
    RESULTCOUNT = "resultCount"
    RESULTS = "results"
    SEARCH_AFTER = "search_after"
    TOTALRESULTS = "totalResults"
    

class SearchCellsInput(komand.Input):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "cell_id": {
      "type": "string",
      "title": "Cell ID",
      "description": "Cell ID(GSM/LTE/WCDMA) or Basestation (CDMA) parameter by which to filter",
      "order": 12
    },
    "cell_net": {
      "type": "string",
      "title": "Cell Network",
      "description": "Cell LAC (GSM/LTE/WCDMA) or Network (CDMA) ID parameter by which to filter",
      "order": 11
    },
    "cell_op": {
      "type": "string",
      "title": "Cell Operator",
      "description": "Cell Operator (GSM/LTE/WCDMA) or System (CDMA) ID parameter by which to filter",
      "order": 10
    },
    "endTransID": {
      "type": "string",
      "title": "End Transaction ID",
      "description": "Latest transaction ID by which to bound (year-level precision only)",
      "order": 9
    },
    "lastupdt": {
      "type": "string",
      "title": "Last Updated",
      "description": "Filter points by how recently they've been updated, condensed date/time numeric string format yyyyMMdd[hhmm[ss]]",
      "order": 7
    },
    "latrange1": {
      "type": "number",
      "title": "Latitude Range Min",
      "description": "Lesser of two latitudes by which to bound the search (specify both)",
      "order": 3
    },
    "latrange2": {
      "type": "number",
      "title": "Latitude Range Max",
      "description": "Greater of two latitudes by which to bound the search (specify both)",
      "order": 4
    },
    "longrange1": {
      "type": "number",
      "title": "Longitude Range Min",
      "description": "Lesser of two longitudes by which to bound the search (specify both)",
      "order": 5
    },
    "longrange2": {
      "type": "number",
      "title": "Longitude Range Max",
      "description": "Greater of two longitudes by which to bound the search (specify both)",
      "order": 6
    },
    "minQoS": {
      "type": "integer",
      "title": "Min QoS",
      "description": "Minimum Quality of Signal (0-7)",
      "order": 15
    },
    "notmine": {
      "type": "string",
      "title": "Not Mine",
      "description": "Only search for networks first seen by other users",
      "order": 2
    },
    "onlymine": {
      "type": "string",
      "title": "Only Mine",
      "description": "Search only for points first discovered by the current user. Use any string to set, leave unset for general search. Can't be used with COMMAPI auth, since these are points you have locally",
      "default": "",
      "order": 1
    },
    "resultsPerPage": {
      "type": "integer",
      "title": "Results Per Page",
      "description": "How many results to return per request. Defaults to 25 for COMMAPI, 100 for site. Bounded at 1000 for COMMAPI, 100 for site",
      "order": 19
    },
    "searchAfter": {
      "type": "integer",
      "title": "Search After",
      "description": "Previous page's search_after to get the next page. Use this instead of 'first'",
      "order": 20
    },
    "showCdma": {
      "type": "string",
      "title": "Show CDMA",
      "description": "Include CDMA cell networks",
      "order": 17
    },
    "showGsm": {
      "type": "string",
      "title": "Show GSM",
      "description": "Include GSM cell networks",
      "order": 16
    },
    "ssid": {
      "type": "string",
      "title": "SSID",
      "description": "Include only cell towers exactly matching the string network name",
      "order": 13
    },
    "ssidlike": {
      "type": "string",
      "title": "SSID Like",
      "description": "Include only cell towers matching the string network name, allowing wildcards '%' (any string) and '_' (any character)",
      "order": 14
    },
    "startTransID": {
      "type": "string",
      "title": "Start Transaction ID",
      "description": "Earliest transaction ID by which to bound (year-level precision only)",
      "order": 8
    },
    "variance": {
      "type": "number",
      "title": "Variance",
      "description": "How tightly to bound queries against the provided latitude/longitude box. Value must be between 0.001 and 0.2. Intended for use with non-exact decimals and geocoded bounds",
      "order": 18
    }
  }
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)


class SearchCellsOutput(komand.Output):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "first": {
      "type": "integer",
      "title": "First",
      "description": "First",
      "order": 4
    },
    "last": {
      "type": "integer",
      "title": "Last",
      "description": "Last",
      "order": 5
    },
    "resultCount": {
      "type": "integer",
      "title": "Result Count",
      "description": "Result count",
      "order": 6
    },
    "results": {
      "type": "array",
      "title": "Results",
      "description": "Matched cells",
      "items": {
        "$ref": "#/definitions/cell_record"
      },
      "order": 1
    },
    "search_after": {
      "type": "integer",
      "title": "Search After",
      "description": "Search after",
      "order": 3
    },
    "totalResults": {
      "type": "integer",
      "title": "Total Results",
      "description": "Total results",
      "order": 2
    }
  },
  "required": [
    "first",
    "last",
    "resultCount",
    "results",
    "totalResults"
  ],
  "definitions": {
    "cell_record": {
      "type": "object",
      "title": "cell_record",
      "properties": {
        "attributes": {
          "type": "string",
          "title": "Attributes",
          "order": 15
        },
        "city": {
          "type": "string",
          "title": "City",
          "order": 11
        },
        "country": {
          "type": "string",
          "title": "Country",
          "order": 13
        },
        "firsttime": {
          "type": "string",
          "title": "First Time",
          "displayType": "date",
          "format": "date-time",
          "order": 6
        },
        "gentype": {
          "type": "string",
          "title": "Gen Type",
          "order": 16
        },
        "housenumber": {
          "type": "string",
          "title": "House Number",
          "order": 9
        },
        "id": {
          "type": "string",
          "title": "ID",
          "order": 14
        },
        "lasttime": {
          "type": "string",
          "title": "Last Time",
          "displayType": "date",
          "format": "date-time",
          "order": 7
        },
        "lastupdt": {
          "type": "string",
          "title": "Last Updated",
          "displayType": "date",
          "format": "date-time",
          "order": 8
        },
        "qos": {
          "type": "integer",
          "title": "QoS",
          "order": 4
        },
        "region": {
          "type": "string",
          "title": "Region",
          "order": 12
        },
        "road": {
          "type": "string",
          "title": "Road",
          "order": 10
        },
        "ssid": {
          "type": "string",
          "title": "SSID",
          "order": 3
        },
        "transid": {
          "type": "string",
          "title": "Transaction ID",
          "order": 5
        },
        "trilat": {
          "type": "number",
          "title": "Tri Latitude",
          "order": 1
        },
        "trilong": {
          "type": "number",
          "title": "Tri Longitude",
          "order": 2
        }
      },
      "required": [
        "firsttime",
        "gentype",
        "id",
        "lasttime",
        "lastupdt",
        "qos",
        "transid",
        "trilat",
        "trilong"
      ]
    }
  }
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)
