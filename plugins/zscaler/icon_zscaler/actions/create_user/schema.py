# GENERATED BY KOMAND SDK - DO NOT EDIT
import insightconnect_plugin_runtime
import json


class Component:
    DESCRIPTION = "Adds a new user. A user can belong to multiple groups, but can only belong to one department"


class Input:
    COMMENTS = "comments"
    DEPARTMENTNAME = "departmentName"
    EMAIL = "email"
    GROUPNAMES = "groupNames"
    NAME = "name"
    PASSWORD = "password"
    TEMPAUTHEMAIL = "tempAuthEmail"
    

class Output:
    USER = "user"
    

class CreateUserInput(insightconnect_plugin_runtime.Input):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "comments": {
      "type": "string",
      "title": "Comments",
      "description": "Additional information about this user",
      "order": 5
    },
    "departmentName": {
      "type": "string",
      "title": "Department Name",
      "description": "Department a user belongs to",
      "order": 4
    },
    "email": {
      "type": "string",
      "title": "Email",
      "description": "User email consists of a user name and domain name. It does not have to be a valid email address, but it must be unique and its domain must belong to the organization",
      "order": 2
    },
    "groupNames": {
      "type": "array",
      "title": "Group Names",
      "description": "List of groups a user belongs to",
      "items": {
        "type": "string"
      },
      "order": 3
    },
    "name": {
      "type": "string",
      "title": "Name",
      "description": "User name",
      "order": 1
    },
    "password": {
      "type": "string",
      "title": "Password",
      "displayType": "password",
      "description": "User's password. Applicable only when authentication type is Hosted DB. Password strength must follow what is defined in the auth settings",
      "format": "password",
      "order": 7
    },
    "tempAuthEmail": {
      "type": "string",
      "title": "Temporary Authentication Email",
      "description": "If you enabled one-time tokens or links, enter the email address to which the Zscaler service sends the tokens or links. If this is empty, the service sends the email to the User email",
      "order": 6
    }
  },
  "required": [
    "departmentName",
    "email",
    "groupNames",
    "name",
    "password"
  ]
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)


class CreateUserOutput(insightconnect_plugin_runtime.Output):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "user": {
      "$ref": "#/definitions/user",
      "title": "User",
      "description": "An organization user",
      "order": 1
    }
  },
  "definitions": {
    "department": {
      "type": "object",
      "title": "department",
      "properties": {
        "comments": {
          "type": "string",
          "title": "Comments",
          "description": "Additional information about this department",
          "order": 4
        },
        "deleted": {
          "type": "boolean",
          "title": "Deleted",
          "description": "Is department deleted",
          "order": 5
        },
        "id": {
          "type": "integer",
          "title": "ID",
          "description": "Department ID",
          "order": 1
        },
        "idpId": {
          "type": "integer",
          "title": "IdpId",
          "description": "Identity provider (IdP) ID",
          "order": 3
        },
        "name": {
          "type": "string",
          "title": "Name",
          "description": "Department name",
          "order": 2
        }
      }
    },
    "group": {
      "type": "object",
      "title": "group",
      "properties": {
        "comments": {
          "type": "string",
          "title": "Comments",
          "description": "Additional information about the group",
          "order": 4
        },
        "id": {
          "type": "integer",
          "title": "ID",
          "description": "Unique identifier for the group",
          "order": 1
        },
        "idpId": {
          "type": "integer",
          "title": "IdpId",
          "description": "Unique identifier for the identity provider (IdP)",
          "order": 3
        },
        "name": {
          "type": "string",
          "title": "Name",
          "description": "Group name",
          "order": 2
        }
      }
    },
    "user": {
      "type": "object",
      "title": "user",
      "properties": {
        "adminUser": {
          "type": "boolean",
          "title": "Admin User",
          "description": "True if this user is an Admin user",
          "order": 8
        },
        "comments": {
          "type": "string",
          "title": "Comments",
          "description": "Additional information about this user",
          "order": 6
        },
        "deleted": {
          "type": "boolean",
          "title": "Deleted",
          "description": "Is user deleted",
          "order": 10
        },
        "department": {
          "$ref": "#/definitions/department",
          "title": "Department",
          "description": "Department a user belongs to",
          "order": 5
        },
        "email": {
          "type": "string",
          "title": "Email",
          "description": "User email consists of a user name and domain name. It does not have to be a valid email address, but it must be unique and its domain must belong to the organization",
          "order": 3
        },
        "groups": {
          "type": "array",
          "title": "Groups",
          "description": "List of groups a user belongs to",
          "items": {
            "$ref": "#/definitions/group"
          },
          "order": 4
        },
        "id": {
          "type": "integer",
          "title": "ID",
          "description": "User ID",
          "order": 1
        },
        "isNonEditable": {
          "type": "boolean",
          "title": "Is Non Editable",
          "description": "Is user non-editable",
          "order": 11
        },
        "name": {
          "type": "string",
          "title": "Name",
          "description": "User name",
          "order": 2
        },
        "tempAuthEmail": {
          "type": "string",
          "title": "Temporary Authentication Email",
          "description": "If you enabled one-time tokens or links, enter the email address to which the Zscaler service sends the tokens or links. If this is empty, the service sends the email to the User email",
          "order": 7
        },
        "type": {
          "type": "string",
          "title": "Type",
          "description": "User type. Provided only if this user is not an end user",
          "order": 9
        }
      },
      "definitions": {
        "department": {
          "type": "object",
          "title": "department",
          "properties": {
            "comments": {
              "type": "string",
              "title": "Comments",
              "description": "Additional information about this department",
              "order": 4
            },
            "deleted": {
              "type": "boolean",
              "title": "Deleted",
              "description": "Is department deleted",
              "order": 5
            },
            "id": {
              "type": "integer",
              "title": "ID",
              "description": "Department ID",
              "order": 1
            },
            "idpId": {
              "type": "integer",
              "title": "IdpId",
              "description": "Identity provider (IdP) ID",
              "order": 3
            },
            "name": {
              "type": "string",
              "title": "Name",
              "description": "Department name",
              "order": 2
            }
          }
        },
        "group": {
          "type": "object",
          "title": "group",
          "properties": {
            "comments": {
              "type": "string",
              "title": "Comments",
              "description": "Additional information about the group",
              "order": 4
            },
            "id": {
              "type": "integer",
              "title": "ID",
              "description": "Unique identifier for the group",
              "order": 1
            },
            "idpId": {
              "type": "integer",
              "title": "IdpId",
              "description": "Unique identifier for the identity provider (IdP)",
              "order": 3
            },
            "name": {
              "type": "string",
              "title": "Name",
              "description": "Group name",
              "order": 2
            }
          }
        }
      }
    }
  }
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)
