# GENERATED BY KOMAND SDK - DO NOT EDIT
import insightconnect_plugin_runtime
import json


class Component:
    DESCRIPTION = "The List Blobs action returns a list of the blobs under the specified container"


class Input:
    ADDITIONAL_HEADERS = "additional_headers"
    CONTAINER_NAME = "container_name"
    DELIMITER = "delimiter"
    INCLUDE = "include"
    MAX_RESULTS = "max_results"
    PREFIX = "prefix"
    TIMEOUT = "timeout"
    

class Output:
    BLOBS = "blobs"
    BLOBS_WITH_DELIMITER_MATCH = "blobs_with_delimiter_match"
    DELIMITER = "delimiter"
    MAX_RESULTS = "max_results"
    PREFIX = "prefix"
    

class ListBlobsInput(insightconnect_plugin_runtime.Input):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "additional_headers": {
      "type": "object",
      "title": "Additional Headers",
      "description": "Additional headers to pass to the API request",
      "default": "{}",
      "order": 7
    },
    "container_name": {
      "type": "string",
      "title": "Container Name",
      "description": "Name of the container",
      "order": 1
    },
    "delimiter": {
      "type": "string",
      "title": "Delimiter",
      "description": "When this parameter is provided, the action returns a 'blobs_with_delimiter_match' element in the output that acts as a placeholder for all blobs whose names begin with the same substring up to the appearance of the delimiter character. The delimiter may be a single character or a string",
      "order": 3
    },
    "include": {
      "type": "array",
      "title": "Include",
      "description": "Specifies one or more datasets to include in the response. Available values - 'snapshots', 'metadata', 'uncommittedblobs', 'copy', 'deleted', 'tags', 'versions', 'deletedwithversions', 'immutabilitypolicy', 'legalhold', 'permissions'",
      "items": {
        "type": "string"
      },
      "default": [],
      "order": 5
    },
    "max_results": {
      "type": "integer",
      "title": "Max Results",
      "description": "Specifies the maximum number of blobs to return. If the request does not specify max_results, or specifies a value greater than 100, the action will return up to 100 items",
      "default": 20,
      "order": 4
    },
    "prefix": {
      "type": "string",
      "title": "Prefix",
      "description": "Filters the results to return only blobs whose name begins with the specified prefix",
      "order": 2
    },
    "timeout": {
      "type": "integer",
      "title": "Timeout",
      "description": "Maximum time to wait for server response in seconds, between 0 and 30",
      "default": 30,
      "order": 6
    }
  },
  "required": [
    "container_name"
  ]
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)


class ListBlobsOutput(insightconnect_plugin_runtime.Output):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "blobs": {
      "type": "array",
      "title": "Blobs",
      "description": "Blobs list",
      "items": {
        "$ref": "#/definitions/blob"
      },
      "order": 4
    },
    "blobs_with_delimiter_match": {
      "type": "array",
      "title": "Blobs with Delimiter Match",
      "description": "Blobs which contains 'delimiter' in name",
      "items": {
        "type": "string"
      },
      "order": 5
    },
    "delimiter": {
      "type": "string",
      "title": "Delimiter",
      "description": "The Delimiter given as input, if present",
      "order": 2
    },
    "max_results": {
      "type": "string",
      "title": "Max Results",
      "description": "Max results given as input",
      "order": 3
    },
    "prefix": {
      "type": "string",
      "title": "Prefix",
      "description": "Prefix used as input parameter",
      "order": 1
    }
  },
  "definitions": {
    "blob": {
      "type": "object",
      "title": "blob",
      "properties": {
        "deleted": {
          "type": "string",
          "title": "Deleted",
          "description": "Whether the blob is soft deleted or not",
          "order": 5
        },
        "is_current_version": {
          "type": "string",
          "title": "Is Current Version",
          "description": "Is current version",
          "order": 4
        },
        "metadata": {
          "type": "object",
          "title": "Metadata",
          "description": "Blob metadata",
          "order": 7
        },
        "name": {
          "type": "string",
          "title": "Name",
          "description": "Blob name",
          "order": 1
        },
        "properties": {
          "$ref": "#/definitions/blob_properties",
          "title": "Properties",
          "description": "Blob properties",
          "order": 6
        },
        "snapshot_id": {
          "type": "string",
          "title": "Snapshot ID",
          "description": "Blob snapshot id",
          "order": 3
        },
        "tags": {
          "type": "array",
          "title": "Tags",
          "description": "Blob tags",
          "items": {
            "type": "object"
          },
          "order": 8
        },
        "version_id": {
          "type": "string",
          "title": "Version ID",
          "description": "Blob version id",
          "order": 2
        }
      },
      "definitions": {
        "blob_properties": {
          "type": "object",
          "title": "blob_properties",
          "properties": {
            "access_tier": {
              "type": "string",
              "title": "Access Tier",
              "description": "Access tier",
              "order": 8
            },
            "blob_type": {
              "type": "string",
              "title": "Blob Type",
              "description": "Blob type",
              "order": 7
            },
            "content_type": {
              "type": "string",
              "title": "Content Type",
              "description": "Blob content type",
              "order": 6
            },
            "creation_time": {
              "type": "string",
              "title": "Creation Time",
              "description": "Creation date",
              "order": 1
            },
            "etag": {
              "type": "string",
              "title": "Etag",
              "description": "Blob's etag",
              "order": 9
            },
            "last_modified": {
              "type": "string",
              "title": "Last Modified",
              "description": "Last modified date",
              "order": 5
            },
            "remaining_retention_days": {
              "type": "string",
              "title": "Remaining Retention Days",
              "description": "Remaining retention days",
              "order": 2
            },
            "server_encrypted": {
              "type": "string",
              "title": "Server Encrypted",
              "description": "Server encrypted",
              "order": 4
            },
            "tag_count": {
              "type": "string",
              "title": "Tag Count",
              "description": "Tag count",
              "order": 3
            }
          }
        }
      }
    },
    "blob_properties": {
      "type": "object",
      "title": "blob_properties",
      "properties": {
        "access_tier": {
          "type": "string",
          "title": "Access Tier",
          "description": "Access tier",
          "order": 8
        },
        "blob_type": {
          "type": "string",
          "title": "Blob Type",
          "description": "Blob type",
          "order": 7
        },
        "content_type": {
          "type": "string",
          "title": "Content Type",
          "description": "Blob content type",
          "order": 6
        },
        "creation_time": {
          "type": "string",
          "title": "Creation Time",
          "description": "Creation date",
          "order": 1
        },
        "etag": {
          "type": "string",
          "title": "Etag",
          "description": "Blob's etag",
          "order": 9
        },
        "last_modified": {
          "type": "string",
          "title": "Last Modified",
          "description": "Last modified date",
          "order": 5
        },
        "remaining_retention_days": {
          "type": "string",
          "title": "Remaining Retention Days",
          "description": "Remaining retention days",
          "order": 2
        },
        "server_encrypted": {
          "type": "string",
          "title": "Server Encrypted",
          "description": "Server encrypted",
          "order": 4
        },
        "tag_count": {
          "type": "string",
          "title": "Tag Count",
          "description": "Tag count",
          "order": 3
        }
      }
    }
  }
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)
