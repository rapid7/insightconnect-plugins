# GENERATED BY KOMAND SDK - DO NOT EDIT
import komand
import json


class Component:
    DESCRIPTION = "Get list of boards by member"


class Input:
    ACTION_FIELDS = "action_fields"
    ACTIONS = "actions"
    ACTIONS_ENTITIES = "actions_entities"
    ACTIONS_FORMAT = "actions_format"
    ACTIONS_LIMIT = "actions_limit"
    ACTIONS_SINCE = "actions_since"
    FIELDS = "fields"
    FILTER = "filter"
    ID_OR_NAME = "id_or_name"
    LISTS = "lists"
    MEMBERSHIPS = "memberships"
    ORGANIZATION = "organization"
    ORGANIZATION_FIELDS = "organization_fields"
    

class Output:
    RESULT = "result"
    

class GetBoardsByMemberInput(komand.Input):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "action_fields": {
      "type": "string",
      "title": "Action Fields",
      "description": "List all fields of actions",
      "default": "all",
      "enum": [
        "all",
        "data",
        "date",
        "idMemberCreator",
        "type"
      ],
      "order": 9
    },
    "actions": {
      "type": "string",
      "title": "List Actions",
      "description": "List actions",
      "enum": [
        "",
        "all",
        "addAttachmentToCard",
        "addChecklistToCard",
        "addMemberToBoard",
        "addMemberToCard",
        "addMemberToOrganization",
        "addToOrganizationBoard",
        "commentCard",
        "convertToCardFromCheckItem",
        "copyBoard",
        "copyCard",
        "copyCommentCard",
        "createBoard",
        "createCard",
        "createList",
        "createOrganization",
        "deleteAttachmentFromCard",
        "deleteBoardInvitation",
        "deleteCard",
        "deleteOrganizationInvitation",
        "disablePowerUp",
        "emailCard",
        "enablePowerUp",
        "makeAdminOfBoard",
        "makeNormalMemberOfBoard",
        "makeNormalMemberOfOrganization",
        "makeObserverOfBoard",
        "memberJoinedTrello",
        "moveCardFromBoard",
        "moveCardToBoard",
        "moveListFromBoard",
        "moveListToBoard",
        "removeChecklistFromCard",
        "removeFromOrganizationBoard",
        "removeMemberFromCard",
        "unconfirmedBoardInvitation",
        "unconfirmedOrganizationInvitation",
        "updateBoard",
        "updateCard",
        "updateCard:closed",
        "updateCard:desc",
        "updateCard:idList",
        "updateCard:name",
        "updateCheckItemStateOnCard",
        "updateChecklist",
        "updateList",
        "updateList:closed",
        "updateList:name",
        "updateMember",
        "updateOrganization"
      ],
      "order": 4
    },
    "actions_entities": {
      "type": "boolean",
      "title": "Actions Entities",
      "description": "Actions entities",
      "default": false,
      "order": 5
    },
    "actions_format": {
      "type": "string",
      "title": "Actions Format",
      "description": "Format of actions",
      "default": "list",
      "enum": [
        "count",
        "list",
        "minimal"
      ],
      "order": 7
    },
    "actions_limit": {
      "type": "integer",
      "title": "Actions Limit",
      "description": "A number from 0 to 1000, default: 50",
      "default": 50,
      "order": 6
    },
    "actions_since": {
      "type": "string",
      "title": "Actions Since",
      "description": "Filter by a date, null or lastView",
      "order": 8
    },
    "fields": {
      "type": "string",
      "title": "Fields",
      "description": "Fields of member, default: all",
      "default": "all",
      "enum": [
        "all",
        "closed",
        "dateLastActivity",
        "dateLastView",
        "desc",
        "descData",
        "idOrganization",
        "invitations",
        "invited",
        "labelNames",
        "memberships",
        "name",
        "pinned",
        "powerUps",
        "prefs",
        "shortLink",
        "shortUrl",
        "starred",
        "subscribed",
        "url"
      ],
      "order": 3
    },
    "filter": {
      "type": "string",
      "title": "Filter",
      "description": "Filter boards with any status of board, default: all",
      "default": "all",
      "enum": [
        "all",
        "closed",
        "members",
        "open",
        "organization",
        "pinned",
        "public",
        "starred",
        "unpinned"
      ],
      "order": 2
    },
    "id_or_name": {
      "type": "string",
      "title": "ID or Name Member",
      "description": "ID or name of member",
      "order": 1
    },
    "lists": {
      "type": "string",
      "title": "Lists",
      "description": "Format lists",
      "default": "none",
      "enum": [
        "all",
        "closed",
        "none",
        "open"
      ],
      "order": 13
    },
    "memberships": {
      "type": "string",
      "title": "Memberships",
      "description": "List status of memberships",
      "enum": [
        "",
        "all",
        "active",
        "admin",
        "deactivated",
        "me",
        "normal"
      ],
      "order": 10
    },
    "organization": {
      "type": "boolean",
      "title": "Organization",
      "description": "Response with organization or none",
      "default": false,
      "order": 11
    },
    "organization_fields": {
      "type": "string",
      "title": "Organization Fields",
      "description": "Response with one or more member fields",
      "enum": [
        "",
        "all",
        "billableMemberCount",
        "desc",
        "descData",
        "displayName",
        "idBoards",
        "invitations",
        "invited",
        "logoHash",
        "memberships",
        "name",
        "powerUps",
        "prefs",
        "premiumFeatures",
        "products",
        "url",
        "website"
      ],
      "order": 12
    }
  },
  "required": [
    "id_or_name"
  ]
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)


class GetBoardsByMemberOutput(komand.Output):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "result": {
      "type": "array",
      "title": "Result",
      "description": "Trello return an array json, result variable is used for response",
      "items": {
        "type": "object"
      },
      "order": 1
    }
  }
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)
