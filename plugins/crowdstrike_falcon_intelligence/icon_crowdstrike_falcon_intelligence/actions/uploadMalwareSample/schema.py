# GENERATED BY INSIGHT-PLUGIN - DO NOT EDIT
import insightconnect_plugin_runtime
import json


class Component:
    DESCRIPTION = "Upload malware sample"


class Input:
    COMMENT = "comment"
    FILENAME = "filename"
    ISCONFIDENTIAL = "isConfidential"
    SAMPLE = "sample"


class Output:
    FILENAME = "fileName"
    SHA256 = "sha256"


class UploadMalwareSampleInput(insightconnect_plugin_runtime.Input):
    schema = json.loads(r"""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "comment": {
      "type": "string",
      "title": "Comment",
      "description": "A descriptive comment to identify the file for other users",
      "order": 3
    },
    "filename": {
      "type": "string",
      "title": "Filename",
      "description": "The name of file to be used to override the default filename",
      "order": 2
    },
    "isConfidential": {
      "type": "boolean",
      "title": "Is Confidential",
      "description": "Defines visibility of this file in Falcon MalQuery, either via the API or the Falcon console. True means that file is only shown to users within your customer account. False means that file can be seen by other CrowdStrike customers",
      "default": true,
      "order": 4
    },
    "sample": {
      "$ref": "#/definitions/file",
      "title": "Sample",
      "description": "The samples of file to be sent for analysis (max file size is 256 MB)",
      "order": 1
    }
  },
  "required": [
    "filename",
    "sample"
  ],
  "definitions": {
    "file": {
      "id": "file",
      "type": "object",
      "title": "File",
      "description": "File Object",
      "properties": {
        "filename": {
          "type": "string",
          "title": "Filename",
          "description": "Name of file"
        },
        "content": {
          "type": "string",
          "format": "bytes",
          "title": "Content",
          "description": "File contents"
        }
      }
    }
  }
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)


class UploadMalwareSampleOutput(insightconnect_plugin_runtime.Output):
    schema = json.loads(r"""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "fileName": {
      "type": "string",
      "title": "Filename",
      "description": "The name of uploaded malware sample file",
      "order": 2
    },
    "sha256": {
      "type": "string",
      "title": "SHA256",
      "description": "The ID of the sample, which is a SHA256 hash value",
      "order": 1
    }
  },
  "required": [
    "fileName",
    "sha256"
  ],
  "definitions": {}
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)
