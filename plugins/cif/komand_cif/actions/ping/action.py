import komand
from .schema import PingOutput, PingInput

# Custom imports below
import requests


# THE FOLLOWING CLASS IS GENERATED BY THE SDK - DO NOT EDIT
class Ping(komand.Action):
    def __init__(self):
        super(self.__class__, self).__init__(
            name="ping", description="Ping the router", input=PingInput(), output=PingOutput()
        )

    def run(self, params={}):
        # TODO: Implement run function
        url = "{}/{}".format(self.connection.url, "ping")
        headers = {
            "Authorization": "Token token={}".format(self.connection.api_token),
            "Accept": "application/vnd.cif.v2+json",
            "Content-Type": "application/json",
        }

        try:
            r = requests.get(url, headers=headers, verify=self.connection.verify)
            r.raise_for_status()
        except requests.exceptions.HTTPError as e:
            self.logger.error("HTTP error occurred. Error: " + str(e))
            raise
        except requests.exceptions.ConnectionError as e:
            self.logger.error("A network problem occurred. Error: " + str(e))
            raise
        except requests.exceptions.Timeout as e:
            self.logger.error("Timeout occurred. Error: " + str(e))
            raise
        except requests.exceptions.TooManyRedirects as e:
            self.logger.error("Too many redirects! Error: " + str(e))
            raise
        except Exception as e:
            self.logger.error("Error: " + str(e))
            raise

        return r.json()

    def test(self):
        # TODO: Implement test function
        url = "{}/{}".format(self.connection.url, "ping")
        headers = {
            "Authorization": "Token token={}".format(self.connection.api_token),
            "Accept": "application/vnd.cif.v2+json",
            "Content-Type": "application/json",
        }

        try:
            r = requests.get(url, headers=headers, verify=self.connection.verify)
            r.raise_for_status()
        except requests.exceptions.HTTPError as e:
            self.logger.error("HTTP error occurred. Error: " + str(e))
            raise
        except requests.exceptions.ConnectionError as e:
            self.logger.error("A network problem occurred. Error: " + str(e))
            raise
        except requests.exceptions.Timeout as e:
            self.logger.error("Timeout occurred. Error: " + str(e))
            raise
        except requests.exceptions.TooManyRedirects as e:
            self.logger.error("Too many redirects! Error: " + str(e))
            raise
        except Exception as e:
            self.logger.error("Error: " + str(e))
            raise

        return r.json()
