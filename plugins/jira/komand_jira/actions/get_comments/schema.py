# GENERATED BY INSIGHT-PLUGIN - DO NOT EDIT
import insightconnect_plugin_runtime
import json


class Component:
    DESCRIPTION = "Retrieve all comments on an issue"


class Input:
    ID = "id"


class Output:
    COMMENTS = "comments"
    COUNT = "count"


class GetCommentsInput(insightconnect_plugin_runtime.Input):
    schema = json.loads(r"""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "id": {
      "type": "string",
      "title": "ID",
      "description": "Issue ID",
      "order": 1
    }
  },
  "required": [
    "id"
  ],
  "definitions": {}
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)


class GetCommentsOutput(insightconnect_plugin_runtime.Output):
    schema = json.loads(r"""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "comments": {
      "type": "array",
      "title": "Comments",
      "description": "Comments list",
      "items": {
        "$ref": "#/definitions/comment"
      },
      "order": 2
    },
    "count": {
      "type": "integer",
      "title": "Count",
      "description": "Count of comments found",
      "order": 1
    }
  },
  "definitions": {
    "comment": {
      "type": "object",
      "title": "comment",
      "properties": {
        "id": {
          "type": "string",
          "description": "Comment ID",
          "order": 1
        },
        "body": {
          "type": "string",
          "description": "Body of comment",
          "order": 2
        },
        "author": {
          "$ref": "#/definitions/user",
          "description": "Author",
          "order": 3
        }
      }
    },
    "user": {
      "type": "object",
      "title": "user",
      "properties": {
        "accountId": {
          "type": "string",
          "title": "Account ID",
          "description": "User account ID",
          "order": 1
        },
        "name": {
          "type": "string",
          "description": "User name",
          "order": 2
        },
        "email_address": {
          "type": "string",
          "description": "User's email address",
          "order": 3
        },
        "display_name": {
          "type": "string",
          "description": "User's display name",
          "order": 4
        },
        "active": {
          "type": "boolean",
          "description": "Whether the user is active",
          "order": 5
        }
      }
    }
  }
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)
