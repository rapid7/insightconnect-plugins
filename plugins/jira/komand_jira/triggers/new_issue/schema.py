# GENERATED BY INSIGHT-PLUGIN - DO NOT EDIT
import insightconnect_plugin_runtime
import json


class Component:
    DESCRIPTION = "Trigger which indicates that a new issue has been created"


class Input:
    GET_ATTACHMENTS = "get_attachments"
    INCLUDE_FIELDS = "include_fields"
    JQL = "jql"
    POLL_TIMEOUT = "poll_timeout"
    PROJECT = "project"


class Output:
    ISSUE = "issue"


class NewIssueInput(insightconnect_plugin_runtime.Input):
    schema = json.loads(r"""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "get_attachments": {
      "type": "boolean",
      "title": "Get Attachments",
      "description": "Get attachments from issue",
      "default": false,
      "order": 3
    },
    "include_fields": {
      "type": "boolean",
      "title": "Include Fields",
      "description": "Whether returned Issues should include fields",
      "default": false,
      "order": 5
    },
    "jql": {
      "type": "string",
      "title": "JQL",
      "description": "JQL search string to use",
      "order": 2
    },
    "poll_timeout": {
      "type": "integer",
      "title": "Poll Timeout",
      "description": "Timeout between next poll, default 60",
      "default": 60,
      "order": 4
    },
    "project": {
      "type": "string",
      "title": "Project",
      "description": "Project ID or name",
      "order": 1
    }
  },
  "definitions": {}
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)


class NewIssueOutput(insightconnect_plugin_runtime.Output):
    schema = json.loads(r"""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "issue": {
      "$ref": "#/definitions/issue",
      "title": "Issue",
      "description": "New issue",
      "order": 1
    }
  },
  "definitions": {
    "issue": {
      "type": "object",
      "title": "issue",
      "properties": {
        "id": {
          "type": "string",
          "description": "Issue ID",
          "order": 1
        },
        "project": {
          "type": "string",
          "description": "Project",
          "order": 2
        },
        "key": {
          "type": "string",
          "description": "Issue Key",
          "order": 3
        },
        "status": {
          "type": "string",
          "description": "Status",
          "order": 4
        },
        "url": {
          "type": "string",
          "description": "Issue URL",
          "order": 5
        },
        "summary": {
          "type": "string",
          "description": "Summary",
          "order": 6
        },
        "description": {
          "type": "string",
          "description": "Description",
          "order": 7
        },
        "resolution": {
          "type": "string",
          "description": "Resolution",
          "order": 8
        },
        "labels": {
          "type": "array",
          "description": "Labels",
          "items": {
            "type": "string"
          },
          "order": 9
        },
        "reporter": {
          "type": "string",
          "description": "Reporting User",
          "order": 10
        },
        "assignee": {
          "type": "string",
          "description": "Assigned User",
          "order": 11
        },
        "created_at": {
          "type": "string",
          "description": "Created At",
          "order": 12
        },
        "updated_at": {
          "type": "string",
          "description": "Updated At",
          "order": 13
        },
        "resolved_at": {
          "type": "string",
          "description": "Resolved At",
          "order": 14
        },
        "attachments": {
          "type": "array",
          "description": "Attachments",
          "items": {
            "$ref": "#/definitions/file"
          },
          "order": 15
        },
        "fields": {
          "type": "object",
          "description": "Full list of fields",
          "order": 16
        }
      }
    },
    "file": {
      "id": "file",
      "type": "object",
      "title": "File",
      "description": "File Object",
      "properties": {
        "filename": {
          "type": "string",
          "title": "Filename",
          "description": "Name of file"
        },
        "content": {
          "type": "string",
          "format": "bytes",
          "title": "Content",
          "description": "File contents"
        }
      }
    }
  }
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)
