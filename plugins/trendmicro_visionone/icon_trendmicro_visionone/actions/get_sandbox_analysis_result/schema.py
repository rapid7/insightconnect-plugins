# GENERATED BY KOMAND SDK - DO NOT EDIT
import insightconnect_plugin_runtime
import json


class Component:
    DESCRIPTION = "Retrieves the sandbox analysis results"


class Input:
    POLL = "poll"
    POLL_TIME_SEC = "poll_time_sec"
    REPORT_ID = "report_id"
    

class Output:
    ANALYSIS_COMPLETION_DATE_TIME = "analysis_completion_date_time"
    ARGUMENTS = "arguments"
    DETECTION_NAMES = "detection_names"
    DIGEST = "digest"
    ID = "id"
    RISK_LEVEL = "risk_level"
    THREAT_TYPES = "threat_types"
    TRUE_FILE_TYPE = "true_file_type"
    TYPE = "type"
    

class GetSandboxAnalysisResultInput(insightconnect_plugin_runtime.Input):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "poll": {
      "type": "boolean",
      "title": "Poll",
      "description": "If script should wait until the task is finished before returning the result (enabled by default)",
      "default": true,
      "order": 2
    },
    "poll_time_sec": {
      "type": "number",
      "title": "Poll Time in Seconds",
      "description": "Maximum time to wait for the result to be available",
      "default": 30,
      "order": 3
    },
    "report_id": {
      "type": "string",
      "title": "Report ID",
      "description": "Report_id of the sandbox submission retrieved from the trendmicro-visionone-get-file-analysis-status command",
      "order": 1
    }
  },
  "required": [
    "poll",
    "report_id"
  ]
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)


class GetSandboxAnalysisResultOutput(insightconnect_plugin_runtime.Output):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "analysis_completion_date_time": {
      "type": "string",
      "title": "Analysis Completion Date Time",
      "description": "Timestamp in ISO 8601 format that indicates when the analysis was completed",
      "order": 5
    },
    "arguments": {
      "type": "string",
      "title": "Arguments",
      "description": "Command line arguments encoded in Base64 of the submitted file",
      "order": 6
    },
    "detection_names": {
      "type": "array",
      "title": "Detection Names",
      "description": "The name of the threat as detected by the sandbox",
      "items": {
        "type": "string"
      },
      "order": 7
    },
    "digest": {
      "type": "object",
      "title": "Digest",
      "description": "The hash values of the analyzed file",
      "order": 3
    },
    "id": {
      "type": "string",
      "title": "ID",
      "description": "Unique alphanumeric string that identifies the analysis results of a submitted object",
      "order": 1
    },
    "risk_level": {
      "type": "string",
      "title": "Risk Level",
      "description": "The risk level assigned to the object by the sandbox",
      "enum": [
        "high",
        "medium",
        "low",
        "noRisk"
      ],
      "order": 4
    },
    "threat_types": {
      "type": "array",
      "title": "Threat Types",
      "description": "The threat type as detected by the sandbox",
      "items": {
        "type": "string"
      },
      "order": 8
    },
    "true_file_type": {
      "type": "string",
      "title": "True File Type",
      "description": "File Type of the Object",
      "order": 9
    },
    "type": {
      "type": "string",
      "title": "Type",
      "description": "Object Type",
      "enum": [
        "file",
        "url"
      ],
      "order": 2
    }
  },
  "required": [
    "analysis_completion_date_time",
    "id",
    "risk_level",
    "type"
  ]
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)
