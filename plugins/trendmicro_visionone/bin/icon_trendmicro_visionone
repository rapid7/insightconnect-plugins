#!/usr/bin/env python
# GENERATED BY INSIGHT-PLUGIN - DO NOT EDIT
import os
import json
from sys import argv

Name = "Trend Micro Vision One"
Vendor = "trendmicro"
Version = "2.0.0"
Description = "Trend Micro Vision One is an enhanced threat defense platform, surpassing standard XDR solutions. It offers comprehensive detection and response across various security layers and automates data correlation for rapid response, effectively preventing most attacks"


def main():
    if 'http' in argv:
        if os.environ.get("GUNICORN_CONFIG_FILE"):
            with open(os.environ.get("GUNICORN_CONFIG_FILE")) as gf:
                gunicorn_cfg = json.load(gf)
                if gunicorn_cfg.get("worker_class", "sync") == "gevent":
                    from gevent import monkey
                    monkey.patch_all()
        elif 'gevent' in argv:
            from gevent import monkey
            monkey.patch_all()

    import insightconnect_plugin_runtime
    from icon_trendmicro_visionone import connection, actions, triggers

    class ICONTrendmicroVisionone(insightconnect_plugin_runtime.Plugin):
        def __init__(self):
            super(self.__class__, self).__init__(
                name=Name,
                vendor=Vendor,
                version=Version,
                description=Description,
                connection=connection.Connection()
            )
            self.add_trigger(triggers.PollSandboxSuspiciousList())
        
            self.add_trigger(triggers.PollAlertList())
        
            self.add_action(actions.EnableAccount())
        
            self.add_action(actions.DisableAccount())
        
            self.add_action(actions.SignOutAccount())
        
            self.add_action(actions.ResetPasswordAccount())
        
            self.add_action(actions.QuarantineEmailMessage())
        
            self.add_action(actions.DeleteEmailMessage())
        
            self.add_action(actions.RestoreEmailMessage())
        
            self.add_action(actions.IsolateEndpoint())
        
            self.add_action(actions.RestoreEndpoint())
        
            self.add_action(actions.AddToExceptionList())
        
            self.add_action(actions.RemoveFromExceptionList())
        
            self.add_action(actions.RemoveFromBlockList())
        
            self.add_action(actions.AddToSuspiciousList())
        
            self.add_action(actions.RemoveFromSuspiciousList())
        
            self.add_action(actions.GetEndpointData())
        
            self.add_action(actions.TerminateProcess())
        
            self.add_action(actions.GetSandboxSubmissionStatus())
        
            self.add_action(actions.GetSandboxAnalysisResult())
        
            self.add_action(actions.CollectFile())
        
            self.add_action(actions.GetTaskResult())
        
            self.add_action(actions.DownloadSandboxInvestigationPackage())
        
            self.add_action(actions.GetSandboxSuspiciousList())
        
            self.add_action(actions.DownloadSandboxAnalysisResult())
        
            self.add_action(actions.SubmitFileToSandbox())
        
            self.add_action(actions.AddAlertNote())
        
            self.add_action(actions.EditAlertStatus())
        
            self.add_action(actions.GetAlertList())
        
            self.add_action(actions.GetExceptionList())
        
            self.add_action(actions.GetSuspiciousList())
        
            self.add_action(actions.AddToBlockList())
        
            self.add_action(actions.SubmitUrlsToSandbox())
        
            self.add_action(actions.GetAlertDetails())
        

    """Run plugin"""
    cli = insightconnect_plugin_runtime.CLI(ICONTrendmicroVisionone())
    cli.run()


if __name__ == "__main__":
    main()
