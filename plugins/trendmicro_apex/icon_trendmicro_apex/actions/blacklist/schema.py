# GENERATED BY KOMAND SDK - DO NOT EDIT
import komand
import json


class Component:
    DESCRIPTION = "Blacklist an IP, URL, file SHA1 or domain in the UDSO list"


class Input:
    BLACKLIST_STATE = "blacklist_state"
    DESCRIPTION = "description"
    EXPIRY_DATE = "expiry_date"
    INDICATOR = "indicator"
    SCAN_ACTION = "scan_action"
    

class Output:
    SUCCESS = "success"
    

class BlacklistInput(komand.Input):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "blacklist_state": {
      "type": "boolean",
      "title": "Blacklist State",
      "description": "True to blacklist hash, false to unblacklist hash",
      "default": true,
      "order": 5
    },
    "description": {
      "type": "string",
      "title": "Description",
      "description": "Notes about why the file is being quarantined (256 characters max)",
      "order": 3
    },
    "expiry_date": {
      "type": "integer",
      "title": "Expiry Date",
      "description": "Number of days to allow this rule to be active",
      "default": 30,
      "order": 4
    },
    "indicator": {
      "type": "string",
      "title": "Indicator",
      "description": "The item to be filed as suspicious. data_type affects character limit.  URL/DOMAIN are 2046 characters max, SHA is 40 characters max",
      "order": 1
    },
    "scan_action": {
      "type": "string",
      "title": "Scan Action",
      "description": "What action to do with the data sent",
      "default": "BLOCK",
      "enum": [
        "BLOCK",
        "LOG"
      ],
      "order": 2
    }
  },
  "required": [
    "blacklist_state",
    "indicator"
  ]
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)


class BlacklistOutput(komand.Output):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "success": {
      "type": "boolean",
      "title": "Success",
      "description": "Whether or not the action was successful",
      "order": 1
    }
  },
  "required": [
    "success"
  ]
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)
