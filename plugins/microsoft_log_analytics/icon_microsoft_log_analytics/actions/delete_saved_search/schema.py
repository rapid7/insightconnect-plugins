# GENERATED BY KOMAND SDK - DO NOT EDIT
import insightconnect_plugin_runtime
import json


class Component:
    DESCRIPTION = "Deletes the specified saved search in a given workspace"


class Input:
    RESOURCE_GROUP_NAME = "resource_group_name"
    SAVED_SEARCH_NAME = "saved_search_name"
    SUBSCRIPTION_ID = "subscription_id"
    WORKSPACE_NAME = "workspace_name"
    

class Output:
    DELETED_SAVED_SEARCH = "deleted_saved_search"
    MESSAGE = "message"
    

class DeleteSavedSearchInput(insightconnect_plugin_runtime.Input):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "resource_group_name": {
      "type": "string",
      "title": "Resource Group Name",
      "description": "Name of the resource group",
      "order": 2
    },
    "saved_search_name": {
      "type": "string",
      "title": "Saved Search Name",
      "description": "Name of the saved search (case sensitive)",
      "order": 4
    },
    "subscription_id": {
      "type": "string",
      "title": "Subscription ID",
      "description": "Current subscription identifier assigned within the Azure application portal",
      "order": 1
    },
    "workspace_name": {
      "type": "string",
      "title": "Workspace Name",
      "description": "Customer's workspace name assigned to the application registration portal",
      "order": 3
    }
  },
  "required": [
    "resource_group_name",
    "saved_search_name",
    "subscription_id",
    "workspace_name"
  ]
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)


class DeleteSavedSearchOutput(insightconnect_plugin_runtime.Output):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "deleted_saved_search": {
      "$ref": "#/definitions/saved_search",
      "title": "Deleted Saved Search",
      "description": "Data of deleted saved search",
      "order": 2
    },
    "message": {
      "type": "string",
      "title": "Message",
      "description": "Text message that indicates the log data has been added to workspace",
      "order": 1
    }
  },
  "required": [
    "deleted_saved_search",
    "message"
  ],
  "definitions": {
    "properties": {
      "type": "object",
      "title": "properties",
      "properties": {
        "category": {
          "type": "string",
          "title": "Category",
          "description": "The category of the saved search",
          "order": 1
        },
        "displayName": {
          "type": "string",
          "title": "Display Name",
          "description": "Saved search display name",
          "order": 2
        },
        "functionAlias": {
          "type": "string",
          "title": "Function Alias",
          "description": "The function alias if query serves as a function",
          "order": 3
        },
        "functionParameters": {
          "type": "string",
          "title": "Function Parameters",
          "description": "The optional function parameters if query serves as a function, where value should be in the following format - param-name1:type1 = default_value1, param-name2:type2 = default_value2",
          "order": 4
        },
        "query": {
          "type": "string",
          "title": "Query",
          "description": "The query expression for the saved search",
          "order": 5
        },
        "tags": {
          "type": "array",
          "title": "Tags",
          "description": "The tags attached to the saved search, proper format is '[{'name': ExampleName, 'value': ExampleValue}]'",
          "items": {
            "$ref": "#/definitions/tag"
          },
          "order": 6
        }
      },
      "required": [
        "category",
        "displayName",
        "query"
      ],
      "definitions": {
        "tag": {
          "type": "object",
          "title": "tag",
          "properties": {
            "name": {
              "type": "string",
              "title": "Name",
              "description": "Tag's name",
              "order": 1
            },
            "value": {
              "type": "string",
              "title": "Value",
              "description": "Tag's value",
              "order": 2
            }
          }
        }
      }
    },
    "saved_search": {
      "type": "object",
      "title": "saved_search",
      "properties": {
        "id": {
          "type": "string",
          "title": "Saved Search Identifier",
          "description": "Fully qualified resource",
          "order": 1
        },
        "name": {
          "type": "string",
          "title": "Name",
          "description": "Saved search name",
          "order": 2
        },
        "properties": {
          "$ref": "#/definitions/properties",
          "title": "Properties",
          "description": "Saved search properties",
          "order": 3
        }
      },
      "definitions": {
        "properties": {
          "type": "object",
          "title": "properties",
          "properties": {
            "category": {
              "type": "string",
              "title": "Category",
              "description": "The category of the saved search",
              "order": 1
            },
            "displayName": {
              "type": "string",
              "title": "Display Name",
              "description": "Saved search display name",
              "order": 2
            },
            "functionAlias": {
              "type": "string",
              "title": "Function Alias",
              "description": "The function alias if query serves as a function",
              "order": 3
            },
            "functionParameters": {
              "type": "string",
              "title": "Function Parameters",
              "description": "The optional function parameters if query serves as a function, where value should be in the following format - param-name1:type1 = default_value1, param-name2:type2 = default_value2",
              "order": 4
            },
            "query": {
              "type": "string",
              "title": "Query",
              "description": "The query expression for the saved search",
              "order": 5
            },
            "tags": {
              "type": "array",
              "title": "Tags",
              "description": "The tags attached to the saved search, proper format is '[{'name': ExampleName, 'value': ExampleValue}]'",
              "items": {
                "$ref": "#/definitions/tag"
              },
              "order": 6
            }
          },
          "required": [
            "category",
            "displayName",
            "query"
          ],
          "definitions": {
            "tag": {
              "type": "object",
              "title": "tag",
              "properties": {
                "name": {
                  "type": "string",
                  "title": "Name",
                  "description": "Tag's name",
                  "order": 1
                },
                "value": {
                  "type": "string",
                  "title": "Value",
                  "description": "Tag's value",
                  "order": 2
                }
              }
            }
          }
        },
        "tag": {
          "type": "object",
          "title": "tag",
          "properties": {
            "name": {
              "type": "string",
              "title": "Name",
              "description": "Tag's name",
              "order": 1
            },
            "value": {
              "type": "string",
              "title": "Value",
              "description": "Tag's value",
              "order": 2
            }
          }
        }
      }
    },
    "tag": {
      "type": "object",
      "title": "tag",
      "properties": {
        "name": {
          "type": "string",
          "title": "Name",
          "description": "Tag's name",
          "order": 1
        },
        "value": {
          "type": "string",
          "title": "Value",
          "description": "Tag's value",
          "order": 2
        }
      }
    }
  }
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)
