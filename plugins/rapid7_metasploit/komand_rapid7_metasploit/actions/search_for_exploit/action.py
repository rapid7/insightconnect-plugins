import insightconnect_plugin_runtime
from .schema import SearchForExploitInput, SearchForExploitOutput

# Custom imports below
from metasploit.msfrpc import MsfRpcError, MsfRpcClient


class SearchForExploit(insightconnect_plugin_runtime.Action):
    def __init__(self):
        super(self.__class__, self).__init__(
            name="search_for_exploit",
            description="Searches for an exploit with a Metasploit RPC session",
            input=SearchForExploitInput(),
            output=SearchForExploitOutput(),
        )

    def run(self, params={}):
        search_term = params["search_term"].lower()
        results = {"exploits": [], "auxiliaries": [], "post_exploits": []}
        client = self.connection.client
        try:
            exploits = client.modules.exploits
            auxiliary = client.modules.auxiliary
            post_exploits = client.modules.post

            self.do_section(client, search_term, results, exploits, "exploit", "exploits")
            self.do_section(client, search_term, results, auxiliary, "auxiliary", "auxiliaries")
            self.do_section(client, search_term, results, post_exploits, "post", "post_exploits")

        except Exception as e:
            self.logger.error("Error occurred while retrieving exploits: ", e)
            raise

        return results

    def test(self):
        client = self.connection.client
        try:
            exploits = client.modules.exploits
            # good for logging test results and also silences unused variable from prospector
            self.logger.info(exploits)
        except Exception as e:
            self.logger.error("Error occurred while testing search for exploits: ", e)
            raise
        return {"success": True}

    def do_section(
        self,
        client: MsfRpcClient,
        search_term: str,
        results: dict,
        list_in: list,
        list_name: str,
        dictionary_key: str,
    ):
        for item in list_in:
            try:
                current_item = client.modules.use(list_name, item)
                description = current_item.description
                if search_term.lower() in item or search_term.lower() in description.lower():
                    results[dictionary_key].append(item)
            except MsfRpcError:
                self.logger.warning(f"Skipping {list_name} {item} due to connection error")
                client.close()
                self.connection.reconnect()
                client = self.connection.client
