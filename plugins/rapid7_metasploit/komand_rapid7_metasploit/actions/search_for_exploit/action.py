import insightconnect_plugin_runtime
from .schema import SearchForExploitInput, SearchForExploitOutput

# Custom imports below
from metasploit.msfrpc import MsfRpcError


class SearchForExploit(insightconnect_plugin_runtime.Action):
    def __init__(self):
        super(self.__class__, self).__init__(
            name="search_for_exploit",
            description="Searches for an exploit with a Metasploit RPC session",
            input=SearchForExploitInput(),
            output=SearchForExploitOutput(),
        )

    def run(self, params={}):
        search_term = params["search_term"].lower()
        results = {"exploits": [], "auxiliaries": [], "post_exploits": []}
        client = self.connection.client
        try:
            exploits = client.modules.exploits
            auxiliary = client.modules.auxiliary
            post_exploits = client.modules.post

            for exploit in exploits:
                try:
                    current_exploit = client.modules.use("exploit", exploit)
                    description = current_exploit.description
                    if search_term.lower() in exploit or search_term.lower() in description.lower():
                        results["exploits"].append(exploit)
                except MsfRpcError:
                    self.logger.warning(f"Skipping exploit {exploit} due to connection error")
                    client.close()
                    self.connection.reconnect()
                    client = self.connection.client

            for aux in auxiliary:
                try:
                    current_aux = client.modules.use("auxiliary", aux)
                    description = current_aux.description
                    try:
                        if search_term in aux or search_term in description.lower():
                            results["auxiliaries"].append(aux)
                    except UnicodeDecodeError as e:
                        self.logger.error(f"Error: {e}")
                except MsfRpcError:
                    self.logger.warning(f"Skipping auxiliary exploit {aux} due to connection error")
                    client.close()
                    self.connection.reconnect()
                    client = self.connection.client

            for post in post_exploits:
                try:
                    current_post = client.modules.use("post", post)
                    description = current_post.description
                    if search_term.lower() in post or search_term.lower() in description.lower():
                        results["post_exploits"].append(post)
                except MsfRpcError:
                    self.logger.warning(f"Skipping post exploit {post} due to connection error")
                    client.close()
                    self.connection.reconnect()
                    client = self.connection.client
            return {"search_results": results}
        except Exception as e:
            self.logger.error("Error occurred while retrieving exploits: ", e)
            raise

    def test(self):
        client = self.connection.client
        try:
            exploits = client.modules.exploits
        except Exception as e:
            self.logger.error("Error occurred while testing search for exploits: ", e)
            raise
        return {"success": True}
