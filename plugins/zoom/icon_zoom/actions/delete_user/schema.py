# GENERATED BY KOMAND SDK - DO NOT EDIT
import insightconnect_plugin_runtime
import json


class Component:
    DESCRIPTION = "Delete or disassociate user from account"


class Input:
    ACTION = "action"
    ID = "id"
    TRANSFER_EMAIL = "transfer_email"
    TRANSFER_MEETINGS = "transfer_meetings"
    TRANSFER_RECORDINGS = "transfer_recordings"
    TRANSFER_WEBINARS = "transfer_webinars"
    

class Output:
    SUCCESS = "success"
    

class DeleteUserInput(insightconnect_plugin_runtime.Input):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "action": {
      "type": "string",
      "title": "Action",
      "description": "Specify how to delete the user. To delete pending user, use disassocaite",
      "enum": [
        "delete",
        "disassociate"
      ],
      "order": 1
    },
    "id": {
      "type": "string",
      "title": "User ID",
      "description": "The user identifier or email address",
      "order": 2
    },
    "transfer_email": {
      "type": "string",
      "title": "Transfer Email",
      "description": "Email to transfer meetings, webinars, or recordings",
      "order": 3
    },
    "transfer_meetings": {
      "type": "boolean",
      "title": "Transfer Meetings",
      "description": "Whether to transfer meetings to defined transfer email",
      "default": false,
      "order": 4
    },
    "transfer_recordings": {
      "type": "boolean",
      "title": "Transfer Recordings",
      "description": "Whether to transfer recordings to defined transfer email",
      "default": false,
      "order": 6
    },
    "transfer_webinars": {
      "type": "boolean",
      "title": "Transfer Webinars",
      "description": "Whether to transfer webinars to defined transfer email",
      "default": false,
      "order": 5
    }
  },
  "required": [
    "action",
    "id"
  ]
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)


class DeleteUserOutput(insightconnect_plugin_runtime.Output):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "success": {
      "type": "boolean",
      "title": "Success",
      "description": "Success",
      "order": 1
    }
  },
  "required": [
    "success"
  ]
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)
