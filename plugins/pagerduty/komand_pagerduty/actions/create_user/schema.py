# GENERATED BY INSIGHT-PLUGIN - DO NOT EDIT
import insightconnect_plugin_runtime
import json


class Component:
    DESCRIPTION = "Create a User"


class Input:
    COLOR = "color"
    EMAIL = "email"
    FROM_EMAIL = "from_email"
    JOB_TITLE = "job_title"
    LICENSE = "license"
    NAME = "name"
    ROLE = "role"
    TIME_ZONE = "time_zone"
    USER_DESCRIPTION = "user_description"


class Output:
    USER = "user"


class CreateUserInput(insightconnect_plugin_runtime.Input):
    schema = json.loads(r"""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "color": {
      "type": "string",
      "title": "Color",
      "description": "The schedule color",
      "order": 6
    },
    "email": {
      "type": "string",
      "title": "Email for New Account",
      "description": "The email address for the new account to be created",
      "order": 2
    },
    "from_email": {
      "type": "string",
      "title": "Email of the Creating User",
      "description": "The email address of user that is creating the account",
      "order": 4
    },
    "job_title": {
      "type": "string",
      "title": "Job Title",
      "description": "The description of the new user",
      "order": 8
    },
    "license": {
      "type": "object",
      "title": "License",
      "description": "The license of the new user",
      "order": 9
    },
    "name": {
      "type": "string",
      "title": "Name",
      "description": "Name",
      "order": 1
    },
    "role": {
      "type": "string",
      "title": "Role",
      "description": "Role",
      "enum": [
        "admin",
        "limited_user",
        "owner",
        "read_only_user",
        "user"
      ],
      "order": 3
    },
    "time_zone": {
      "type": "string",
      "title": "Time Zone",
      "description": "Time Zone, e.g. America/Lima",
      "order": 5
    },
    "user_description": {
      "type": "string",
      "title": "Description",
      "description": "The description of the new user",
      "order": 7
    }
  },
  "required": [
    "email",
    "from_email",
    "name"
  ],
  "definitions": {}
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)


class CreateUserOutput(insightconnect_plugin_runtime.Output):
    schema = json.loads(r"""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "user": {
      "$ref": "#/definitions/user",
      "title": "User",
      "description": "User",
      "order": 1
    }
  },
  "definitions": {
    "user": {
      "type": "object",
      "title": "user",
      "properties": {
        "id": {
          "type": "string",
          "description": "ID",
          "order": 1
        },
        "self": {
          "type": "string",
          "description": "URL to view user",
          "order": 2
        },
        "name": {
          "type": "string",
          "description": "Name",
          "order": 3
        },
        "email": {
          "type": "string",
          "description": "Email",
          "order": 4
        },
        "summary": {
          "type": "string",
          "description": "Summary",
          "order": 5
        },
        "color": {
          "type": "string",
          "description": "Color",
          "order": 6
        },
        "description": {
          "type": "string",
          "description": "Description",
          "order": 7
        },
        "job_title": {
          "type": "string",
          "description": "Job Title",
          "order": 8
        },
        "avatar_url": {
          "type": "string",
          "description": "Avatar URL",
          "order": 9
        },
        "time_zone": {
          "type": "string",
          "description": "Time Zone, e.g. America/Lima",
          "order": 10
        },
        "role": {
          "type": "string",
          "description": "Role",
          "enum": [
            "admin",
            "limited_user",
            "owner",
            "read_only_user",
            "user"
          ],
          "order": 11
        }
      },
      "required": [
        "email",
        "name"
      ]
    }
  }
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)
