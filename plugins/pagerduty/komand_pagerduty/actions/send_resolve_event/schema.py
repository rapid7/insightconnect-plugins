# GENERATED BY INSIGHT-PLUGIN - DO NOT EDIT
import insightconnect_plugin_runtime
import json


class Component:
    DESCRIPTION = "Resolve an incident"


class Input:
    EMAIL = "email"
    INCIDENT_ID = "incident_id"


class Output:
    INCIDENT = "incident"


class SendResolveEventInput(insightconnect_plugin_runtime.Input):
    schema = json.loads(r"""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "email": {
      "type": "string",
      "title": "Email",
      "description": "The email address of a valid user associated with the account making the request",
      "order": 1
    },
    "incident_id": {
      "type": "string",
      "title": "Incident ID",
      "description": "The ID of the incident",
      "order": 2
    }
  },
  "required": [
    "email",
    "incident_id"
  ],
  "definitions": {}
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)


class SendResolveEventOutput(insightconnect_plugin_runtime.Output):
    schema = json.loads(r"""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "incident": {
      "$ref": "#/definitions/incident_output",
      "title": "Incident",
      "description": "The incident object that was resolved",
      "order": 1
    }
  },
  "definitions": {
    "incident_output": {
      "type": "object",
      "title": "incident_output",
      "properties": {
        "id": {
          "type": "string",
          "description": "The id of the incident",
          "order": 1
        },
        "type": {
          "type": "string",
          "description": "A string that determines the schema of the object",
          "order": 2
        },
        "summary": {
          "type": "string",
          "description": "A short-form, server-generated string that provides succinct, important information about an object suitable for primary labeling of an entity in a client. In many cases, this will be identical to name, though it is not intended to be an identifier",
          "order": 3
        },
        "self": {
          "type": "string",
          "description": "The API show URL at which the object is accessible",
          "order": 4
        },
        "html_url": {
          "type": "string",
          "description": "A URL at which the entity is uniquely displayed in the Web app",
          "order": 5
        },
        "incident_number": {
          "description": "The number of the incident. This is unique across your account.",
          "order": 6
        },
        "title": {
          "type": "string",
          "description": "A succinct description of the nature, symptoms, cause, or effect of the incident",
          "order": 7
        },
        "created_at": {
          "type": "string",
          "description": "The time the incident was first triggered",
          "order": 8
        },
        "updated_at": {
          "type": "string",
          "description": "The time the incident was last modified",
          "order": 9
        },
        "status": {
          "type": "string",
          "description": "The current status of the incident",
          "order": 10
        },
        "incident_key": {
          "type": "string",
          "description": "The incident's de-duplication key",
          "order": 11
        },
        "service": {
          "type": "object",
          "description": "The service the incident is on. If the include[]=services query parameter is provided, the full service definition will be returned",
          "order": 12
        },
        "assignments": {
          "description": "Which accounts the incident will be assigned to",
          "order": 13
        },
        "assigned_via": {
          "type": "string",
          "description": "How the current incident assignments were decided. Note that direct_assignment incidents will not escalate up the attached escalation_policy",
          "order": 14
        },
        "last_status_change_at": {
          "type": "string",
          "description": "The time the status of the incident last changed. If the incident is not currently acknowledged or resolved, this will be the incident's updated_at",
          "order": 15
        },
        "first_trigger_log_entry": {
          "type": "object",
          "description": "The first log entry on the incident. The log entry will be of type TriggerLogEntry and will represent information about how the incident was triggered. If the include[]=first_trigger_log_entries query parameter is provided, the full log entry definition will be returned",
          "order": 16
        },
        "alert_counts": {
          "type": "object",
          "description": "The counts of alerts grouped into this incident",
          "order": 17
        },
        "is_mergeable": {
          "type": "boolean",
          "description": "Whether the incident is mergeable. Only incidents that have alerts, or that are manually created can be merged",
          "order": 18
        },
        "escalation_policy": {
          "type": "object",
          "description": "The escalation policy attached to the service that the incident is on. If the include[]=escalation_policies query parameter is provided, the full escalation policy definition will be returned",
          "order": 19
        },
        "teams": {
          "description": "Teams that the alert is assigned to",
          "order": 20
        },
        "pending_actions": {
          "description": "The list of pending_actions on the incident. A pending_action object contains a type of action which can be escalate, unacknowledge, resolve or urgency_change. A pending_action object contains at, the time at which the action will take place. An urgency_change pending_action will contain to, the urgency that the incident will change to",
          "order": 21
        },
        "acknowledgements": {
          "description": "List of all acknowledgements for this incident. This list will be empty if the Incident.status is resolved or triggered. If the include[]=acknowledgers query parameter is provided, the full user or service definitions will be returned for each acknowledgement entry",
          "order": 22
        },
        "last_status_change_by": {
          "type": "object",
          "description": "The agent (user, service or integration) that created or modified the Incident Log Entry",
          "order": 23
        },
        "priority": {
          "type": "object",
          "description": "The priority of the object",
          "order": 24
        },
        "conference_bridge": {
          "type": "object",
          "description": "The conference bridge information attached to the incident. Only returned if the include[]=conference_bridge query parameter is provided",
          "order": 25
        },
        "urgency": {
          "type": "string",
          "description": "The current urgency of the incident",
          "order": 26
        }
      }
    }
  }
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)
