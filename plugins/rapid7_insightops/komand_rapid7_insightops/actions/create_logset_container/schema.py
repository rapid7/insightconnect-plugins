# GENERATED BY KOMAND SDK - DO NOT EDIT
import komand
import json


class Component:
    DESCRIPTION = "Creates a container within the specified logset for InsightOps service"


class Input:
    ID = "id"
    LE_AGENT_FILENAME = "le_agent_filename"
    LE_AGENT_FOLLOW = "le_agent_follow"
    SOURCE_TYPE = "source_type"
    STRUCTURES = "structures"
    TITLE = "title"
    TOKEN_SEED = "token_seed"
    

class Output:
    LOG = "log"
    

class CreateLogsetContainerInput(komand.Input):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "id": {
      "type": "string",
      "title": "ID",
      "description": "ID points to the Logset ID to which the container will be created e.g. c17cef2e-01c1-404e-b42b-ea5088c2f713",
      "order": 7
    },
    "le_agent_filename": {
      "type": "string",
      "title": "LE Agent Filename",
      "description": "Log entry agent filename",
      "order": 3
    },
    "le_agent_follow": {
      "type": "string",
      "title": "LE Agent Follow",
      "description": "Log entry agent follow",
      "order": 4
    },
    "source_type": {
      "type": "string",
      "title": "Source Type",
      "description": "A unique Identifier for the log",
      "default": "token",
      "order": 5
    },
    "structures": {
      "type": "array",
      "title": "Structure",
      "description": "The structure of the log. e.g. Syslog, JSON, Apache and Nginx",
      "items": {
        "type": "string"
      },
      "order": 2
    },
    "title": {
      "type": "string",
      "title": "Name",
      "description": "Name of the container",
      "order": 1
    },
    "token_seed": {
      "type": "string",
      "title": "Token Seed",
      "description": "Token Seed is used to generate a token that can be shared. If a random UUID needs to be created leave this blank",
      "order": 6
    }
  }
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)


class CreateLogsetContainerOutput(komand.Output):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "log": {
      "$ref": "#/definitions/logset_container",
      "title": "Log",
      "description": "Returned data from created container",
      "order": 1
    }
  },
  "definitions": {
    "logset_container": {
      "type": "object",
      "title": "logset_container",
      "properties": {
        "id": {
          "type": "string",
          "title": "ID",
          "order": 1
        },
        "logsets_info": {
          "$ref": "#/definitions/post_logsets_info",
          "title": "Logsets Info",
          "order": 6
        },
        "name": {
          "type": "string",
          "title": "Name",
          "order": 2
        },
        "structures": {
          "type": "array",
          "title": "Structures",
          "items": {
            "type": "string"
          },
          "order": 4
        },
        "tokens": {
          "type": "array",
          "title": "Token",
          "items": {
            "type": "string"
          },
          "order": 3
        },
        "user_data": {
          "$ref": "#/definitions/user_data",
          "title": "User Data",
          "order": 5
        }
      },
      "definitions": {
        "logsets_info_id": {
          "type": "object",
          "title": "logsets_info_id",
          "properties": {
            "id": {
              "type": "string",
              "title": "ID",
              "order": 1
            }
          }
        },
        "post_logsets_info": {
          "type": "object",
          "title": "post_logsets_info",
          "properties": {
            "logsets_info_ids": {
              "type": "array",
              "title": "Logsets Info IDs",
              "items": {
                "$ref": "#/definitions/logsets_info_id"
              },
              "order": 1
            }
          },
          "definitions": {
            "logsets_info_id": {
              "type": "object",
              "title": "logsets_info_id",
              "properties": {
                "id": {
                  "type": "string",
                  "title": "ID",
                  "order": 1
                }
              }
            }
          }
        },
        "user_data": {
          "type": "object",
          "title": "user_data",
          "properties": {
            "le_agent_filename": {
              "type": "string",
              "title": "LE Agent Filename",
              "description": "Logentry Agent Filename",
              "order": 1
            },
            "le_agent_follow": {
              "type": "string",
              "title": "LE Agent Follow",
              "description": "Logentry Agent Follow",
              "order": 2
            }
          }
        }
      }
    },
    "logsets_info_id": {
      "type": "object",
      "title": "logsets_info_id",
      "properties": {
        "id": {
          "type": "string",
          "title": "ID",
          "order": 1
        }
      }
    },
    "post_logsets_info": {
      "type": "object",
      "title": "post_logsets_info",
      "properties": {
        "logsets_info_ids": {
          "type": "array",
          "title": "Logsets Info IDs",
          "items": {
            "$ref": "#/definitions/logsets_info_id"
          },
          "order": 1
        }
      },
      "definitions": {
        "logsets_info_id": {
          "type": "object",
          "title": "logsets_info_id",
          "properties": {
            "id": {
              "type": "string",
              "title": "ID",
              "order": 1
            }
          }
        }
      }
    },
    "user_data": {
      "type": "object",
      "title": "user_data",
      "properties": {
        "le_agent_filename": {
          "type": "string",
          "title": "LE Agent Filename",
          "description": "Logentry Agent Filename",
          "order": 1
        },
        "le_agent_follow": {
          "type": "string",
          "title": "LE Agent Follow",
          "description": "Logentry Agent Follow",
          "order": 2
        }
      }
    }
  }
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)
