# GENERATED BY KOMAND SDK - DO NOT EDIT
import komand
import json


class Component:
    DESCRIPTION = "List of analysis jobs"


class Input:
    ANALYZERFILTER = "analyzerFilter"
    DATAFILTER = "dataFilter"
    DATATYPEFILTER = "dataTypeFilter"
    LIMIT = "limit"
    START = "start"
    

class Output:
    LIST = "list"
    

class GetJobsInput(komand.Input):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "analyzerFilter": {
      "type": "string",
      "title": "Analyzer Filter",
      "description": "Analyzer's ID",
      "order": 3
    },
    "dataFilter": {
      "type": "string",
      "title": "Data Filter",
      "description": "A string representing a part of an observable value. Could be an IP or part of an IP, a domain, url and so on",
      "order": 2
    },
    "dataTypeFilter": {
      "type": "string",
      "title": "Type Filter",
      "description": "Data type filter e.g. ip, domain, hash, etc",
      "order": 1
    },
    "limit": {
      "type": "integer",
      "title": "Limit",
      "description": "A number representing a page size",
      "default": 10,
      "order": 5
    },
    "start": {
      "type": "integer",
      "title": "Start",
      "description": "A number representing the index of the page start",
      "default": 0,
      "order": 4
    }
  }
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)


class GetJobsOutput(komand.Output):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "list": {
      "type": "array",
      "title": "Jobs",
      "description": "List of jobs",
      "items": {
        "$ref": "#/definitions/job"
      },
      "order": 1
    }
  },
  "required": [
    "list"
  ],
  "definitions": {
    "artifact": {
      "type": "object",
      "title": "artifact",
      "properties": {
        "attributes": {
          "$ref": "#/definitions/attributes",
          "title": "Attributes",
          "description": "Attributes",
          "order": 1
        },
        "data": {
          "type": "string",
          "title": "Data",
          "order": 2
        }
      },
      "definitions": {
        "attributes": {
          "type": "object",
          "title": "attributes",
          "properties": {
            "dataType": {
              "type": "string",
              "title": "Data Type",
              "description": "Data type e.g. domain, ip, file",
              "order": 1
            },
            "tlp": {
              "type": "integer",
              "title": "TLP",
              "description": "Traffic Light Protocol level e.g. 1",
              "order": 2
            }
          }
        }
      }
    },
    "attributes": {
      "type": "object",
      "title": "attributes",
      "properties": {
        "dataType": {
          "type": "string",
          "title": "Data Type",
          "description": "Data type e.g. domain, ip, file",
          "order": 1
        },
        "tlp": {
          "type": "integer",
          "title": "TLP",
          "description": "Traffic Light Protocol level e.g. 1",
          "order": 2
        }
      }
    },
    "job": {
      "type": "object",
      "title": "job",
      "properties": {
        "analyzerId": {
          "type": "string",
          "title": "AnalyzerId",
          "description": "The analyzer's ID",
          "order": 5
        },
        "artifact": {
          "$ref": "#/definitions/artifact",
          "title": "Artifact",
          "description": "The observable details",
          "order": 4
        },
        "date": {
          "type": "integer",
          "title": "Date",
          "description": "A timestamp which represents the job's start date",
          "order": 2
        },
        "id": {
          "type": "string",
          "title": "ID",
          "description": "The job's ID",
          "order": 3
        },
        "status": {
          "type": "string",
          "title": "Status",
          "description": "The job's status: Success, InProgress or Failure",
          "order": 1
        }
      },
      "required": [
        "analyzerId",
        "artifact",
        "date",
        "id",
        "status"
      ],
      "definitions": {
        "artifact": {
          "type": "object",
          "title": "artifact",
          "properties": {
            "attributes": {
              "$ref": "#/definitions/attributes",
              "title": "Attributes",
              "description": "Attributes",
              "order": 1
            },
            "data": {
              "type": "string",
              "title": "Data",
              "order": 2
            }
          },
          "definitions": {
            "attributes": {
              "type": "object",
              "title": "attributes",
              "properties": {
                "dataType": {
                  "type": "string",
                  "title": "Data Type",
                  "description": "Data type e.g. domain, ip, file",
                  "order": 1
                },
                "tlp": {
                  "type": "integer",
                  "title": "TLP",
                  "description": "Traffic Light Protocol level e.g. 1",
                  "order": 2
                }
              }
            }
          }
        },
        "attributes": {
          "type": "object",
          "title": "attributes",
          "properties": {
            "dataType": {
              "type": "string",
              "title": "Data Type",
              "description": "Data type e.g. domain, ip, file",
              "order": 1
            },
            "tlp": {
              "type": "integer",
              "title": "TLP",
              "description": "Traffic Light Protocol level e.g. 1",
              "order": 2
            }
          }
        }
      }
    }
  }
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)
