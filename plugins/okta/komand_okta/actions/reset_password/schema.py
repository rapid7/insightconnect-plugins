# GENERATED BY INSIGHT-PLUGIN - DO NOT EDIT
import insightconnect_plugin_runtime
import json


class Component:
    DESCRIPTION = "This action resets the password for an Okta user using a one-time token (OTT), transitions the user status to RECOVERY, and optionally clears all sessions except the one initiating the request"


class Input:
    REVOKESESSIONS = "revokeSessions"
    SENDEMAIL = "sendEmail"
    USERID = "userId"


class Output:
    RESETPASSWORDURL = "resetPasswordUrl"
    SUCCESS = "success"


class ResetPasswordInput(insightconnect_plugin_runtime.Input):
    schema = json.loads(
        r"""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "revokeSessions": {
      "type": "boolean",
      "title": "Revoke Sessions",
      "description": "If set to true, revokes all of the user's existing sessions except for the current one",
      "default": false,
      "order": 3
    },
    "sendEmail": {
      "type": "boolean",
      "title": "Send Email",
      "description": "If set to true, sends an email to the user with the OTT and instructions to reset their password",
      "default": false,
      "order": 2
    },
    "userId": {
      "type": "string",
      "title": "Okta User ID",
      "description": "User ID whose password will be reset",
      "order": 1
    }
  },
  "required": [
    "userId"
  ],
  "definitions": {}
}
    """
    )

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)


class ResetPasswordOutput(insightconnect_plugin_runtime.Output):
    schema = json.loads(
        r"""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "resetPasswordUrl": {
      "type": "string",
      "title": "Reset Password URL",
      "description": "The URL containing the one-time token (OTT) for password reset, if sendEmail is false",
      "order": 2
    },
    "success": {
      "type": "boolean",
      "title": "Success",
      "description": "Whether the reset was successful",
      "order": 1
    }
  },
  "required": [
    "success"
  ],
  "definitions": {}
}
    """
    )

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)
