# GENERATED BY KOMAND SDK - DO NOT EDIT
import komand
import json


class Input:
    API_KEY = "api_key"
    HOST = "host"
    PORT = "port"
    PROTOCOL = "protocol"
    PROXY = "proxy"
    VERIFY = "verify"
    

class ConnectionSchema(komand.Input):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "api_key": {
      "$ref": "#/definitions/credential_secret_key",
      "title": "API Key",
      "description": "API key assigned to the user",
      "order": 6
    },
    "host": {
      "type": "string",
      "title": "Host",
      "description": "Cortex host e.g. cortex.company.com or 10.3.4.50",
      "order": 1
    },
    "port": {
      "type": "string",
      "title": "Port",
      "description": "Cortex API port e.g. 9999",
      "default": "9999",
      "order": 2
    },
    "protocol": {
      "type": "string",
      "title": "Protocol",
      "description": "HTTP protocol",
      "enum": [
        "HTTP",
        "HTTPS"
      ],
      "order": 3
    },
    "proxy": {
      "type": "object",
      "title": "Proxy",
      "description": "An optional dictionary containing proxy data, with HTTP or HTTPS as the key, and the proxy URL as the value",
      "order": 4
    },
    "verify": {
      "type": "boolean",
      "title": "SSL Verify",
      "description": "Verify the certificate",
      "default": true,
      "order": 5
    }
  },
  "required": [
    "api_key",
    "host",
    "port",
    "protocol",
    "verify"
  ],
  "definitions": {
    "credential_secret_key": {
      "id": "credential_secret_key",
      "type": "object",
      "title": "Credential: Secret Key",
      "description": "A shared secret key",
      "properties": {
        "secretKey": {
          "type": "string",
          "title": "Secret Key",
          "displayType": "password",
          "description": "The shared secret key",
          "format": "password"
        }
      },
      "required": [
        "secretKey"
      ]
    }
  }
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)
