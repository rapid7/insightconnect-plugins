# GENERATED BY KOMAND SDK - DO NOT EDIT
import komand
import json


class Component:
    DESCRIPTION = "Run analyzers on an observable"


class Input:
    ANALYZER_ID = "analyzer_id"
    ATTRIBUTES = "attributes"
    OBSERVABLE = "observable"
    

class Output:
    JOB = "job"
    

class RunAnalyzerInput(komand.Input):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "analyzer_id": {
      "type": "string",
      "title": "Analyzer ID",
      "description": "Analyzer ID e.g. Hipposcore_1_0",
      "order": 1
    },
    "attributes": {
      "$ref": "#/definitions/attributes",
      "title": "Attributes",
      "description": "Attributes",
      "order": 3
    },
    "observable": {
      "type": "string",
      "title": "Observable",
      "description": "A string representing an observable value. This could be an IP address, a domain, URL, or other indicator",
      "order": 2
    }
  },
  "required": [
    "analyzer_id",
    "attributes",
    "observable"
  ],
  "definitions": {
    "attributes": {
      "type": "object",
      "title": "attributes",
      "properties": {
        "dataType": {
          "type": "string",
          "title": "Data Type",
          "description": "Data type e.g. domain, ip, file",
          "order": 1
        },
        "tlp": {
          "type": "integer",
          "title": "TLP",
          "description": "Traffic Light Protocol level e.g. 1",
          "order": 2
        }
      }
    }
  }
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)


class RunAnalyzerOutput(komand.Output):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "job": {
      "$ref": "#/definitions/job",
      "title": "Job",
      "description": "Result of analyzer run",
      "order": 1
    }
  },
  "required": [
    "job"
  ],
  "definitions": {
    "artifact": {
      "type": "object",
      "title": "artifact",
      "properties": {
        "data": {
          "type": "string",
          "title": "Data",
          "description": "Artifact value",
          "order": 2
        },
        "dataType": {
          "type": "string",
          "title": "Data Type",
          "description": "Artifact data type",
          "order": 1
        }
      }
    },
    "job": {
      "type": "object",
      "title": "job",
      "properties": {
        "analyzerId": {
          "type": "string",
          "title": "AnalyzerId",
          "description": "The analyzer's ID",
          "order": 5
        },
        "artifacts": {
          "type": "array",
          "title": "Artifacts",
          "description": "The observable details",
          "items": {
            "$ref": "#/definitions/artifact"
          },
          "order": 4
        },
        "date": {
          "type": "integer",
          "title": "Date",
          "description": "A timestamp which represents the job's start date",
          "order": 2
        },
        "id": {
          "type": "string",
          "title": "ID",
          "description": "The job's ID",
          "order": 3
        },
        "status": {
          "type": "string",
          "title": "Status",
          "description": "The job's status: Success, InProgress or Failure",
          "order": 1
        }
      },
      "required": [
        "analyzerId",
        "artifacts",
        "date",
        "id",
        "status"
      ],
      "definitions": {
        "artifact": {
          "type": "object",
          "title": "artifact",
          "properties": {
            "data": {
              "type": "string",
              "title": "Data",
              "description": "Artifact value",
              "order": 2
            },
            "dataType": {
              "type": "string",
              "title": "Data Type",
              "description": "Artifact data type",
              "order": 1
            }
          }
        }
      }
    }
  }
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)
