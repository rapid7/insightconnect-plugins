# GENERATED BY INSIGHT-PLUGIN - DO NOT EDIT
import insightconnect_plugin_runtime
import json


class Input:
    CERTIFICATE = "certificate"
    CERTIFICATE_PASSPHRASE = "certificate_passphrase"
    DOMAIN = "domain"
    HOST_INPUT_PORT = "host_input_port"
    PORT = "port"
    SERVER = "server"
    SSL_VERIFY = "ssl_verify"
    USERNAME_AND_PASSWORD = "username_and_password"


class ConnectionSchema(insightconnect_plugin_runtime.Input):
    schema = json.loads(r"""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "certificate": {
      "type": "string",
      "format": "bytes",
      "displayType": "bytes",
      "title": "Certificate",
      "description": "Base64-encoded certificate in PKCS12 format to authenticate with the host input API",
      "order": 7
    },
    "certificate_passphrase": {
      "$ref": "#/definitions/credential_secret_key",
      "title": "Certificate Passphrase",
      "description": "The passphrase to access the certificate",
      "order": 8
    },
    "domain": {
      "type": "string",
      "title": "Domain",
      "description": "Cisco FirePower Management Center Domain",
      "default": "Global",
      "order": 6
    },
    "host_input_port": {
      "type": "integer",
      "title": "Host Input Port",
      "description": "The port number for the provided host used in the Host Input API calls",
      "default": 8307,
      "order": 5
    },
    "port": {
      "type": "integer",
      "title": "Port",
      "description": "The port number for provided host",
      "default": 443,
      "order": 4
    },
    "server": {
      "type": "string",
      "title": "Server Address",
      "description": "Enter the address for the server",
      "order": 1
    },
    "ssl_verify": {
      "type": "boolean",
      "title": "TLS / SSL Verify",
      "description": "Validate TLS / SSL certificate",
      "default": true,
      "order": 3
    },
    "username_and_password": {
      "$ref": "#/definitions/credential_username_password",
      "title": "Username and Password",
      "description": "Cisco username and password",
      "order": 2
    }
  },
  "required": [
    "certificate",
    "certificate_passphrase",
    "username_and_password"
  ],
  "definitions": {
    "credential_username_password": {
      "id": "credential_username_password",
      "title": "Credential: Username and Password",
      "description": "A username and password combination",
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "title": "Username",
          "description": "The username to log in with",
          "order": 1
        },
        "password": {
          "type": "string",
          "title": "Password",
          "description": "The password",
          "format": "password",
          "displayType": "password",
          "order": 2
        }
      },
      "required": [
        "username",
        "password"
      ]
    },
    "credential_secret_key": {
      "id": "credential_secret_key",
      "type": "object",
      "title": "Credential: Secret Key",
      "description": "A shared secret key",
      "required": [
        "secretKey"
      ],
      "properties": {
        "secretKey": {
          "type": "string",
          "title": "Secret Key",
          "description": "The shared secret key",
          "format": "password",
          "displayType": "password"
        }
      }
    }
  }
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)
