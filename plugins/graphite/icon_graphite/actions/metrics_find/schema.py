# GENERATED BY KOMAND SDK - DO NOT EDIT
import komand
import json


class Component:
    DESCRIPTION = "Find metrics under a given path"


class Input:
    FROM = "from"
    QUERY = "query"
    UNTIL = "until"
    WILDCARDS = "wildcards"
    

class Output:
    METRICS = "metrics"
    

class MetricsFindInput(komand.Input):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "from": {
      "type": "string",
      "title": "From",
      "displayType": "date",
      "description": "Beginning of required range",
      "format": "date-time",
      "order": 3
    },
    "query": {
      "type": "string",
      "title": "Query",
      "description": "Search Query",
      "order": 1
    },
    "until": {
      "type": "string",
      "title": "Until",
      "displayType": "date",
      "description": "End of required range",
      "format": "date-time",
      "order": 4
    },
    "wildcards": {
      "type": "boolean",
      "title": "Wildcards",
      "description": "Use wildcard result",
      "default": false,
      "order": 2
    }
  },
  "required": [
    "query"
  ]
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)


class MetricsFindOutput(komand.Output):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "metrics": {
      "type": "array",
      "title": "Metrics",
      "description": "List of metrics",
      "items": {
        "$ref": "#/definitions/metric"
      },
      "order": 1
    }
  },
  "definitions": {
    "metric": {
      "type": "object",
      "title": "metric",
      "properties": {
        "allow_children": {
          "type": "boolean",
          "title": "Allow Children",
          "order": 5
        },
        "is_expandable": {
          "type": "boolean",
          "title": "Is Expandable",
          "order": 3
        },
        "is_leaf": {
          "type": "boolean",
          "title": "Is Leaf",
          "order": 4
        },
        "name": {
          "type": "string",
          "title": "Name",
          "order": 1
        },
        "path": {
          "type": "string",
          "title": "Path",
          "order": 2
        }
      }
    }
  }
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)
