# GENERATED BY KOMAND SDK - DO NOT EDIT
import komand
import json


class Component:
    DESCRIPTION = "Post an event"


class Input:
    ALERT_TYPE = "alert_type"
    DATE_HAPPENED = "date_happened"
    EVENT_TITLE = "event_title"
    HOST = "host"
    PRIORITY = "priority"
    TAGS = "tags"
    TEXT = "text"
    

class Output:
    EVENT = "event"
    

class PostEventInput(komand.Input):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "alert_type": {
      "type": "string",
      "title": "Alert Type",
      "description": "Event alert type",
      "default": "info",
      "enum": [
        "error",
        "warning",
        "info",
        "success"
      ],
      "order": 7
    },
    "date_happened": {
      "type": "integer",
      "title": "Date Happened",
      "description": "POSIX timestamp of the event. Limited to events no older than 1 year, 24 days. If no date is supplied date will be now",
      "order": 3
    },
    "event_title": {
      "type": "string",
      "title": "Event",
      "description": "The event title. Limited to 100 characters",
      "order": 1
    },
    "host": {
      "type": "string",
      "title": "Host",
      "description": "Host name to associate with the event. Any tags associated with the host are also applied to this event. If not supplied will be None",
      "order": 5
    },
    "priority": {
      "type": "string",
      "title": "Priority",
      "description": "The priority of the event",
      "default": "normal",
      "enum": [
        "normal",
        "low"
      ],
      "order": 4
    },
    "tags": {
      "type": "string",
      "title": "Tags",
      "description": "A comma-separated list of tags to apply to the event",
      "order": 6
    },
    "text": {
      "type": "string",
      "title": "Text",
      "description": "The body of the event. Limited to 4000 characters",
      "order": 2
    }
  },
  "required": [
    "alert_type",
    "event_title",
    "priority",
    "text"
  ]
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)


class PostEventOutput(komand.Output):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "event": {
      "$ref": "#/definitions/event",
      "title": "Event",
      "description": "Event",
      "order": 1
    }
  },
  "definitions": {
    "event": {
      "type": "object",
      "title": "event",
      "properties": {
        "alert_type": {
          "type": "string",
          "title": "Alert Type",
          "description": "Event alert type",
          "order": 9
        },
        "date_happened": {
          "type": "integer",
          "title": "Date Happened",
          "description": "POSIX timestamp of the event",
          "order": 10
        },
        "device_name": {
          "type": "string",
          "title": "Device Name",
          "description": "The name of the device for the event",
          "order": 11
        },
        "handle": {
          "type": "string",
          "title": "Handle",
          "description": "Handle",
          "order": 4
        },
        "host": {
          "type": "string",
          "title": "Host",
          "description": "Host name to associate with the event",
          "order": 12
        },
        "id": {
          "type": "integer",
          "title": "ID",
          "description": "Event ID",
          "order": 1
        },
        "priority": {
          "type": "string",
          "title": "Priority",
          "description": "The priority of the event",
          "order": 5
        },
        "related_event_id": {
          "type": "array",
          "title": "Related Event ID",
          "description": "Event IDs of related events",
          "items": {
            "type": "string"
          },
          "order": 6
        },
        "tags": {
          "type": "array",
          "title": "Tags",
          "description": "A list of tags for the event",
          "items": {
            "type": "string"
          },
          "order": 7
        },
        "text": {
          "type": "string",
          "title": "Text",
          "description": "The body of the event",
          "order": 3
        },
        "title": {
          "type": "string",
          "title": "Title",
          "description": "Event Title",
          "order": 2
        },
        "url": {
          "type": "string",
          "title": "URL",
          "description": "URL link to event",
          "order": 8
        }
      }
    }
  }
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)
