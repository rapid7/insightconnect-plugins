# GENERATED BY KOMAND SDK - DO NOT EDIT
import insightconnect_plugin_runtime
import json


class Component:
    DESCRIPTION = "Block hosts by IP address(IPv4) using the shun command"


class Input:
    DESTINATION_IP = "destination_ip"
    DESTINATION_PORT = "destination_port"
    PROTOCOL = "protocol"
    SHUN = "shun"
    SOURCE_IP = "source_ip"
    SOURCE_PORT = "source_port"
    

class Output:
    SUCCESS = "success"
    

class BlockHostInput(insightconnect_plugin_runtime.Input):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "destination_ip": {
      "type": "string",
      "title": "Destination IP",
      "description": "Destination IP address",
      "order": 3
    },
    "destination_port": {
      "type": "integer",
      "title": "Destination Port",
      "description": "Destination port",
      "order": 5
    },
    "protocol": {
      "type": "string",
      "title": "Protocol",
      "description": "IP protocol, for example TCP or UDP",
      "order": 6
    },
    "shun": {
      "type": "boolean",
      "title": "Shun",
      "description": "True to block a host or false to unblock a host using the shun command",
      "default": true,
      "order": 1
    },
    "source_ip": {
      "type": "string",
      "title": "Source IP",
      "description": "Source IP address you want to block or unblock",
      "order": 2
    },
    "source_port": {
      "type": "integer",
      "title": "Source Port",
      "description": "Source port",
      "order": 4
    }
  },
  "required": [
    "shun",
    "source_ip"
  ]
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)


class BlockHostOutput(insightconnect_plugin_runtime.Output):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "success": {
      "type": "boolean",
      "title": "Success",
      "description": "Whether the block or unblock action was successful",
      "order": 1
    }
  },
  "required": [
    "success"
  ]
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)
