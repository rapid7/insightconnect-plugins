# GENERATED BY INSIGHT-PLUGIN - DO NOT EDIT
import insightconnect_plugin_runtime
import json


class Input:
    AUTHENTICATION_TYPE = "authentication_type"
    CLIENTID = "clientId"
    CLIENTSECRET = "clientSecret"
    CREDENTIALS = "credentials"
    TENANTID = "tenantId"


class ConnectionSchema(insightconnect_plugin_runtime.Input):
    schema = json.loads(r"""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "authentication_type": {
      "type": "string",
      "title": "Authentication Type",
      "description": "Type of authentication flow",
      "default": "Username-Password",
      "enum": [
        "Username-Password",
        "Client-Credentials"
      ],
      "order": 1
    },
    "clientId": {
      "type": "string",
      "title": "Client ID",
      "description": "Client ID, also called Application ID",
      "order": 3
    },
    "clientSecret": {
      "$ref": "#/definitions/credential_secret_key",
      "title": "Client Secret",
      "description": "Client secret key",
      "order": 4
    },
    "credentials": {
      "$ref": "#/definitions/credential_username_password",
      "title": "Credentials",
      "description": "E-mail address and password",
      "order": 2
    },
    "tenantId": {
      "type": "string",
      "title": "Tenant ID",
      "description": "Tenant ID can be found in Active Directory",
      "order": 5
    }
  },
  "required": [
    "clientId",
    "clientSecret",
    "tenantId"
  ],
  "definitions": {
    "credential_username_password": {
      "id": "credential_username_password",
      "title": "Credential: Username and Password",
      "description": "A username and password combination",
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "title": "Username",
          "description": "The username to log in with",
          "order": 1
        },
        "password": {
          "type": "string",
          "title": "Password",
          "description": "The password",
          "format": "password",
          "displayType": "password",
          "order": 2
        }
      },
      "required": [
        "username",
        "password"
      ]
    },
    "credential_secret_key": {
      "id": "credential_secret_key",
      "type": "object",
      "title": "Credential: Secret Key",
      "description": "A shared secret key",
      "required": [
        "secretKey"
      ],
      "properties": {
        "secretKey": {
          "type": "string",
          "title": "Secret Key",
          "description": "The shared secret key",
          "format": "password",
          "displayType": "password"
        }
      }
    }
  }
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)
