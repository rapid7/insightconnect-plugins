# GENERATED BY KOMAND SDK - DO NOT EDIT
import insightconnect_plugin_runtime
import json


class Component:
    DESCRIPTION = "Return a filtered list of your organization's event logs. If no filters are provided, it will return the last 30 days of event for the organization"


class Input:
    ACTINGUSERID = "actingUserId"
    END = "end"
    ITEMID = "itemId"
    START = "start"
    

class Output:
    EVENTS = "events"
    

class ListEventsInput(insightconnect_plugin_runtime.Input):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "actingUserId": {
      "type": "string",
      "title": "Acting User ID",
      "description": "The unique identifier of the user that performed the event",
      "order": 3
    },
    "end": {
      "type": "string",
      "title": "End Date",
      "displayType": "date",
      "description": "The end date. Must be greater than the start date",
      "format": "date-time",
      "order": 2
    },
    "itemId": {
      "type": "string",
      "title": "Item ID",
      "description": "The unique identifier of the related item that the event describes",
      "order": 4
    },
    "start": {
      "type": "string",
      "title": "Start Date",
      "displayType": "date",
      "description": "The start date. Must be less than the end date",
      "format": "date-time",
      "order": 1
    }
  }
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)


class ListEventsOutput(insightconnect_plugin_runtime.Output):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "events": {
      "type": "array",
      "title": "Events",
      "description": "The filtered list of your organization's event logs",
      "items": {
        "$ref": "#/definitions/event"
      },
      "order": 1
    }
  },
  "definitions": {
    "event": {
      "type": "object",
      "title": "event",
      "properties": {
        "actingUserId": {
          "type": "string",
          "title": "Acting User ID",
          "description": "The unique identifier of the user that performed the event",
          "order": 8
        },
        "collectionId": {
          "type": "string",
          "title": "Collection ID",
          "description": "The unique identifier of the related collection that the event describes",
          "order": 4
        },
        "date": {
          "type": "string",
          "title": "Date",
          "description": "The timestamp when the event occurred",
          "order": 9
        },
        "device": {
          "type": "integer",
          "title": "Device",
          "description": "The type of the device",
          "order": 10
        },
        "groupId": {
          "type": "string",
          "title": "Group ID",
          "description": "The unique identifier of the related group that the event describes",
          "order": 5
        },
        "ipAddress": {
          "type": "string",
          "title": "IP Address",
          "description": "The IP address of the acting user",
          "order": 11
        },
        "itemId": {
          "type": "string",
          "title": "Item ID",
          "description": "The unique identifier of the related item that the event describes",
          "order": 3
        },
        "memberId": {
          "type": "string",
          "title": "Member ID",
          "description": "The unique identifier of the related member that the event describes",
          "order": 7
        },
        "object": {
          "type": "string",
          "title": "Object",
          "description": "The type of the object",
          "order": 1
        },
        "policyId": {
          "type": "string",
          "title": "Policy ID",
          "description": "The unique identifier of the related policy that the event describes",
          "order": 6
        },
        "type": {
          "type": "integer",
          "title": "Type",
          "description": "The type of the event",
          "order": 2
        }
      }
    }
  }
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)
