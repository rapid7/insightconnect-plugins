# GENERATED BY KOMAND SDK - DO NOT EDIT
import insightconnect_plugin_runtime
import json


class Component:
    DESCRIPTION = "Fetch IP Access rules of a zone. You can filter the results using several optional parameters"


class Input:
    CONFIGURATIONTARGET = "configurationTarget"
    CONFIGURATIONVALUE = "configurationValue"
    DIRECTION = "direction"
    MATCH = "match"
    MODE = "mode"
    NOTES = "notes"
    ORDER = "order"
    PAGE = "page"
    PERPAGE = "perPage"
    ZONEID = "zoneId"
    

class Output:
    ACCESSRULES = "accessRules"
    

class GetZoneAccessRulesInput(insightconnect_plugin_runtime.Input):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "configurationTarget": {
      "type": "string",
      "title": "Configuration Target",
      "description": "The target to search in existing rules",
      "default": "all",
      "enum": [
        "all",
        "IP address",
        "IP range",
        "ASN",
        "country"
      ],
      "order": 5
    },
    "configurationValue": {
      "type": "string",
      "title": "Configuration Value",
      "description": "The target value to search for in existing rules",
      "order": 6
    },
    "direction": {
      "type": "string",
      "title": "Direction",
      "description": "Direction to order results",
      "default": "desc",
      "enum": [
        "desc",
        "asc"
      ],
      "order": 10
    },
    "match": {
      "type": "string",
      "title": "Match",
      "description": "Whether to match all search requirements or at least one (any)",
      "default": "all",
      "enum": [
        "all",
        "any"
      ],
      "order": 4
    },
    "mode": {
      "type": "string",
      "title": "Mode",
      "description": "The action that was applied to a matched request",
      "default": "all",
      "enum": [
        "all",
        "block",
        "challenge",
        "whitelist",
        "JS challenge",
        "managed challenge"
      ],
      "order": 3
    },
    "notes": {
      "type": "string",
      "title": "Notes",
      "description": "The string to search for in the notes of existing IP Access rules",
      "order": 2
    },
    "order": {
      "type": "string",
      "title": "Order",
      "description": "Field to order zones by",
      "default": "mode",
      "enum": [
        "configuration target",
        "configuration value",
        "mode"
      ],
      "order": 9
    },
    "page": {
      "type": "integer",
      "title": "Page",
      "description": "Page number of paginated results",
      "order": 7
    },
    "perPage": {
      "type": "integer",
      "title": "Per Page",
      "description": "Maximum number of results per page",
      "order": 8
    },
    "zoneId": {
      "type": "string",
      "title": "Zone ID",
      "description": "The ID of the zone for which you want to list the access rules",
      "order": 1
    }
  },
  "required": [
    "zoneId"
  ]
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)


class GetZoneAccessRulesOutput(insightconnect_plugin_runtime.Output):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "accessRules": {
      "type": "array",
      "title": "Access Rules",
      "description": "List of zone access rules",
      "items": {
        "$ref": "#/definitions/accessRule"
      },
      "order": 1
    }
  },
  "definitions": {
    "accessRule": {
      "type": "object",
      "title": "accessRule",
      "properties": {
        "allowedModes": {
          "type": "array",
          "title": "Allowed Modes",
          "description": "Allowed modes",
          "items": {
            "type": "string"
          },
          "order": 4
        },
        "configuration": {
          "$ref": "#/definitions/configuration",
          "title": "Configuration",
          "description": "Configuration",
          "order": 6
        },
        "createdOn": {
          "type": "string",
          "title": "Created On",
          "description": "Created on",
          "order": 8
        },
        "id": {
          "type": "string",
          "title": "Access Rule ID",
          "description": "Identifier of the access rule",
          "order": 1
        },
        "mode": {
          "type": "string",
          "title": "Mode",
          "description": "Mode",
          "order": 5
        },
        "modifiedOn": {
          "type": "string",
          "title": "Modified On",
          "description": "Modified on",
          "order": 3
        },
        "paused": {
          "type": "boolean",
          "title": "Paused",
          "description": "Paused",
          "order": 2
        },
        "scope": {
          "$ref": "#/definitions/scope",
          "title": "Scope",
          "description": "Scope",
          "order": 7
        }
      },
      "definitions": {
        "configuration": {
          "type": "object",
          "title": "configuration",
          "properties": {
            "target": {
              "type": "string",
              "title": "Target",
              "description": "Target",
              "order": 1
            },
            "value": {
              "type": "string",
              "title": "Value",
              "description": "Value",
              "order": 2
            }
          }
        },
        "scope": {
          "type": "object",
          "title": "scope",
          "properties": {
            "id": {
              "type": "string",
              "title": "ID",
              "description": "ID",
              "order": 1
            },
            "name": {
              "type": "string",
              "title": "Name",
              "description": "Name",
              "order": 2
            },
            "type": {
              "type": "string",
              "title": "Type",
              "description": "Type",
              "order": 3
            }
          }
        }
      }
    },
    "configuration": {
      "type": "object",
      "title": "configuration",
      "properties": {
        "target": {
          "type": "string",
          "title": "Target",
          "description": "Target",
          "order": 1
        },
        "value": {
          "type": "string",
          "title": "Value",
          "description": "Value",
          "order": 2
        }
      }
    },
    "scope": {
      "type": "object",
      "title": "scope",
      "properties": {
        "id": {
          "type": "string",
          "title": "ID",
          "description": "ID",
          "order": 1
        },
        "name": {
          "type": "string",
          "title": "Name",
          "description": "Name",
          "order": 2
        },
        "type": {
          "type": "string",
          "title": "Type",
          "description": "Type",
          "order": 3
        }
      }
    }
  }
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)
