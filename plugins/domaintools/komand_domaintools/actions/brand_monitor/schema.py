# GENERATED BY INSIGHT-PLUGIN - DO NOT EDIT
import insightconnect_plugin_runtime
import json


class Component:
    DESCRIPTION = "Searches across all new domain registrations worldwide"


class Input:
    DAYS_BACK = "days_back"
    DOMAIN_STATUS = "domain_status"
    EXCLUDE = "exclude"
    QUERY = "query"


class Output:
    RESPONSE = "response"


class BrandMonitorInput(insightconnect_plugin_runtime.Input):
    schema = json.loads(r"""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "days_back": {
      "type": "integer",
      "description": "Use this parameter when you need to search domains registered up to six days prior to the current date",
      "enum": [
        0,
        1,
        2,
        3,
        4,
        5,
        6
      ],
      "order": 4
    },
    "domain_status": {
      "type": "string",
      "description": "Sets the scope of domain names to search",
      "enum": [
        "new",
        "on-hold"
      ],
      "order": 3
    },
    "exclude": {
      "type": "string",
      "description": "Domain names with these words will be excluded from the result set. Separate multiple terms with the pipe character",
      "order": 2
    },
    "query": {
      "type": "string",
      "description": "One or more terms separated by the pipe character",
      "order": 1
    }
  },
  "required": [
    "query"
  ],
  "definitions": {}
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)


class BrandMonitorOutput(insightconnect_plugin_runtime.Output):
    schema = json.loads(r"""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "response": {
      "$ref": "#/definitions/brand_monitor_response",
      "description": "Response",
      "order": 1
    }
  },
  "definitions": {
    "brand_monitor_response": {
      "type": "object",
      "title": "brand_monitor_response",
      "properties": {
        "alerts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/brand_monitor_alerts"
          },
          "order": 1
        },
        "date": {
          "type": "string",
          "order": 2
        },
        "exclude": {
          "type": "array",
          "items": {
            "type": "object"
          },
          "order": 3
        },
        "limit": {
          "type": "integer",
          "order": 4
        },
        "new": {
          "type": "boolean",
          "order": 5
        },
        "on-hold": {
          "type": "boolean",
          "order": 6
        },
        "query": {
          "type": "string",
          "order": 7
        },
        "total": {
          "type": "integer",
          "order": 8
        },
        "utf8": {
          "type": "boolean",
          "order": 9
        }
      }
    },
    "brand_monitor_alerts": {
      "type": "object",
      "title": "brand_monitor_alerts",
      "properties": {
        "domain": {
          "type": "string",
          "order": 1
        },
        "status": {
          "type": "string",
          "order": 2
        }
      }
    }
  }
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)
