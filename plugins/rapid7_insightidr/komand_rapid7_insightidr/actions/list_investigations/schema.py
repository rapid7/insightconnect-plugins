# GENERATED BY KOMAND SDK - DO NOT EDIT
import komand
import json


class Component:
    DESCRIPTION = "Retrieve a page of investigations matching the given request parameters"


class Input:
    END_TIME = "end_time"
    INDEX = "index"
    SIZE = "size"
    START_TIME = "start_time"
    STATUSES = "statuses"
    

class Output:
    INVESTIGATIONS = "investigations"
    METADATA = "metadata"
    

class ListInvestigationsInput(komand.Input):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "end_time": {
      "type": "string",
      "title": "End Time",
      "displayType": "date",
      "description": "An optional-ISO formatted timestamp. Only investigations whose createTime is before this date will be returned by the API. If this parameter is omitted investigations with any create_time may be returned",
      "format": "date-time",
      "order": 3
    },
    "index": {
      "type": "integer",
      "title": "Index",
      "description": "The optional zero-based index of the page to retrieve. Must be an integer greater than or equal to 0",
      "default": 0,
      "order": 5
    },
    "size": {
      "type": "integer",
      "title": "Size",
      "description": "The optional size of the page to retrieve. Must be an integer greater than 0 or less than or equal to 1000. Default value is 1000",
      "default": 1000,
      "order": 4
    },
    "start_time": {
      "type": "string",
      "title": "Start Time",
      "displayType": "date",
      "description": "An optional ISO-formatted timestamp. Only investigations whose createTime is after this date will be returned by the API. If this parameter is omitted investigations with any create_time may be returned",
      "format": "date-time",
      "order": 2
    },
    "statuses": {
      "type": "string",
      "title": "Statuses",
      "description": "An optional-comma separated set of investigation statuses. Only the investigation whose status matches one of the entries in the list will be returned. If this parameter is omitted investigations with any status may be returned",
      "default": "CLOSED",
      "enum": [
        "OPEN",
        "CLOSED",
        "EITHER"
      ],
      "order": 1
    }
  },
  "required": [
    "index",
    "size",
    "statuses"
  ]
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)


class ListInvestigationsOutput(komand.Output):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "investigations": {
      "type": "array",
      "title": "Investigations",
      "description": "A list of found investigations",
      "items": {
        "$ref": "#/definitions/investigation"
      },
      "order": 1
    },
    "metadata": {
      "$ref": "#/definitions/investigation_metadata",
      "title": "Metadata",
      "description": "The pagination parameters used to generate this page result",
      "order": 2
    }
  },
  "required": [
    "investigations",
    "metadata"
  ],
  "definitions": {
    "alerts": {
      "type": "object",
      "title": "alerts",
      "properties": {
        "first_event_time": {
          "type": "string",
          "title": "First Event Time",
          "description": "The time the first event involved in this alert occurred",
          "order": 1
        },
        "type": {
          "type": "string",
          "title": "Type",
          "description": "Alert type",
          "order": 2
        },
        "type_description": {
          "type": "string",
          "title": "Type Description",
          "description": "An optional description of this type of alert",
          "order": 3
        }
      }
    },
    "assignee": {
      "type": "object",
      "title": "assignee",
      "properties": {
        "email": {
          "type": "string",
          "title": "Email",
          "description": "The email of the assigned user",
          "order": 1
        },
        "name": {
          "type": "string",
          "title": "Name",
          "description": "The name of the assigned user",
          "order": 2
        }
      }
    },
    "investigation": {
      "type": "object",
      "title": "investigation",
      "properties": {
        "alerts": {
          "type": "array",
          "title": "Alerts",
          "description": "The alerts involved in this investigation, if any",
          "items": {
            "$ref": "#/definitions/alerts"
          },
          "order": 2
        },
        "assignee": {
          "$ref": "#/definitions/assignee",
          "title": "Assignee",
          "description": "The user assigned to this investigation, if any",
          "order": 1
        },
        "created_time": {
          "type": "string",
          "title": "Created Time",
          "description": "The time the investigation was created as an ISO formatted timestamp",
          "order": 3
        },
        "id": {
          "type": "string",
          "title": "ID",
          "description": "The ID of the investigation",
          "order": 4
        },
        "source": {
          "type": "string",
          "title": "Source",
          "description": "The source of this investigation",
          "order": 5
        },
        "status": {
          "type": "string",
          "title": "Status",
          "description": "The status of the investigation",
          "order": 6
        },
        "title": {
          "type": "string",
          "title": "Title",
          "description": "Investigation title",
          "order": 7
        }
      },
      "definitions": {
        "alerts": {
          "type": "object",
          "title": "alerts",
          "properties": {
            "first_event_time": {
              "type": "string",
              "title": "First Event Time",
              "description": "The time the first event involved in this alert occurred",
              "order": 1
            },
            "type": {
              "type": "string",
              "title": "Type",
              "description": "Alert type",
              "order": 2
            },
            "type_description": {
              "type": "string",
              "title": "Type Description",
              "description": "An optional description of this type of alert",
              "order": 3
            }
          }
        },
        "assignee": {
          "type": "object",
          "title": "assignee",
          "properties": {
            "email": {
              "type": "string",
              "title": "Email",
              "description": "The email of the assigned user",
              "order": 1
            },
            "name": {
              "type": "string",
              "title": "Name",
              "description": "The name of the assigned user",
              "order": 2
            }
          }
        }
      }
    },
    "investigation_metadata": {
      "type": "object",
      "title": "investigation_metadata",
      "properties": {
        "index": {
          "type": "integer",
          "title": "Index",
          "description": "The zero-based index of the page retrieved",
          "order": 1
        },
        "size": {
          "type": "integer",
          "title": "Size",
          "description": "The size of the page requested",
          "order": 2
        },
        "total_data": {
          "type": "integer",
          "title": "Total Data",
          "description": "The total number of results available with the given filter parameters",
          "order": 3
        },
        "total_pages": {
          "type": "integer",
          "title": "Total Pages",
          "description": "The total number of pages available with the given filter parameters",
          "order": 4
        }
      }
    }
  }
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)
