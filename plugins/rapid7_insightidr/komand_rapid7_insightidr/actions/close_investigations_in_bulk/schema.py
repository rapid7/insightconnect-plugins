# GENERATED BY INSIGHT-PLUGIN - DO NOT EDIT
import insightconnect_plugin_runtime
import json


class Component:
    DESCRIPTION = "This action is used to close all investigations that fall within a date range"


class Input:
    ALERT_TYPE = "alert_type"
    DATETIME_FROM = "datetime_from"
    DATETIME_TO = "datetime_to"
    MAX_INVESTIGATIONS_TO_CLOSE = "max_investigations_to_close"
    SOURCE = "source"


class Output:
    IDS = "ids"
    NUM_CLOSED = "num_closed"


class CloseInvestigationsInBulkInput(insightconnect_plugin_runtime.Input):
    schema = json.loads(r"""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "alert_type": {
      "type": "string",
      "title": "Alert Type",
      "description": "The category of alerts that should be closed",
      "order": 5
    },
    "datetime_from": {
      "type": "string",
      "format": "date-time",
      "displayType": "date",
      "title": "Datetime From",
      "description": "An ISO formatted timestamp, default last week",
      "order": 2
    },
    "datetime_to": {
      "type": "string",
      "format": "date-time",
      "displayType": "date",
      "title": "Datetime To",
      "description": "An ISO formatted timestamp of the ending date range, current time if left blank",
      "order": 3
    },
    "max_investigations_to_close": {
      "type": "integer",
      "title": "Max Investigations to Close",
      "description": "An optional maximum number of alerts to close with this request. If this parameter is not specified then there is no maximum. If this limit is exceeded, then an error is returned",
      "order": 4
    },
    "source": {
      "type": "string",
      "title": "Source",
      "description": "The name of an investigation source",
      "default": "MANUAL",
      "enum": [
        "ALERT",
        "MANUAL",
        "HUNT"
      ],
      "order": 1
    }
  },
  "definitions": {}
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)


class CloseInvestigationsInBulkOutput(insightconnect_plugin_runtime.Output):
    schema = json.loads(r"""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "ids": {
      "type": "array",
      "title": "IDs",
      "description": "The IDs of the investigations that were closed by the request",
      "items": {
        "type": "string"
      },
      "order": 1
    },
    "num_closed": {
      "type": "integer",
      "title": "Num Closed",
      "description": "The number of investigations closed by the request",
      "order": 2
    }
  },
  "required": [
    "ids",
    "num_closed"
  ],
  "definitions": {}
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)
