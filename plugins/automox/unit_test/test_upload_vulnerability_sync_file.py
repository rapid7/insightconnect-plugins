import sys
import os

sys.path.append(os.path.abspath('../'))

from parameterized import parameterized
from unittest.mock import patch, Mock
from unittest import TestCase
from insightconnect_plugin_runtime.exceptions import ConnectionTestException, PluginException

from util import (
    Util,
    mocked_post,
    mock_request_post_403,
    mock_request_post_404,
    mock_request_post_201,
    mock_request_post_201_invalid_json,
    ORG_ID, mock_request_post_500
)

from icon_automox.actions.upload_vulnerability_sync_file import UploadVulnerabilitySyncFile
from icon_automox.actions.upload_vulnerability_sync_file.schema import Input, Output


class TestUploadVulnerabilitySyncFile(TestCase):
    def setUp(self) -> None:
        self.action = Util.default_connector(UploadVulnerabilitySyncFile())
        self.params = {
            Input.ORG_ID: ORG_ID,
            Input.CSV_FILE: "SG9zdCxDVkUKaG9zdDEsQ1ZFLTIwMjAtMTIzNApob3N0MixDVkUtMjAyMC0xMjM0Cg==",
            Input.CSV_FILE_NAME: "test.txt",
            Input.REPORT_SOURCE: "generic",

        }

    def test_upload_vulnerability_sync_file_ok(self) -> None:
        mocked_post(mock_request_post_201)
        response = self.action.run(self.params)
        expected_response = {
            Output.ID: 1234,
            Output.STATUS: "building",
        }

        self.assertEqual(response, expected_response)

    @parameterized.expand(
        [
            (mock_request_post_403, PluginException.causes[PluginException.Preset.API_KEY]),
            (mock_request_post_404, PluginException.causes[PluginException.Preset.NOT_FOUND]),
            (mock_request_post_201_invalid_json, PluginException.causes[PluginException.Preset.INVALID_JSON]),
            (mock_request_post_500, PluginException.causes[PluginException.Preset.SERVER_ERROR]),
        ],
    )
    def test_upload_vulnerability_sync_file_exception(self, mock_request: Mock, exception: str) -> None:
        mocked_post(mock_request)
        with self.assertRaises(ConnectionTestException) as context:
            self.action.run(self.params)
        self.assertEqual(context.exception.cause, exception)
