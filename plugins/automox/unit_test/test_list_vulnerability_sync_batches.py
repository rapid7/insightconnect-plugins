import os
import sys

sys.path.append(os.path.abspath("../"))

from parameterized import parameterized
from unittest.mock import patch, Mock
from unittest import TestCase
from insightconnect_plugin_runtime.exceptions import ConnectionTestException, PluginException

from unit_test.util import (
    Util,
    mock_request_200,
    mock_request_403,
    mock_request_404,
    mocked_request,
    mock_request_200_invalid_json,
    ORG_ID,
)
from icon_automox.actions.list_vulnerability_sync_batches import ListVulnerabilitySyncBatches
from icon_automox.actions.list_vulnerability_sync_batches.schema import Input, Output


class TestListVulnerabilitySyncBatches(TestCase):
    def setUp(self) -> None:
        self.action = Util.default_connector(ListVulnerabilitySyncBatches())
        self.params = {Input.ORG_ID: ORG_ID}

    @patch("requests.Session.request", side_effect=mock_request_200)
    def test_list_vulnerability_sync_batches_ok(self, mock: Mock) -> None:
        response = self.action.run(self.params)
        expected_response = {
            Output.BATCHES: [
                {
                    "id": 1234,
                    "organization_id": 1234,
                    "status": "accepted",
                    "source": "example",
                    "created_by": {
                        "id": 123,
                        "firstname": "ExampleName",
                        "lastname": "ExampleLastName",
                        "email": "user@example.com",
                    },
                    "updated_by": {
                        "id": 123,
                        "firstname": "ExampleName",
                        "lastname": "ExampleLastName",
                        "email": "user@example.com",
                    },
                    "updated_at": "2023-03-01T12:00:00+0000",
                }
            ]
        }
        self.assertEqual(response, expected_response)

    @parameterized.expand(
        [
            (mock_request_403, PluginException.causes[PluginException.Preset.API_KEY]),
            (mock_request_403, PluginException.causes[PluginException.Preset.API_KEY]),
            (mock_request_404, PluginException.causes[PluginException.Preset.NOT_FOUND]),
            (mock_request_200_invalid_json, PluginException.causes[PluginException.Preset.INVALID_JSON]),
        ],
    )
    def test_list_vulnerability_sync_batches_exception(self, mock_request: Mock, exception: str) -> None:
        mocked_request(mock_request)
        with self.assertRaises(ConnectionTestException) as context:
            self.action.run(self.params)
        self.assertEqual(context.exception.cause, exception)
