import os
import sys

sys.path.append(os.path.abspath("../"))

from parameterized import parameterized
from unittest.mock import patch, Mock
from unittest import TestCase
from insightconnect_plugin_runtime.exceptions import ConnectionTestException, PluginException

from util import (
    Util,
    mock_request_200,
    mock_request_403,
    mock_request_404,
    mocked_request,
    mock_request_200_invalid_json,
    ORG_ID
)
from icon_automox.actions.list_vulnerability_sync_action_sets import ListVulnerabilitySyncActionSets
from icon_automox.actions.list_vulnerability_sync_action_sets.schema import Input, Output


class TestListVulnerabilitySyncActionSets(TestCase):
    def setUp(self) -> None:
        self.action = Util.default_connector(ListVulnerabilitySyncActionSets())
        self.params = {Input.ORG_ID: ORG_ID}

    @patch("requests.Session.request", side_effect=mock_request_200)
    def test_list_vulnerability_sync_action_sets_ok(self, mock: Mock) -> None:
        response = self.action.run(self.params)
        expected_response = {
            Output.ACTION_SETS: [
                {
                    "created_at": "2023-10-04T02:55:55+0000",
                    "created_by_user": {
                        "email": "user@example.com",
                        "firstname": "User",
                        "id": 1234,
                        "lastname": "Example"
                    },
                    "id": 1234,
                    "organization_id": 1234,
                    "source": {
                        "name": "example.csv",
                        "type": "generic"
                    },
                    "statistics": {
                        "issues": {
                            "unknown-host": {
                                "count": 1
                            }
                        },
                        "solutions": {
                            "patch-now": {
                                "count": 0,
                                "device_count": 0,
                                "vulnerability_count": 0
                            },
                            "patch-with-worklet": {
                                "count": 0,
                                "device_count": 0,
                                "vulnerability_count": 0
                            }
                        }
                    },
                    "status": "ready",
                    "updated_at": "2023-10-04T02:56:00+0000",
                    "updated_by_user": {
                        "email": "user@example.com",
                        "firstname": "User",
                        "id": 1234,
                        "lastname": "Example"
                    }
                }
            ]
        }
        self.assertEqual(response, expected_response)

    @parameterized.expand(
        [
            (mock_request_403, PluginException.causes[PluginException.Preset.API_KEY]),
            (mock_request_403, PluginException.causes[PluginException.Preset.API_KEY]),
            (mock_request_404, PluginException.causes[PluginException.Preset.NOT_FOUND]),
            (mock_request_200_invalid_json, PluginException.causes[PluginException.Preset.INVALID_JSON]),
        ],
    )
    def test_list_vulnerability_sync_action_sets_exception(self, mock_request: Mock, exception: str) -> None:
        mocked_request(mock_request)
        with self.assertRaises(ConnectionTestException) as context:
            self.action.run(self.params)
        self.assertEqual(context.exception.cause, exception)
