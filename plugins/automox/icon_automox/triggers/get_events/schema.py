# GENERATED BY KOMAND SDK - DO NOT EDIT
import insightconnect_plugin_runtime
import json


class Component:
    DESCRIPTION = "Retrieve Automox events to trigger workflows"


class Input:
    
    EVENT_TYPE = "event_type"
    ORG_ID = "org_id"
    

class Output:
    
    EVENT = "event"
    

class GetEventsInput(insightconnect_plugin_runtime.Input):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "event_type": {
      "type": "string",
      "title": "Event Type",
      "description": "Name of event type to be retrieved (list of event types found at https://developer.automox.com/openapi/axconsole/operation/getEvents/#!in=query\\u0026path=eventName\\u0026t=request)",
      "order": 2
    },
    "org_id": {
      "type": "integer",
      "title": "Organization ID",
      "description": "Identifier of organization to restrict results",
      "order": 1
    }
  },
  "required": [
    "event_type"
  ]
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)


class GetEventsOutput(insightconnect_plugin_runtime.Output):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "event": {
      "$ref": "#/definitions/event",
      "title": "Event",
      "description": "Event with details",
      "order": 1
    }
  },
  "required": [
    "event"
  ],
  "definitions": {
    "event": {
      "type": "object",
      "title": "event",
      "properties": {
        "create_time": {
          "type": "string",
          "title": "Creation Time",
          "description": "Creation time of event",
          "order": 11
        },
        "data": {
          "type": "object",
          "title": "Event Data",
          "description": "Data included with event",
          "order": 7
        },
        "id": {
          "type": "integer",
          "title": "Event ID",
          "description": "Identifier of event",
          "order": 1
        },
        "name": {
          "type": "string",
          "title": "Event name",
          "description": "Name of event",
          "order": 2
        },
        "organization_id": {
          "type": "integer",
          "title": "Organization ID",
          "description": "Identifier of organization",
          "order": 5
        },
        "policy_id": {
          "type": "integer",
          "title": "Policy ID",
          "description": "Identifier of policy",
          "order": 6
        },
        "policy_name": {
          "type": "string",
          "title": "Policy Name",
          "description": "Name of policy",
          "order": 9
        },
        "policy_type_name": {
          "type": "string",
          "title": "Policy Type",
          "description": "Type of policy",
          "order": 10
        },
        "server_id": {
          "type": "integer",
          "title": "Device ID",
          "description": "Identifier of device",
          "order": 4
        },
        "server_name": {
          "type": "string",
          "title": "Device Name",
          "description": "Name of device",
          "order": 8
        },
        "user_id": {
          "type": "integer",
          "title": "User ID",
          "description": "Identifier of user",
          "order": 3
        }
      },
      "required": [
        "id",
        "name"
      ]
    }
  }
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)
