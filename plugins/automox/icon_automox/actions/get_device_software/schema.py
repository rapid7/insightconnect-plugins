# GENERATED BY KOMAND SDK - DO NOT EDIT
import insightconnect_plugin_runtime
import json


class Component:
    DESCRIPTION = "Retrieve a list of software installed on a device"


class Input:
    DEVICE_ID = "device_id"
    ORG_ID = "org_id"
    

class Output:
    SOFTWARE = "software"
    

class GetDeviceSoftwareInput(insightconnect_plugin_runtime.Input):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "device_id": {
      "type": "integer",
      "title": "Device ID",
      "description": "Identifier of device",
      "order": 2
    },
    "org_id": {
      "type": "integer",
      "title": "Organization ID",
      "description": "Identifier of organization",
      "order": 1
    }
  },
  "required": [
    "device_id"
  ]
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)


class GetDeviceSoftwareOutput(insightconnect_plugin_runtime.Output):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "software": {
      "type": "array",
      "title": "Device Software",
      "description": "List of software on device",
      "items": {
        "$ref": "#/definitions/device_software"
      },
      "order": 1
    }
  },
  "definitions": {
    "device_software": {
      "type": "object",
      "title": "device_software",
      "properties": {
        "create_time": {
          "type": "string",
          "title": "Creation Time",
          "description": "The time when the software package was known",
          "order": 16
        },
        "cve_score": {
          "type": "string",
          "title": "CVE Score",
          "description": "The CVE score associated with the software package",
          "order": 12
        },
        "cves": {
          "type": "array",
          "title": "CVEs",
          "description": "List of CVEs associated to software package",
          "items": {
            "type": "string"
          },
          "order": 11
        },
        "deferred_until": {
          "type": "string",
          "title": "Deferred Until",
          "description": "The datetime for when the software package was deferred for installation",
          "order": 7
        },
        "display_name": {
          "type": "string",
          "title": "Software Display Name",
          "description": "The display name of the software package",
          "order": 9
        },
        "id": {
          "type": "integer",
          "title": "Software ID",
          "description": "The software ID",
          "order": 1
        },
        "ignored": {
          "type": "boolean",
          "title": "Ignored Status",
          "description": "Whether the software package is ignored on the device",
          "order": 6
        },
        "installed": {
          "type": "boolean",
          "title": "Installed Status",
          "description": "Whether the software package is installed on the device",
          "order": 5
        },
        "is_uninstallable": {
          "type": "boolean",
          "title": "Is Uninstallable",
          "description": "Whether the software package can be uninstalled",
          "order": 18
        },
        "name": {
          "type": "string",
          "title": "Software Name",
          "description": "The name of the software package",
          "order": 8
        },
        "organization_id": {
          "type": "integer",
          "title": "Organization ID",
          "description": "The organization identifier of the software package",
          "order": 19
        },
        "os_name": {
          "type": "string",
          "title": "Operating System Name",
          "description": "The operating system associated with the software package",
          "order": 14
        },
        "os_version": {
          "type": "string",
          "title": "Operating System Version",
          "description": "The operating system version associated with the software package",
          "order": 15
        },
        "package_id": {
          "type": "integer",
          "title": "Package ID",
          "description": "The software package ID",
          "order": 3
        },
        "requires_reboot": {
          "type": "boolean",
          "title": "Requires Reboot",
          "description": "Whether the device requires reboot for the software package to be installed",
          "order": 17
        },
        "server_id": {
          "type": "integer",
          "title": "Device ID",
          "description": "The device identifier for where the software exists",
          "order": 2
        },
        "severity": {
          "type": "string",
          "title": "Severity",
          "description": "The severity associated with the software package",
          "order": 13
        },
        "software_id": {
          "type": "integer",
          "title": "Software ID",
          "description": "The software ID",
          "order": 4
        },
        "version": {
          "type": "string",
          "title": "Version",
          "description": "The version of the software package",
          "order": 10
        }
      },
      "required": [
        "id",
        "name",
        "package_id",
        "server_id",
        "software_id"
      ]
    }
  }
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)
