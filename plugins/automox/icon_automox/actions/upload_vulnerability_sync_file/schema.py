# GENERATED BY KOMAND SDK - DO NOT EDIT
import insightconnect_plugin_runtime
import json


class Component:
    DESCRIPTION = "Upload a CSV file to vulnerability sync for processing"


class Input:
    CSV_FILE = "csv_file"
    CSV_FILE_NAME = "csv_file_name"
    ORG_ID = "org_id"
    REPORT_SOURCE = "report_source"
    

class Output:
    BATCH_ID = "batch_id"
    

class UploadVulnerabilitySyncFileInput(insightconnect_plugin_runtime.Input):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "csv_file": {
      "type": "string",
      "title": "CSV File",
      "displayType": "bytes",
      "description": "Base64 encoded CSV data from which to create the vulnerability sync batch",
      "format": "bytes",
      "order": 2
    },
    "csv_file_name": {
      "type": "string",
      "title": "CSV File Name",
      "description": "Name for CSV file uploaded and shown within Automox",
      "default": "insightconnect-uploaded-report.csv",
      "order": 3
    },
    "org_id": {
      "type": "integer",
      "title": "Organization ID",
      "description": "Identifier of organization",
      "order": 1
    },
    "report_source": {
      "type": "string",
      "title": "Report Source",
      "description": "The third-party source of the vulnerability report",
      "default": "Generic Report",
      "enum": [
        "Generic Report",
        "CrowdStrike",
        "Rapid7",
        "TenableIO",
        "Qualys"
      ],
      "order": 4
    }
  },
  "required": [
    "csv_file",
    "org_id"
  ]
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)


class UploadVulnerabilitySyncFileOutput(insightconnect_plugin_runtime.Output):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "batch_id": {
      "type": "integer",
      "title": "Vulnerability Sync Batch ID",
      "description": "Identifier of vulnerability sync batch",
      "order": 1
    }
  },
  "required": [
    "batch_id"
  ]
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)
