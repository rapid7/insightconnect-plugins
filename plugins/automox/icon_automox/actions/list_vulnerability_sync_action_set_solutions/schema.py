# GENERATED BY INSIGHT-PLUGIN - DO NOT EDIT
import insightconnect_plugin_runtime
import json


class Component:
    DESCRIPTION = "Retrieve a list of vulnerability sync remediations"


class Input:
    ACTION_SET_ID = "action_set_id"
    ORG_ID = "org_id"
    REMEDIATION_TYPE_IN = "remediation_type_in"
    SEVERITY_IN = "severity_in"
    VULNERABILITY_IN = "vulnerability_in"


class Output:
    SOLUTIONS = "solutions"


class ListVulnerabilitySyncActionSetSolutionsInput(insightconnect_plugin_runtime.Input):
    schema = json.loads(r"""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "action_set_id": {
      "type": "integer",
      "title": "Action Set ID",
      "description": "Filter by action set identifier",
      "order": 2
    },
    "org_id": {
      "type": "integer",
      "title": "Organization ID",
      "description": "Identifier of organization",
      "order": 1
    },
    "remediation_type_in": {
      "type": "array",
      "title": "Remediation Type In",
      "description": "Filter by remediation type",
      "items": {
        "type": "string"
      },
      "order": 3
    },
    "severity_in": {
      "type": "array",
      "title": "Severity In",
      "description": "Filter by severity",
      "items": {
        "type": "string"
      },
      "order": 4
    },
    "vulnerability_in": {
      "type": "array",
      "title": "Vulnerability In",
      "description": "Filter by vulnerability",
      "items": {
        "type": "string"
      },
      "order": 5
    }
  },
  "required": [
    "action_set_id",
    "org_id"
  ],
  "definitions": {}
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)


class ListVulnerabilitySyncActionSetSolutionsOutput(insightconnect_plugin_runtime.Output):
    schema = json.loads(r"""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "solutions": {
      "type": "array",
      "title": "Vulnerability Sync Solutions",
      "description": "List of vulnerability sync Solutions",
      "items": {
        "$ref": "#/definitions/solution"
      },
      "order": 1
    }
  },
  "definitions": {
    "solution": {
      "type": "object",
      "title": "solution",
      "properties": {
        "id": {
          "type": "integer",
          "title": "Solution ID",
          "description": "Identifier of solution",
          "order": 1
        },
        "solution_type": {
          "type": "string",
          "title": "Solution Type",
          "description": "Type of solution",
          "order": 2
        },
        "remediation_type": {
          "type": "string",
          "title": "Remediation Type",
          "description": "Type of remediation",
          "order": 3
        },
        "solution_details": {
          "type": "object",
          "title": "Solution Details",
          "description": "Details of the solution. This can include package information and other details depending on the solution type",
          "order": 4
        },
        "device_ids": {
          "type": "array",
          "title": "Device IDs",
          "description": "List of device identifiers associated with the solution. This is a helper field to make executing actions easier. It does not exist on the Automox API.",
          "items": {
            "type": "integer"
          },
          "order": 5
        },
        "devices": {
          "type": "array",
          "title": "Devices",
          "description": "List of devices associated with the solution",
          "items": {
            "$ref": "#/definitions/solution_device"
          },
          "order": 6
        },
        "vulnerabilities": {
          "type": "array",
          "title": "Vulnerabilities",
          "description": "List of vulnerabilities associated with the solution",
          "items": {
            "$ref": "#/definitions/solution_vulnerability"
          },
          "order": 7
        }
      },
      "required": [
        "id"
      ]
    },
    "solution_device": {
      "type": "object",
      "title": "solution_device",
      "properties": {
        "id": {
          "type": "integer",
          "title": "Device ID",
          "description": "Identifier of device",
          "order": 1
        },
        "name": {
          "type": "string",
          "title": "Device Name",
          "description": "Name of the device",
          "order": 2
        },
        "custom_name": {
          "type": "string",
          "title": "Custom Name",
          "description": "Custom name of the device",
          "order": 3
        },
        "status": {
          "type": "string",
          "title": "Device Status",
          "description": "Status of remediation for the device",
          "order": 4
        },
        "deleted": {
          "type": "boolean",
          "title": "Deleted",
          "description": "Whether the device is deleted from Automox",
          "order": 5
        },
        "ip_addrs_private": {
          "type": "array",
          "title": "Private IP Addresses",
          "description": "List of private IP addresses for the device",
          "items": {
            "type": "string"
          },
          "order": 6
        }
      },
      "required": [
        "id"
      ]
    },
    "solution_vulnerability": {
      "type": "object",
      "title": "solution_vulnerability",
      "properties": {
        "id": {
          "type": "string",
          "title": "Vulneability ID",
          "description": "Identifier of the vulnerability, typically a CVE",
          "order": 1
        },
        "title": {
          "type": "string",
          "title": "Title",
          "description": "Title of the vulnerability",
          "order": 2
        },
        "summary": {
          "type": "string",
          "title": "Summary",
          "description": "Summary of the vulnerability",
          "order": 3
        },
        "severity": {
          "type": "string",
          "title": "Severity",
          "description": "Severity of the vulnerability",
          "order": 4
        }
      },
      "required": [
        "id"
      ]
    }
  }
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)
