import insightconnect_plugin_runtime
from .schema import (
    ExecuteVulnerabilitySyncActionsInput,
    ExecuteVulnerabilitySyncActionsOutput,
    Input,
    Output,
    Component,
)

# Custom imports below
from insightconnect_plugin_runtime.exceptions import PluginException


class ExecuteVulnerabilitySyncActions(insightconnect_plugin_runtime.Action):
    def __init__(self):
        super(self.__class__, self).__init__(
            name="execute_vulnerability_sync_actions",
            description=Component.DESCRIPTION,
            input=ExecuteVulnerabilitySyncActionsInput(),
            output=ExecuteVulnerabilitySyncActionsOutput(),
        )

    def run(self, params={}):
        org_id = params.get(Input.ORG_ID)
        action_set_id = params.get(Input.ACTION_SET_ID)
        actions = params.get(Input.ACTIONS)
        if actions is None or len(actions) == 0:
            raise PluginException(
                cause="Invalid input", assistance="Actions cannot be empty."
            )
        formatted_actions = []
        for action in actions:
            fa = {
                "action": action.get("action"),
                "solutionId": action.get("solution_id"),
                "devices": action.get("device_ids"),
            }
            if action.get("action") == "patch-with-worklet":
                if action.get("worklet_id"):
                    fa["workletId"] = action.get("worklet_id")
                else:
                    raise PluginException(
                        cause="Invalid input",
                        assistance="'worklet_id' cannot be empty when the action is set to 'patch-with-worklet'",
                    )
            formatted_actions.append(fa)

        resp = self.connection.automox_api.execute_vulnerability_sync_actions(org_id, action_set_id, formatted_actions)
        return {Output.SUCCESS: resp is None}
