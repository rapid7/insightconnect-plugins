# GENERATED BY KOMAND SDK - DO NOT EDIT
import insightconnect_plugin_runtime
import json


class Component:
    DESCRIPTION = "Create a manual alert with the provided parameters"


class Input:
    DESCRIPTION = "description"
    FOUND_DATE = "found_date"
    IMAGES = "images"
    SEVERITY = "severity"
    SOURCE_DATE = "source_date"
    SOURCE_NETWORK_TYPE = "source_network_type"
    SOURCE_TYPE = "source_type"
    SOURCE_URL = "source_url"
    SUB_TYPE = "sub_type"
    TITLE = "title"
    TYPE = "type"
    

class Output:
    ALERT_ID = "alert_id"
    

class AddManualAlertInput(insightconnect_plugin_runtime.Input):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "description": {
      "type": "string",
      "title": "Description",
      "description": "Alert description",
      "order": 2
    },
    "found_date": {
      "type": "string",
      "title": "Found Date",
      "description": "Alert found date",
      "order": 9
    },
    "images": {
      "type": "array",
      "title": "Images",
      "description": "Alert images",
      "items": {
        "$ref": "#/definitions/image"
      },
      "order": 11
    },
    "severity": {
      "type": "string",
      "title": "Severity",
      "description": "Alert severity",
      "enum": [
        "High",
        "Medium",
        "Low"
      ],
      "order": 5
    },
    "source_date": {
      "type": "string",
      "title": "Source Date",
      "description": "Alert source date",
      "order": 10
    },
    "source_network_type": {
      "type": "string",
      "title": "Source Network Type",
      "description": "Source network type",
      "enum": [
        "ClearWeb",
        "DarkWeb"
      ],
      "order": 7
    },
    "source_type": {
      "type": "string",
      "title": "Source Type",
      "description": "Source type",
      "enum": [
        "Application Store",
        "Cyber Security Blog",
        "Hacking News",
        "Cyber Crime Forum",
        "Hacktivism Forum",
        "Social Media",
        "Facebook",
        "Twitter",
        "LinkedIn",
        "Google Plus",
        "VK",
        "Vimeo",
        "YouTube",
        "IRC Channel",
        "IOC Block List",
        "Credit Card Black Market",
        "Paste Site",
        "Data Leakage Website",
        "Leaked Database",
        "File Sharing Website",
        "Gray Hat Website",
        "Black Market",
        "WHOIS servers",
        "Company Website",
        "Wikileaks",
        "Pinterest",
        "Tumblr",
        "Instagram",
        "Telegram",
        "Webmail",
        "Malware Analysis",
        "Firehol",
        "VRA"
      ],
      "order": 6
    },
    "source_url": {
      "type": "string",
      "title": "Source URL",
      "description": "Source URL",
      "order": 8
    },
    "sub_type": {
      "type": "string",
      "title": "Sub Type",
      "description": "Alert sub type, needs to correlate with the selected \\"Type\\"",
      "order": 4
    },
    "title": {
      "type": "string",
      "title": "Title",
      "description": "Alert title",
      "order": 1
    },
    "type": {
      "type": "string",
      "title": "Type",
      "description": "Alert type",
      "enum": [
        "AttackIndication",
        "DataLeakage",
        "Phishing",
        "BrandSecurity",
        "ExploitableData",
        "vip"
      ],
      "order": 3
    }
  },
  "required": [
    "description",
    "severity",
    "source_network_type",
    "source_type",
    "source_url",
    "sub_type",
    "title",
    "type"
  ],
  "definitions": {
    "image": {
      "type": "object",
      "title": "image",
      "properties": {
        "data": {
          "type": "string",
          "title": "Data",
          "description": "Data",
          "order": 2
        },
        "type": {
          "type": "string",
          "title": "Type",
          "description": "Type",
          "order": 1
        }
      },
      "required": [
        "data",
        "type"
      ]
    }
  }
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)


class AddManualAlertOutput(insightconnect_plugin_runtime.Output):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "alert_id": {
      "type": "string",
      "title": "Alert ID",
      "description": "New created alert ID",
      "order": 1
    }
  },
  "required": [
    "alert_id"
  ]
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)
