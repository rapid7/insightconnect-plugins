# GENERATED BY KOMAND SDK - DO NOT EDIT
import komand
import json


class Component:
    DESCRIPTION = "Returns the syscheck files of an agent"


class Input:
    AGENT_ID = "agent_id"
    EVENT = "event"
    FILE = "file"
    FILETYPE = "filetype"
    HASH = "hash"
    LIMIT = "limit"
    MD5 = "md5"
    OFFSET = "offset"
    SEARCH = "search"
    SHA1 = "sha1"
    SORT = "sort"
    

class Output:
    ERROR = "error"
    SYSCHECK_EVENTS = "syscheck_events"
    TOTALITEMS = "totalItems"
    

class SyscheckDatabaseInput(komand.Input):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "agent_id": {
      "type": "string",
      "title": "Agent ID",
      "description": "Agent ID e.g. 003",
      "order": 1
    },
    "event": {
      "type": "string",
      "title": "Event",
      "description": "Filters files by event",
      "enum": [
        "All",
        "Added",
        "Readded",
        "Modified",
        "Deleted"
      ],
      "order": 6
    },
    "file": {
      "type": "string",
      "title": "File",
      "description": "Filters file by filename",
      "order": 7
    },
    "filetype": {
      "type": "string",
      "title": "File Type",
      "description": "Selects type of file",
      "enum": [
        "All",
        "File",
        "Registry"
      ],
      "order": 8
    },
    "hash": {
      "type": "string",
      "title": "Hash",
      "description": "Returns the files with the specified hash (MD5 or SHA1)",
      "order": 11
    },
    "limit": {
      "type": "integer",
      "title": "Limit",
      "description": "Maximum number of elements to return",
      "order": 3
    },
    "md5": {
      "type": "string",
      "title": "MD5",
      "description": "Returns the files with the specified MD5 hash",
      "order": 9
    },
    "offset": {
      "type": "integer",
      "title": "Offset",
      "description": "First element to return in the collection",
      "order": 2
    },
    "search": {
      "type": "string",
      "title": "Search",
      "description": "Looks for elements with the specified string",
      "order": 5
    },
    "sha1": {
      "type": "string",
      "title": "SHA1",
      "description": "Returns the files with the specified SHA1 hash",
      "order": 10
    },
    "sort": {
      "type": "string",
      "title": "Sort",
      "description": "Sorts the collection by a field or fields (separated by comma). Use +/- at the beginning to ascending or descending order. Allowed sort fields: group, user, file, modificationDate, scanDate, and size",
      "order": 4
    }
  },
  "required": [
    "agent_id"
  ]
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)


class SyscheckDatabaseOutput(komand.Output):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "error": {
      "type": "integer",
      "title": "Error Code",
      "description": "Error code",
      "order": 3
    },
    "syscheck_events": {
      "type": "array",
      "title": "Syscheck Events",
      "description": "Syscheck events",
      "items": {
        "$ref": "#/definitions/rootcheck_events"
      },
      "order": 2
    },
    "totalItems": {
      "type": "integer",
      "title": "Total Items",
      "description": "Total items",
      "order": 1
    }
  },
  "required": [
    "error",
    "syscheck_events",
    "totalItems"
  ],
  "definitions": {
    "rootcheck_events": {
      "type": "object",
      "title": "rootcheck_events",
      "properties": {
        "cis": {
          "type": "string",
          "title": "Cis",
          "description": "Cis",
          "order": 1
        },
        "event": {
          "type": "string",
          "title": "Event",
          "description": "Event",
          "order": 2
        },
        "oldDay": {
          "type": "string",
          "title": "Old Day",
          "description": "Old Day",
          "order": 3
        },
        "readDay": {
          "type": "string",
          "title": "Read Day",
          "description": "Read Day",
          "order": 4
        },
        "status": {
          "type": "string",
          "title": "Status",
          "description": "Status",
          "order": 5
        }
      }
    }
  }
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)
