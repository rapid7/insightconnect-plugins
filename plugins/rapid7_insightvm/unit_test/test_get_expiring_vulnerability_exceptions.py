import sys
import os

sys.path.append(os.path.abspath("../"))

from unittest import TestCase
from unittest.mock import patch
from unit_test.util import Util
from komand_rapid7_insightvm.actions.get_expiring_vulnerability_exceptions import GetExpiringVulnerabilityExceptions
from komand_rapid7_insightvm.actions.get_expiring_vulnerability_exceptions.schema import Input
from parameterized import parameterized
from freezegun import freeze_time


@patch("requests.sessions.Session.get", side_effect=Util.mocked_requests)
@freeze_time("2022-01-01T12:00:00")
class TestGetExpiringVulnerabilityExceptions(TestCase):
    @classmethod
    def setUpClass(cls) -> None:
        cls.action = Util.default_connector(GetExpiringVulnerabilityExceptions())

    @parameterized.expand(
        [
            [
                "found",
                20,
                {
                    "exceptions": [
                        {
                            "expires": "2022-01-15T12:00:00.002345Z",
                            "id": 1,
                            "links": [{"href": "https://example.com/api/3/vulnerability_exceptions/1", "rel": "self"}],
                            "scope": {
                                "links": [
                                    {
                                        "id": "linuxrpm-rhsa-2013-1060",
                                        "href": "https://example.com/api/3/vulnerabilities/linuxrpm-rhsa-2013-1060",
                                        "rel": "Vulnerability",
                                    }
                                ],
                                "type": "global",
                                "vulnerability": "linuxrpm-rhsa-2013-1060",
                            },
                            "state": "under review",
                            "submit": {
                                "comment": "Exception created with InsightConnect",
                                "date": "2022-01-01T14:40:21.758795Z",
                                "links": [{"id": 1, "href": "https://example.com/api/3/users/1", "rel": "Submitter"}],
                                "name": "admin",
                                "reason": "false positive",
                                "user": 1,
                            },
                        }
                    ],
                },
            ],
            ["not_found", 5, {"exceptions": []}],
        ]
    )
    def test_get_expiring_vulnerability_exceptions(self, mock_get, name, expires_in_less_than, expected):
        actual = self.action.run({Input.EXPIRES_IN_LESS_THAN: expires_in_less_than})
        self.assertEqual(actual, expected)
