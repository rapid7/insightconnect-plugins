import sys
import os

sys.path.append(os.path.abspath("../"))

from unittest import TestCase
from unittest.mock import patch
from unit_test.util import Util
from komand_rapid7_insightvm.actions.asset_vulnerability_solution import AssetVulnerabilitySolution
from komand_rapid7_insightvm.actions.asset_vulnerability_solution.schema import Input
from parameterized import parameterized
from insightconnect_plugin_runtime.exceptions import PluginException


@patch("aiohttp.client.ClientSession.request", side_effect=Util.mocked_async_requests)
class TestAssetVulnerabilitySolution(TestCase):
    @classmethod
    def setUpClass(cls) -> None:
        cls.action = Util.default_connector(AssetVulnerabilitySolution())

    @parameterized.expand(
        [
            [
                "found",
                9,
                ["ssl-cve-2011-3389-beast"],
                Util.read_file_to_dict("expected/asset_vulnerability_solution.json.exp"),
            ]
        ]
    )
    def test_asset_vulnerability_solution(self, mock_get, name, asset_id, vulnerability_ids, expected):
        actual = self.action.run({Input.ASSET_ID: asset_id, Input.VULNERABILITY_IDS: vulnerability_ids})
        self.assertEqual(actual, expected)

    @parameterized.expand(
        [
            [
                "not_found_software",
                10,
                ["sl-ve-211-339-beast"],
                "InsightVM returned an error message. Not Found",
                "Ensure that the requested resource exists.",
                "The requested resource does not exist.",
            ],
            [
                "not_found_asset",
                11,
                ["ssl-cve-2011-3389-beast"],
                "InsightVM returned an error message. Not Found",
                "Ensure that the requested resource exists.",
                "The resource does not exist or access is prohibited.",
            ],
        ]
    )
    def test_asset_vulnerability_solution_bad(
        self, mock_get, name, asset_id, vulnerability_ids, cause, assistance, data
    ):
        with self.assertRaises(PluginException) as error:
            self.action.run({Input.ASSET_ID: asset_id, Input.VULNERABILITY_IDS: vulnerability_ids})
        self.assertEqual(error.exception.cause, cause)
        self.assertEqual(error.exception.assistance, assistance)
        self.assertEqual(error.exception.data, data)
