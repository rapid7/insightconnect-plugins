import sys
import os

sys.path.append(os.path.abspath("../"))

from unittest import TestCase
from unittest.mock import patch
from unit_test.util import Util
from komand_rapid7_insightvm.actions.update_vulnerability_exception_expiration_date import (
    UpdateVulnerabilityExceptionExpirationDate,
)
from komand_rapid7_insightvm.actions.update_vulnerability_exception_expiration_date.schema import Input
from parameterized import parameterized
from insightconnect_plugin_runtime.exceptions import PluginException


@patch("requests.sessions.Session.put", side_effect=Util.mocked_requests)
class TestUpdateVulnerabilityExceptionExpirationDate(TestCase):
    @classmethod
    def setUpClass(cls) -> None:
        cls.action = Util.default_connector(UpdateVulnerabilityExceptionExpirationDate())

    @parameterized.expand(
        [
            ["2022-01-01", "2022-01-01", 1, {"success": True}],
            ["2022 01 01", "2022 01 01", 1, {"success": True}],
            ["1 Jan 2021", "1 Jan 2022", 1, {"success": True}],
            ["2022-01-01 00:00:00Z", "2022-01-01 00:00:00Z", 1, {"success": True}],
            ["2022-01-01T00:00:00.0Z", "2022-01-01T00:00:00.0Z", 1, {"success": True}],
            ["01/01/2022", "01/01/2022", 1, {"success": True}],
            ["01/01/2022 00:00:00", "01/01/2022 00:00:00", 1, {"success": True}],
        ]
    )
    def test_update_vulnerability_exception_expiration_date(self, mock_put, name, date, exception_id, expected):
        actual = self.action.run({Input.DATE: date, Input.ID: exception_id})
        self.assertEqual(actual, expected)

    @parameterized.expand(
        [
            [
                "not_found",
                "2022-01-10",
                0,
                "Error from the InsightVM API\n",
                "Please see the following error text for more information.\n",
                '{\n  "status": 404,\n  "message": "The requested resource does not exist.",\n  "links": [\n    {\n      "href": "https://example.com/api/3/vulnerability_exceptions/0/expires",\n      "rel": "self"\n    }\n  ]\n}',
            ]
        ]
    )
    def test_update_vulnerability_exception_expiration_date_bad(
        self, mock_put, name, date, exception_id, cause, assistance, data
    ):
        with self.assertRaises(PluginException) as e:
            self.action.run({Input.DATE: date, Input.ID: exception_id})
        self.assertEqual(e.exception.cause, cause)
        self.assertEqual(e.exception.assistance, assistance)
        self.assertEqual(e.exception.data, data)
