# GENERATED BY KOMAND SDK - DO NOT EDIT
import insightconnect_plugin_runtime
import json


class Component:
    DESCRIPTION = "List authentication sources available for InsightVM users"


class Input:
    NAME = "name"
    TYPE = "type"
    

class Output:
    AUTHENTICATION_SOURCES = "authentication_sources"
    

class GetAuthenticationSourcesInput(insightconnect_plugin_runtime.Input):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "name": {
      "type": "string",
      "title": "Name",
      "description": "Authentication source name by which to filter, accepts regular expression patterns",
      "order": 1
    },
    "type": {
      "type": "string",
      "title": "Type",
      "description": "Authentication source type by which to filter",
      "default": "",
      "enum": [
        "",
        "admin",
        "kerberos",
        "ldap",
        "normal",
        "saml"
      ],
      "order": 2
    }
  }
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)


class GetAuthenticationSourcesOutput(insightconnect_plugin_runtime.Output):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "authentication_sources": {
      "type": "array",
      "title": "Authentication Sources",
      "description": "List of authentication sources",
      "items": {
        "$ref": "#/definitions/authentication_source"
      },
      "order": 1
    }
  },
  "required": [
    "authentication_sources"
  ],
  "definitions": {
    "authentication_source": {
      "type": "object",
      "title": "authentication_source",
      "properties": {
        "external": {
          "type": "boolean",
          "title": "External",
          "description": "Whether the authentication source is external (true) or internal (false)",
          "order": 1
        },
        "id": {
          "type": "integer",
          "title": "ID",
          "description": "Authentication source identifier",
          "order": 2
        },
        "links": {
          "type": "array",
          "title": "Links",
          "description": "List of hypermedia links to corresponding or related resources",
          "items": {
            "$ref": "#/definitions/link"
          },
          "order": 3
        },
        "name": {
          "type": "string",
          "title": "Name",
          "description": "Authentication source name",
          "order": 4
        },
        "type": {
          "type": "string",
          "title": "Type",
          "description": "Authentication source type",
          "enum": [
            "normal",
            "kerberos",
            "ldap",
            "saml",
            "admin"
          ],
          "order": 5
        }
      },
      "required": [
        "external",
        "id",
        "links",
        "name",
        "type"
      ],
      "definitions": {
        "link": {
          "type": "object",
          "title": "link",
          "properties": {
            "href": {
              "type": "string",
              "title": "URL",
              "description": "A hypertext reference, which is either a URI (see RFC 3986) or URI template (see RFC 6570)",
              "order": 1
            },
            "rel": {
              "type": "string",
              "title": "Rel",
              "description": "Link relation type following RFC 5988",
              "order": 2
            }
          }
        }
      }
    },
    "link": {
      "type": "object",
      "title": "link",
      "properties": {
        "href": {
          "type": "string",
          "title": "URL",
          "description": "A hypertext reference, which is either a URI (see RFC 3986) or URI template (see RFC 6570)",
          "order": 1
        },
        "rel": {
          "type": "string",
          "title": "Rel",
          "description": "Link relation type following RFC 5988",
          "order": 2
        }
      }
    }
  }
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)
