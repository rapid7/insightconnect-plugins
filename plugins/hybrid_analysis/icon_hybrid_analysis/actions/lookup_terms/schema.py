# GENERATED BY KOMAND SDK - DO NOT EDIT
import insightconnect_plugin_runtime
import json


class Component:
    DESCRIPTION = "Search the Hybrid Analysis database"


class Input:
    COUNTRY = "country"
    DOMAIN = "domain"
    FILENAME = "filename"
    FILETYPE = "filetype"
    HOST = "host"
    PORT = "port"
    SIMILAR_TO = "similar_to"
    TAG = "tag"
    URL = "url"
    VERDICT = "verdict"
    

class Output:
    COUNT = "count"
    RESULT = "result"
    SEARCH_TERMS = "search_terms"
    

class LookupTermsInput(insightconnect_plugin_runtime.Input):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "country": {
      "type": "string",
      "title": "Country",
      "description": "Country must be specified in the ISO 3166-1 standard",
      "order": 3
    },
    "domain": {
      "type": "string",
      "title": "Domain",
      "description": "Domain which will be analyzed",
      "order": 8
    },
    "filename": {
      "type": "string",
      "title": "File Name",
      "description": "File name",
      "order": 1
    },
    "filetype": {
      "type": "string",
      "title": "File Type",
      "description": "File type",
      "order": 2
    },
    "host": {
      "type": "string",
      "title": "Host",
      "description": "Information about the host which will be analyzed",
      "order": 7
    },
    "port": {
      "type": "integer",
      "title": "Port",
      "description": "Port number which is associated with an IP address",
      "default": 8080,
      "order": 6
    },
    "similar_to": {
      "type": "string",
      "title": "Similar Samples",
      "description": "SHA256 hash of the similar file",
      "order": 10
    },
    "tag": {
      "type": "string",
      "title": "Hashtag",
      "description": "Hashtag by which the analysis will be performed",
      "order": 5
    },
    "url": {
      "type": "string",
      "title": "URL",
      "description": "URL to analyze",
      "order": 9
    },
    "verdict": {
      "type": "string",
      "title": "Verdict",
      "description": "A decision on a submitted term",
      "default": "whitelisted",
      "enum": [
        "whitelisted",
        "no verdict",
        "no specific threat",
        "suspicious",
        "malicious"
      ],
      "order": 4
    }
  }
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)


class LookupTermsOutput(insightconnect_plugin_runtime.Output):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "count": {
      "type": "integer",
      "title": "Count",
      "description": "Number of results returned",
      "order": 2
    },
    "result": {
      "type": "array",
      "title": "Results List",
      "description": "List of results",
      "items": {
        "$ref": "#/definitions/result"
      },
      "order": 3
    },
    "search_terms": {
      "type": "array",
      "title": "Search Terms",
      "description": "List of key value pairs. Where the key is the parameter specified and its value",
      "items": {
        "$ref": "#/definitions/search_term"
      },
      "order": 1
    }
  },
  "required": [
    "count",
    "search_terms"
  ],
  "definitions": {
    "result": {
      "type": "object",
      "title": "result",
      "properties": {
        "analysis_start_time": {
          "type": "string",
          "title": "Analysis Start Time",
          "description": "The time at which the analysis began",
          "order": 8
        },
        "av_detect": {
          "type": "string",
          "title": "AV detect",
          "description": "AV MultiScan Detection Percentage",
          "order": 2
        },
        "environment_description": {
          "type": "string",
          "title": "Environment Description",
          "description": "Description of the environment on which analysis was conducted",
          "order": 10
        },
        "environment_id": {
          "type": "integer",
          "title": "Environment ID",
          "description": "The environment that was used for analysis",
          "order": 7
        },
        "job_id": {
          "type": "string",
          "title": "Job ID",
          "description": "Job ID when file was submited",
          "order": 5
        },
        "sha256": {
          "type": "string",
          "title": "SHA256",
          "description": "SHA256 hash",
          "order": 6
        },
        "size": {
          "type": "integer",
          "title": "File Size",
          "description": "File size in bytes",
          "order": 11
        },
        "submit_name": {
          "type": "string",
          "title": "Submit Name",
          "description": "Submit name",
          "order": 9
        },
        "threat_score": {
          "type": "integer",
          "title": "Threat score",
          "description": "Confidence value of VxStream Sandbox in the verdict; lies between 0 and 100",
          "order": 3
        },
        "type": {
          "type": "string",
          "title": "Type",
          "description": "Type",
          "order": 12
        },
        "type_short": {
          "type": "string",
          "title": "File Extension",
          "description": "File type e.g. exe",
          "order": 13
        },
        "verdict": {
          "type": "string",
          "title": "Verdict",
          "description": "File verdict e.g. malicious",
          "order": 1
        },
        "vx_family": {
          "type": "string",
          "title": "VX Family",
          "description": "VX Family e.g. Trojan.Generic",
          "order": 4
        }
      }
    },
    "search_term": {
      "type": "object",
      "title": "search_term",
      "properties": {
        "id": {
          "type": "string",
          "title": "ID",
          "description": "Name of search term which was used",
          "order": 1
        },
        "value": {
          "type": "string",
          "title": "Value",
          "description": "Value of search term",
          "order": 2
        }
      }
    }
  }
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)
