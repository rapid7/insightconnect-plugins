# GENERATED BY KOMAND SDK - DO NOT EDIT
import insightconnect_plugin_runtime
import json


class Component:
    DESCRIPTION = "Submit file for analysis"


class Input:
    CUSTOM_CMD_LINE = "custom_cmd_line"
    DOCUMENT_PASSWORD = "document_password"
    ENVIRONMENT_ID = "environment_id"
    EXPERIMENTAL_ANTI_EVASION = "experimental_anti_evasion"
    FILE = "file"
    HYBRID_ANALYSIS = "hybrid_analysis"
    SCRIPT_LOGGING = "script_logging"
    SUBMIT_NAME = "submit_name"
    

class Output:
    ENVIRONMENT_ID = "environment_id"
    JOB_ID = "job_id"
    SHA256 = "sha256"
    SUBMISSION_ID = "submission_id"
    

class SubmitInput(insightconnect_plugin_runtime.Input):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "custom_cmd_line": {
      "type": "string",
      "title": "Custom Command Line",
      "description": "Optional command line that should be passed to the file analysis",
      "order": 4
    },
    "document_password": {
      "type": "string",
      "title": "Password",
      "description": "Optional document password that will be used to fill-in Adobe/Office password prompts",
      "order": 3
    },
    "environment_id": {
      "type": "string",
      "title": "Environment ID",
      "description": "Environment ID on which the analysis will be performed",
      "default": "Linux (Ubuntu 16.04, 64 bit)",
      "enum": [
        "Linux (Ubuntu 16.04, 64 bit)",
        "Android Static Analysis",
        "Windows 7 64 bit",
        "Windows 7 32 bit (HWP Support)",
        "Windows 7 32 bit"
      ],
      "order": 5
    },
    "experimental_anti_evasion": {
      "type": "boolean",
      "title": "Enable Experimental Anti-Evasion Techniques",
      "description": "When set to true, will set all experimental anti-evasion options of the Kernelmode Monitor",
      "default": true,
      "order": 8
    },
    "file": {
      "$ref": "#/definitions/file",
      "title": "File",
      "description": "File to be analyzed",
      "order": 1
    },
    "hybrid_analysis": {
      "type": "boolean",
      "title": "Enable Hybrid Analysis",
      "description": "When set to false, no memory dumps or memory dump analysis will take place",
      "default": true,
      "order": 7
    },
    "script_logging": {
      "type": "boolean",
      "title": "Enable Script Logging",
      "description": "When set to true, will set the in-depth script logging engine of the Kernelmode Monitor",
      "default": false,
      "order": 6
    },
    "submit_name": {
      "type": "string",
      "title": "Submit Name",
      "description": "Optional property which will be used for file type detection and analysis",
      "order": 2
    }
  },
  "required": [
    "file"
  ],
  "definitions": {
    "file": {
      "id": "file",
      "type": "object",
      "title": "File",
      "description": "File Object",
      "properties": {
        "content": {
          "type": "string",
          "title": "Content",
          "description": "File contents",
          "format": "bytes"
        },
        "filename": {
          "type": "string",
          "title": "Filename",
          "description": "Name of file"
        }
      }
    }
  }
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)


class SubmitOutput(insightconnect_plugin_runtime.Output):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "environment_id": {
      "type": "integer",
      "title": "Enviroment ID",
      "description": "The environment that was used for analysis",
      "order": 3
    },
    "job_id": {
      "type": "string",
      "title": "Job ID",
      "description": "Job ID which will be generated by server",
      "order": 1
    },
    "sha256": {
      "type": "string",
      "title": "SHA256",
      "description": "SHA256 hash for report retrieval",
      "order": 4
    },
    "submission_id": {
      "type": "string",
      "title": "Submission ID",
      "description": "Submission ID which will be generated by server",
      "order": 2
    }
  }
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)
