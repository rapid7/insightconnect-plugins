# GENERATED BY KOMAND SDK - DO NOT EDIT
import insightconnect_plugin_runtime
import json


class Component:
    DESCRIPTION = "Create an BMC Helix ITSM incident"


class Input:
    DESCRIPTION = "description"
    FIRSTNAME = "firstName"
    IMPACT = "impact"
    LASTNAME = "lastName"
    REPORTEDSOURCE = "reportedSource"
    SERVICETYPE = "serviceType"
    STATUS = "status"
    STATUSREASON = "statusReason"
    URGENCY = "urgency"
    

class Output:
    INCIDENTNUMBER = "incidentNumber"
    

class CreateIncidentInput(insightconnect_plugin_runtime.Input):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "description": {
      "type": "string",
      "title": "Description",
      "description": "Description of the incident",
      "order": 3
    },
    "firstName": {
      "type": "string",
      "title": "First Name",
      "description": "First name of the incident creator",
      "order": 1
    },
    "impact": {
      "type": "string",
      "title": "Impact",
      "description": "Incident impact",
      "enum": [
        "1-Extensive/Widespread",
        "2-Significant/Large",
        "3-Moderate/Limited",
        "4-Minor/Localized",
        ""
      ],
      "order": 4
    },
    "lastName": {
      "type": "string",
      "title": "Last Name",
      "description": "Last name of the incident creator",
      "order": 2
    },
    "reportedSource": {
      "type": "string",
      "title": "Reported Source",
      "description": "Incident reported source",
      "enum": [
        "Direct Input",
        "Email",
        "External Escalation",
        "Fax",
        "Self Service",
        "Systems Management",
        "Phone",
        "Voice Mail",
        "Walk In",
        "Web",
        "Other",
        "BMC Impact Manager Event",
        "Chat"
      ],
      "order": 8
    },
    "serviceType": {
      "type": "string",
      "title": "Service Type",
      "description": "Incident service type",
      "enum": [
        "User Service Restoration",
        "User Service Request",
        "Infrastructure Restoration",
        "Infrastructure Event",
        "Security Incident"
      ],
      "order": 9
    },
    "status": {
      "type": "string",
      "title": "Status",
      "description": "Incident status",
      "enum": [
        "New",
        "Assigned",
        "In Progress",
        "Pending",
        "Resolved",
        "Closed",
        "Cancelled",
        ""
      ],
      "order": 6
    },
    "statusReason": {
      "type": "string",
      "title": "Status Reason",
      "description": "Status reason of the incident",
      "enum": [
        "Automated Resolution Reported",
        "Client Action Required",
        "Client Hold",
        "Future Enhancement",
        "Infrastructure Change",
        "Local Site Action Required",
        "Monitoring Incident",
        "Purchase Order Approval",
        "Registration Approval",
        "Request",
        "Supplier Delivery",
        "Support Contract Hold",
        "Third Party Vendor Action Reqd",
        "Customer Follow-Up Required",
        "No Further Action Required",
        "Temporary Corrective Action",
        "Infrastructure Change Created",
        ""
      ],
      "order": 7
    },
    "urgency": {
      "type": "string",
      "title": "Urgency",
      "description": "Incident urgency",
      "enum": [
        "1-Critical",
        "2-High",
        "3-Medium",
        "4-Low",
        ""
      ],
      "order": 5
    }
  },
  "required": [
    "description",
    "firstName",
    "lastName",
    "reportedSource",
    "serviceType"
  ]
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)


class CreateIncidentOutput(insightconnect_plugin_runtime.Output):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "incidentNumber": {
      "type": "string",
      "title": "Incident Number",
      "description": "Number of newly created incident",
      "order": 1
    }
  },
  "required": [
    "incidentNumber"
  ]
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)
