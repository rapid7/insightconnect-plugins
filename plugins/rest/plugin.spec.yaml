plugin_spec_version: v2
extension: plugin
products: [insightconnect]
name: rest
title: HTTP Requests
description: The HTTP Requests plugin makes it easy to integrate with RESTful services
version: 6.0.3
vendor: rapid7
support: community
supported_versions: ["2023-10-19"]
status: []
resources:
  source_url: https://github.com/rapid7/insightconnect-plugins/tree/master/plugins/rest
  license_url: https://github.com/rapid7/insightconnect-plugins/blob/master/LICENSE
  docs_url: https://docs.rapid7.com/insightconnect/http-requests
key_features: ["Make RESTful API calls", "Quickly integrate with 3rd party API's over HTTP"]
requirements: ["A RESTFUL HTTP/HTTPS resource and supported authentication, if any"]
references: ["https://requests.readthedocs.io/en/latest/", "[InsightConnect HTTP Request Plugin Guide](https://docs.rapid7.com/insightconnect/http-requests)"]
tags:
- rest
- request
- http
- rpc
- microservices
- api
hub_tags:
  use_cases: [data_utility]
  keywords: [rest, request, http, rpc, microservices, api]
  features: []
enable_cache: true
sdk:
  type: full
  version: 5
  user: root
connection:
  base_url:
    title: Base URL
    description: Base URL e.g. https://httpbin.org
    type: string
    required: true
    example: https://httpbin.org/
  authentication_type:
    title: Authentication Type
    description: Type of authentication
    type: string
    required: false
    enum:
      - Basic Auth
      - Digest Auth
      - Bearer Token
      - Rapid7 Insight
      - OpsGenie
      - Pendo
      - Custom
      - No Authentication
    default: No Authentication
    example: Basic Auth
  secret:
    title: Secret Key
    description: Credential secret key. Provide a Bearer Token, Rapid7 Insight, OpsGenie, Pendo or using "CUSTOM_SECRET_INPUT" in the Default Headers field for Custom authentication type
    type: credential_secret_key
    required: false
    example: 9de5069c5afe602b2ea0a04b66beb2c0
  default_headers:
    title: Default Headers
    description: Custom headers to include in all requests associated with this connection. To pass a encrypted key as a header value, enter your key in the Secret Key input and set the value of the header in this field to "CUSTOM_SECRET_INPUT" instead of secret key. The plugin will replace "CUSTOM_SECRET_INPUT" with the encrypted key stored in the Secret Key input when the plugin runs.
    type: object
    required: false
    example: '{ "User-Agent": "Rapid7 InsightConnect", "Custom-Key-Header": "CUSTOM_SECRET_INPUT" }'
  ssl_verify:
    title: SSL Verify
    type: boolean
    description: Verify TLS/SSL certificate
    required: true
    default: true
    example: true
  client_certificate:
    title: Client Certificate
    description: Client certificate for mutual TLS (Certificate or Certificate/Key combination)
    type: file
    required: false
    example: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tClBJSUVHRENDqXdDZ0F3SUJBZ0lJU3F4Vjgva3ZoSWN3RFFZSktvWklodmNoQVFFTEJRQXdNVEVPTUF3R0ExVUUKQXd3RlZrUlFRMEV4RWpBUUJnTlZCQW9NQ2ZaRVVGWkpVMEZEUVRFTE1Ba0dBMVVFQmhNQ1ZWTXdIaGNOTWpJdwpPVEEzTVRReE16TTRXaGNOTWpRd09UQTJNVFF4TXpNNFdqQ0I1VEVtTUNRR0NTcUdTSWIzRFFFSkFSWVhZV1JoCmJWOWliR0ZyYkdWNVFISmhjR2xrTnk0amIyMHhOREF5QmdvSmtpYUprL0lzWkFFQkRDUTNOVFExWTJabE5pMHgKTTJRMUxUUmpNalF0WVNZMllTMDJPVFUzTWprMFpqRTJabUV4TFRBckJnTlZCQU1NSkRjMU5EVmpabVUyTFRFMwpaRFV0TkdNeU5DMWhOalpoTFRZNU5UY3lPVFJtTVRabVlURVRNQUVHQTFVRUN3d0tSR1Z3WVhKMGJXVnVkREVWCk1CTUdBMVVFQ2d3TVQzSm5ZVzVwZW1GMGFXOXVNUTB3Q3dZRFZRUUhEQVJEYVhSNU1RNHdEQVlEVlFRSURBVlQKZEdGMFpURUxNQWtHQTFVRUJoTUNWVk13Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQgpBUURVWk1LUHUxS0cra3NjUGpNZjZHSnFKdnJXM3pmajlUK1psQTBkblVQRk9lZjYvWEhWV0drV1crYkJJRkJJCkl3d0dBeFVWTStrU1N1N3VReWY3QnhSQlNxM0FLVzBiblZWZy9FaGhBd2VyYi9zT1NGbHpiOEptMDNBVE04QlgKaXRla2VBYzM4UW5jL3lwZG44MmRxYUF5TFYyTGw0QnZlWDRiYUp2a3RpVlRIUG9iZmhsYXFmTUh0M1hDVG1sNgpJVWRSVjczZ1NsTHdpY05yWHdtdXk2T3dJeEdKQm9DOVZYWE00T3oxMmY2WXJHQzlMaDNkYmRxN04yZm9qSGM5CjVQdUJoaGFRK2J6NWNBSXQvYWZQZEQrYzkyd3B4Z0JRTEVUampZazBNYlpDcGpna0tTODhRbjFjeVo1RmNJVTQKck5sTS9PSkRQZ3BLejFEa1VwWVFlL05aQWdNQkFBR2pmekI5TUF3R0ExVWRFd0VCL3dRQ01BQXdId1lEVlIwagpCQmd3Rm9BVXI5MXV0cUJMbkhtNUZnaGk1aU14RUtlQzY2RXdIUVlEVlIwbEJCWXdGQVlJS3dZQkJRVUhBd0lHCkNDc0dBUVVGQndNRU1CMEdBMVVkRGdRV0JCVDYrcXRmVjZiTWxkZlpFSEtua1NoZkUzZ3pjakFPQmdOVkhROEIKQWY4RUJBTUNCZUF3RFFZSktvWklodmNOQVFFTEJRQURnZ0VCQUJBSWhpaFpiZzMzNmhWVEZEdzVoL05TQzZVSgp3bExwUkhxb29sU3J3TTV4S1l3K3k2aVJURTdCdUZ1aktvL2ZJWm52YklHUDRiZEw5OUJ0TmRPNjh4elZnNDBICmEwZ0FLUXp1aWZUYUhyWFg3Ti9SanpRclVHMTRFdTJXMmQvaVNtQ2tzM1ExTmM1R1VGblVnYXNlYzllZ1F3UTIKNnJyM2x2NFJDVkNFektSeWltUWVNSjdLaElhK3BKck5yRHBDUFJMdTlDTkhkUTA5OUdoS2xaV2kzSC9vczZhVQpmSTIzcDFzc3dBK01nN2h3M01rS0lTcTdvOEt3c3JVaUZST2NXM0ZPMnFVNGNrMDc0MlB1SkxJUEJLMjJSakpKCnFUemhZaVlnbGczdFdlSkRmb05tbWdOMmR3b3F2dW5ta0dsQ0ZlOU5TK2hyVkxMeTcrTkdXSTJBSmZQPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t
  private_key:
    title: Private Key
    description: Private key for mutual TLS (requires Client Certificate)
    type: file
    required: false
    example: LS0tLS1CRudJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpQSUlFcFFJQkFBS0NBUUVPMUdUQ2o3dFNodnBMSEQ0ekgraGlvbUw2MXQ4MzQvVS9tWfFOSFoxRHhUbm4rdjF4CjFWaHBGbHZtd1NCUVNDTU1CZ01WRpRQcExrcnU4a01uK3djVVFVcXR3Q2x0RzUxVllQeElZUU1IUTIvN0RraFoKYzIvQ1p0TndFelBBVjRyWHBIZ0hOL0VKNFA4cVhYL05uYW1nTWkxZGk1ZUFiM2wrRzJpYjVMWWxVeHo2RzM0WgpXcW56QjdkMXdrNW91aUZIVVZlOTRFcFM4SW5EYTE4SnJzdWpzQ01SaVFhQXZWVjF6T0RzOWZYK21LeGd2UzRkCjNXM2F1emRuNkl4M1BlVDdnWVlXa1BtOCtYQUNMZjJuejNRL25QZHNLY1lBVUN4RTQ0Mkk5REcyUXFZNEpDa3YKUEVKOVhNbWVSWENGT0t6WlRQemlRejRLU3M5UTVGS1dFSHZ6R1FJREFRQUJBb0lCQVFDOWFiYVJsQTcvVFF2YQovaVY5MlRLYmlmWUYxai96emUyUU94YVBTSWI5eHF4NWk3a08rSytQUHhwRk5Wb2pXdzRIOW92QXd2Q2lYYTFEClV5UytuQXVXUnRFNVJEaUhuZ0pjWWVEeWswOHR0c29BYk1sSlIydnBZN3JaaFJlTmVzYmhhQ0dYNUNCVnRFSEcKQ1JQSC9WUmVLMUwzZ0g4TDZ4OXB0aHNCRnVlbWU5c2pmdXpaUlVMUkx4YkxZVS9hQWJoSDlxR2Z1NEwyY0RDMgozSGV1MVNrdjZzTllWbzNPQW9mVkY4dWFDUUtzeWhPWGJ2b1REM1lvR3NycTh2Q1ZPNHdIRWhvdG8zZFVzNGs5Cm8zMVdvcnprNndYYVV3b0pUcGZxbWRBUnRlb0twdWZ3aFZ6K0k1c1Ezb1c4U3RjM0FXSTk4RTFSdmRmTHc2elAKeGxRbVIvaDVBb0dCQU96bGZxSzlEeUdJMTJLUkdqYjR1bTdrNUFSUWZaVllYNVdndW9iYmNraVk0b1JtVlBIZgpOYm5hTkloVjN6ZjVHWEgwQk9CR2lvOUU3N0FiMUphMXE3d2FPRnJlUURPeHRCZ1BuTXo5OHRJMWJrOXEvZTB5CmlUNTI4OFFLUXV3TTM3QkNOZmtLZUdTOFhIN2gxZm9FZVUxb1k1M1NLWjFvOEM5YkdMc242UWp6QW9HQkFPV0YKYlROK2MvTG50OUprQ2Z0eDhJdk1vcU05TkJLNStXTmRUMU1CcjlxcmhPYmNsZ0d0TzAvaUs3aEpSY0Q3alpIZwpnMnVrU01iUkR1VUo0ZjFSUlNveFBDZWJrcktyNllNQmRTZ2IrZFIyRWJVQ2NReU5oMFJ3L1ovQlNSQ29SSGxUClhPb29iazlnUUN2WHNROUlUK3lTNFlaaE5iNFQ0eXE4bDBpQlJkYkRBb0dBTE11Y2p6cWJibTB0d3hoTHZkR2QKeEFoUnY5TTFBdndyLzkySklqZDNVOG9mOEZGdldZQW5ualg2Y0pGaE0rK28vU2pYbUx4NGcxVWcyVXZJSUthMworWjR2bmtKdVRsdG1ITWFhRUNDbXhTOHRqTWt1bXpqWmRXTkp5TWJCMHlqYUpnWFo2USt6Tzl5UkhnNURFMXg3CkxZRmhaVVJDcE8vR1RkSG9YTjJIQm1NQ2dZRUF1ZXRWNU5OMjJ2bW1wcTlRZ3JUdUZHQkVFaFQrdkhpWE1rMGcKZDIyelpGOXh2WXhMbXJvWGhJTUJ4VHJkWFJDbndkWHF2dVFKNjdybjVOTVhrNW9rZTZQOFJWMDQvTEJTN0VMZgpBd2wrV3dMMUh2b0dWeFBCMGNmeE9scFlkRHpKa3JuYlZ2WS9QTjhMdkRmdy9oOG1WczA0RUNGb1pqcG9kM0xpCjNPR1NqLzhDZ1lFQWthekw5UDJTVHVPck1HYncrK2xSVER2RVlSUXp2b3U0UEFudHlOQUtNSFo3MmNwc0pRRG8KMXdIelFweHRwc0I3bzNoMTEweFdId2xMQ3BzaXFueExoVlRIek9WUVFaQnR5cjhMTVMwVDY5UVc1ekhmcS9hZQpSeGtYdDR0bmUrL0dQdzFPMlN6d3IxcmxUV2tNRGxoM2VEU3R2TjVaaW9qZXM2OVMwb3QzZWVMPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo
  basic_auth_credentials:
    title: Basic Auth Credentials
    description: Username and password. Provide if you choose Basic Auth or Digest Auth authentication type
    type: credential_username_password
    required: false
    example: '{"username": "user@example.com", "password": "mypassword"}'
  fail_on_http_errors:
    title: Fail on HTTP Errors
    description: Indicates whether the plugin should fail on standard HTTP errors (4xx-5xx)
    type: boolean
    required: false
    default: true
    example: true
actions:
  get:
    title: GET
    description: This action is used to make a GET request
    input:
      route:
        title: Route
        description: The route to append to the base URL e.g. /org/users
        type: string
        required: true
        example: /org/users
      headers:
        title: Headers
        description: Headers to use for the request. These will override any default headers
        type: object
        required: false
        example: '{"Host": "rapid7.com"}'
      body_object:
        title: Body (Object)
        description: Payload to submit to the server when making the HTTP Request call
        type: object
        required: false
        example: '{"user": "user@example.com"}'
      body_any:
        title: Body (Any)
        description: Payload (string) to submit to the server when making the HTTP Request call. This can be any type of input, such as an array or integers etc.. If a data object is to be sent, please use the 'Body Object' input
        type: string
        required: false
        example: 'test data'
    output:
      body_object:
        title: Body Object
        description: Response payload from the server as an object. Note, if the response has invalid object structure (list, string..) plugin will wrap it with object map
        type: object
        required: false
        example: {"user": "user@example.com"}
      body_string:
        title: Body String
        description: Response payload from the server as a string
        type: string
        required: false
        example: 'test data'
      status:
        title: Status
        description: Status code of the response from the server
        type: integer
        required: false
        example: 200
      headers:
        title: Headers
        description: Response headers from the server
        type: object
        required: false
        example: {"Host": "rapid7.com"}
  post:
    title: POST
    description: This action is used to make a POST request
    input:
      route:
        title: Route
        description: The route to append to the base URL e.g. /org/users
        type: string
        required: true
        example: /org/users
      headers:
        title: Headers
        description: Headers to use for the request. These will override any default headers
        type: object
        required: false
        example: '{"Host": "rapid7.com"}'
      body_object:
        title: Body (Object)
        description: Payload to submit to the server when making the HTTP Request call
        type: object
        required: false
        example: '{"user": "user@example.com"}'
      body_any:
        title: Body (Any)
        description: Payload (string) to submit to the server when making the HTTP Request call. This can be any type of input, such as an array or integers etc.. If a data object is to be sent, please use the 'Body Object' input
        type: string
        required: false
        example: 'test data'
    output:
      body_object:
        title: Body Object
        description: Response payload from the server as an object. Note, if the response has invalid object structure (list, string..) plugin will wrap it with object map
        type: object
        required: false
        example: {"user": "user@example.com"}
      body_string:
        title: Body String
        description: Response payload from the server as a string
        type: string
        required: false
        example: 'test data'
      status:
        title: Status
        description: Status code of the response from the server
        type: integer
        required: false
        example: 200
      headers:
        title: Headers
        description: Response headers from the server
        type: object
        required: false
        example: {"Host": "rapid7.com"}
  put:
    title: PUT
    description: This action is used to make a PUT request
    input:
      route:
        title: Route
        description: The route to append to the base URL e.g. /org/users
        type: string
        required: true
        example: /org/users
      headers:
        title: Headers
        description: Headers to use for the request. These will override any default headers
        type: object
        required: false
        example: '{"Host": "rapid7.com"}'
      body_object:
        title: Body (Object)
        description: Payload to submit to the server when making the HTTP Request call
        type: object
        required: false
        example: '{"user": "user@example.com"}'
      body_any:
        title: Body (Any)
        description: Payload (string) to submit to the server when making the HTTP Request call. This can be any type of input, such as an array or integers etc.. If a data object is to be sent, please use the 'Body Object' input
        type: string
        required: false
        example: 'test data'
    output:
      body_object:
        title: Body Object
        description: Response payload from the server as an object. Note, if the response has invalid object structure (list, string..) plugin will wrap it with object map
        type: object
        required: false
        example: {"user": "user@example.com"}
      body_string:
        title: Body String
        description: Response payload from the server as a string
        type: string
        required: false
        example: 'test data'
      status:
        title: Status
        description: Status code of the response from the server
        type: integer
        required: false
        example: 200
      headers:
        title: Headers
        description: Response headers from the server
        type: object
        required: false
        example: {"Host": "rapid7.com"}
  patch:
    title: PATCH
    description: This action is used to make a PATCH request
    input:
      route:
        title: Route
        description: The route to append to the base URL e.g. /org/users
        type: string
        required: true
        example: /org/users
      headers:
        title: Headers
        description: Headers to use for the request. These will override any default headers
        type: object
        required: false
        example: '{"Host": "rapid7.com"}'
      body_object:
        title: Body (Object)
        description: Payload to submit to the server when making the HTTP Request call
        type: object
        required: false
        example: '{"user": "user@example.com"}'
      body_any:
        title: Body (Any)
        description: Payload (string) to submit to the server when making the HTTP Request call. This can be any type of input, such as an array or integers etc.. If a data object is to be sent, please use the 'Body Object' input
        type: string
        required: false
        example: 'test data'
    output:
      body_object:
        title: Body Object
        description: Response payload from the server as an object. Note, if the response has invalid object structure (list, string..) plugin will wrap it with object map
        type: object
        required: false
        example: {"user": "user@example.com"}
      body_string:
        title: Body String
        description: Response payload from the server as a string
        type: string
        required: false
        example: "test data"
      status:
        title: Status
        description: Status code of the response from the server
        type: integer
        required: false
        example: 200
      headers:
        title: Headers
        description: Response headers from the server
        type: object
        required: false
        example: {"Host": "rapid7.com"}
  delete:
    title: DELETE
    description: This action is used to make a DELETE request
    input:
      route:
        title: Route
        description: The route to append to the base URL e.g. /org/users
        type: string
        required: true
        example: /org/users
      headers:
        title: Headers
        description: Headers to use for the request. These will override any default headers
        type: object
        required: false
        example: '{"Host": "rapid7.com"}'
      body_object:
        title: Body (Object)
        description: Payload to submit to the server when making the HTTP Request call
        type: object
        required: false
        example: '{"user": "user@example.com"}'
      body_any:
        title: Body (Any)
        description: Payload (string) to submit to the server when making the HTTP Request call. This can be any type of input, such as an array or integers etc.. If a data object is to be sent, please use the 'Body Object' input
        type: string
        required: false
        example: 'test data'
    output:
      body_object:
        title: Body Object
        description: Response payload from the server as an object. Note, if the response has invalid object structure (list, string..) plugin will wrap it with object map
        type: object
        required: false
        example: {"user": "user@example.com"}
      body_string:
        title: Body String
        description: Response payload from the server as a string
        type: string
        required: false
        example: "test data"
      status:
        title: Status
        description: Status code of the response from the server
        type: integer
        required: false
        example: 200
      headers:
        title: Headers
        description: Response headers from the server
        type: object
        required: false
        example: {"Host": "rapid7.com"}
