# GENERATED BY KOMAND SDK - DO NOT EDIT
import insightconnect_plugin_runtime
import json


class Component:
    DESCRIPTION = "Scan Dynamo and return any objects found"


class Input:
    CONSISTENT_READ = "consistent_read"
    EXCLUSIVE_START_KEY = "exclusive_start_key"
    EXPRESSION_ATTRIBUTE_NAMES = "expression_attribute_names"
    EXPRESSION_ATTRIBUTE_VALUES = "expression_attribute_values"
    FILTER_EXPRESSION = "filter_expression"
    INDEX_NAME = "index_name"
    LIMIT = "limit"
    PROJECTION_EXPRESSION = "projection_expression"
    RETURN_CONSUMED_CAPACITY = "return_consumed_capacity"
    SEGMENT = "segment"
    SELECT = "select"
    TABLE_NAME = "table_name"
    TOTAL_SEGMENTS = "total_segments"
    

class Output:
    COUNT = "Count"
    ITEMS = "Items"
    RESPONSEMETADATA = "ResponseMetadata"
    SCANNEDCOUNT = "ScannedCount"
    

class ScanInput(insightconnect_plugin_runtime.Input):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "consistent_read": {
      "type": "boolean",
      "title": "Consistent Read",
      "description": "Value that determines the read consistency model during the scan",
      "order": 13
    },
    "exclusive_start_key": {
      "type": "object",
      "title": "Exclusive Start Key",
      "description": "The primary key of the first item that this operation will evaluate. Follows AttributeValue formatting, please refer to https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/dynamodb.html#DynamoDB.Client.scan",
      "order": 5
    },
    "expression_attribute_names": {
      "type": "object",
      "title": "Expression Attribute Names",
      "description": "One or more substitution tokens for attribute names in an expression",
      "order": 11
    },
    "expression_attribute_values": {
      "type": "object",
      "title": "Expression Attribute Values",
      "description": "One or more values that can be substituted in an expression",
      "order": 12
    },
    "filter_expression": {
      "type": "string",
      "title": "Filter Expression",
      "description": "A string that contains conditions that DynamoDB applies after the Scan operation",
      "order": 10
    },
    "index_name": {
      "type": "string",
      "title": "Index Name",
      "description": "The index to use. If empty, defaults to a full Scan of the table",
      "order": 2
    },
    "limit": {
      "type": "integer",
      "title": "Limit",
      "description": "The maximum number of items to evaluate (not necessarily the number of matching items)",
      "default": 100,
      "order": 3
    },
    "projection_expression": {
      "type": "string",
      "title": "Projection Expression",
      "description": "A string that identifies one or more attributes to retrieve from the specified table or index",
      "order": 9
    },
    "return_consumed_capacity": {
      "type": "string",
      "title": "Return Consumed Capacity",
      "description": "Determines the level of detail about either provisioned or on-demand throughput consumption that is returned in the response",
      "default": "TOTAL",
      "enum": [
        "NONE",
        "INDEXES",
        "TOTAL"
      ],
      "order": 6
    },
    "segment": {
      "type": "integer",
      "title": "Segment",
      "description": "For a parallel Scan request, Segment identifies an individual segment to be scanned by an application worker",
      "order": 8
    },
    "select": {
      "type": "string",
      "title": "Select",
      "description": "The attributes to be returned in the result",
      "default": "ALL_ATTRIBUTES",
      "enum": [
        "ALL_ATTRIBUTES",
        "ALL_PROJECTED_ATTRIBUTES",
        "COUNT",
        "SPECIFIC_ATTRIBUTES"
      ],
      "order": 4
    },
    "table_name": {
      "type": "string",
      "title": "Table Name",
      "description": "The table name to search",
      "order": 1
    },
    "total_segments": {
      "type": "integer",
      "title": "Total Segments",
      "description": "For a parallel Scan request, TotalSegments represents the total number of segments into which the Scan operation will be divided",
      "order": 7
    }
  },
  "required": [
    "table_name"
  ]
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)


class ScanOutput(insightconnect_plugin_runtime.Output):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "Count": {
      "type": "integer",
      "title": "Count",
      "description": "Items count",
      "order": 1
    },
    "Items": {
      "type": "array",
      "title": "Items",
      "description": "Database items",
      "items": {
        "type": "object"
      },
      "order": 2
    },
    "ResponseMetadata": {
      "$ref": "#/definitions/ResponseMetadata",
      "title": "Response Metadata",
      "description": "Response metadata",
      "order": 3
    },
    "ScannedCount": {
      "type": "integer",
      "title": "Scanned Count",
      "description": "Scanned count",
      "order": 4
    }
  },
  "required": [
    "Count",
    "Items"
  ],
  "definitions": {
    "HTTPHeaders": {
      "type": "object",
      "title": "HTTPHeaders",
      "properties": {
        "connection": {
          "type": "string",
          "title": "Connection",
          "description": "Connection",
          "order": 1
        },
        "content-length": {
          "type": "string",
          "title": "Content-Length",
          "description": "Content-length",
          "order": 2
        },
        "content-type": {
          "type": "string",
          "title": "Content-Type",
          "description": "Content-type",
          "order": 3
        },
        "date": {
          "type": "string",
          "title": "Date",
          "description": "Date",
          "order": 4
        },
        "server": {
          "type": "string",
          "title": "Server",
          "description": "Server",
          "order": 5
        },
        "x-amz-crc32": {
          "type": "string",
          "title": "X-Amz-Crc32",
          "description": "X-amz-crc32",
          "order": 6
        },
        "x-amzn-requestid": {
          "type": "string",
          "title": "X-Amzn-RequestID",
          "description": "X-amzn-requestID",
          "order": 7
        }
      }
    },
    "ResponseMetadata": {
      "type": "object",
      "title": "ResponseMetadata",
      "properties": {
        "HTTPHeaders": {
          "$ref": "#/definitions/HTTPHeaders",
          "title": "HTTP Headers",
          "description": "HTTP headers",
          "order": 1
        },
        "HTTPStatusCode": {
          "type": "integer",
          "title": "HTTP Status Code",
          "description": "HTTP status code",
          "order": 2
        },
        "RequestId": {
          "type": "string",
          "title": "Request ID",
          "description": "Request ID",
          "order": 3
        },
        "RetryAttempts": {
          "type": "integer",
          "title": "Retry Attempts",
          "description": "Retry attempts",
          "order": 4
        }
      },
      "definitions": {
        "HTTPHeaders": {
          "type": "object",
          "title": "HTTPHeaders",
          "properties": {
            "connection": {
              "type": "string",
              "title": "Connection",
              "description": "Connection",
              "order": 1
            },
            "content-length": {
              "type": "string",
              "title": "Content-Length",
              "description": "Content-length",
              "order": 2
            },
            "content-type": {
              "type": "string",
              "title": "Content-Type",
              "description": "Content-type",
              "order": 3
            },
            "date": {
              "type": "string",
              "title": "Date",
              "description": "Date",
              "order": 4
            },
            "server": {
              "type": "string",
              "title": "Server",
              "description": "Server",
              "order": 5
            },
            "x-amz-crc32": {
              "type": "string",
              "title": "X-Amz-Crc32",
              "description": "X-amz-crc32",
              "order": 6
            },
            "x-amzn-requestid": {
              "type": "string",
              "title": "X-Amzn-RequestID",
              "description": "X-amzn-requestID",
              "order": 7
            }
          }
        }
      }
    }
  }
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)
