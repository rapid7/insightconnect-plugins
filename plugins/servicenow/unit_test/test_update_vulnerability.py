import os
import sys

sys.path.append(os.path.abspath("../"))

from typing import Any, Dict
from unittest import TestCase
from unittest.mock import MagicMock, patch

from icon_servicenow.actions.update_vulnerability.action import UpdateVulnerability
from icon_servicenow.actions.update_vulnerability.schema import Input, Output, UpdateVulnerabilityOutput
from jsonschema import validate
from parameterized import parameterized

from util import Util

STUB_INPUT_PARAMETERS = {
    Input.SYSTEM_ID: "12345",
    Input.STATE: "Open",
    Input.FIRST_FOUND: "2023-04-28T15:48:07",
    Input.ADDITIONAL_FIELDS: {"short_description": "ExampleTest"},
}


class TestUpdateVulnerability(TestCase):
    @classmethod
    def setUpClass(cls) -> None:
        cls.action = Util.default_connector(UpdateVulnerability())

    @parameterized.expand([(STUB_INPUT_PARAMETERS,)])
    @patch("requests.sessions.Session.put", side_effect=Util.mocked_requests)
    def test_update_vulnerability(self, input_parameters: Dict[str, Any], mock_post: MagicMock) -> None:
        actual = self.action.run(input_parameters)
        expected = {Output.SUCCESS: True}
        validate(actual, UpdateVulnerabilityOutput.schema)
        mock_post.assert_called_once()
        self.assertEqual(actual, expected)
