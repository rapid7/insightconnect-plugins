import os
import sys

sys.path.append(os.path.abspath("../"))

from typing import Any, Dict
from unittest import TestCase
from unittest.mock import MagicMock, patch

from icon_servicenow.actions.create_vulnerability.action import CreateVulnerability
from icon_servicenow.actions.create_vulnerability.schema import CreateVulnerabilityOutput, Input, Output
from jsonschema import validate
from parameterized import parameterized

from util import Util

STUB_INPUT_PARAMETERS = {
    Input.RISK_SCORE: 30,
    Input.STATE: "Open",
    Input.FIRST_FOUND: "2023-04-28T15:48:07",
    Input.ADDITIONAL_FIELDS: {"short_description": "ExampleTest"},
}


class TestCreateVulnerability(TestCase):
    @classmethod
    def setUpClass(cls) -> None:
        cls.action = Util.default_connector(CreateVulnerability())

    @parameterized.expand([(STUB_INPUT_PARAMETERS,)])
    @patch("requests.sessions.Session.post", side_effect=Util.mocked_requests)
    def test_create_vulnerability(self, input_parameters: Dict[str, Any], mock_post: MagicMock) -> None:
        actual = self.action.run(input_parameters)
        expected = {
            Output.SYSTEM_ID: "12345",
            Output.NUMBER: "AVIT0000000",
            Output.VULNERABILITY_URL: "https://rapid7.service-now.com/sn_vul_vulnerable_item.do?sys_id=12345",
        }
        validate(actual, CreateVulnerabilityOutput.schema)
        mock_post.assert_called_once()
        self.assertEqual(actual, expected)
