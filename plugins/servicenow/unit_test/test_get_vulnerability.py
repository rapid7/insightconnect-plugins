import os
import sys

sys.path.append(os.path.abspath("../"))

from typing import Any, Dict
from unittest import TestCase
from unittest.mock import MagicMock, patch

from icon_servicenow.actions.get_vulnerability.action import GetVulnerability
from icon_servicenow.actions.get_vulnerability.schema import GetVulnerabilityOutput, Input, Output
from jsonschema import validate
from parameterized import parameterized

from util import Util

STUB_INPUT_PARAMETERS = {Input.SYSTEM_ID: "12345", Input.FILTERING_FIELDS: "last_opened,risk_rating"}


class TestGetVulnerability(TestCase):
    @classmethod
    def setUpClass(cls) -> None:
        cls.action = Util.default_connector(GetVulnerability())

    @parameterized.expand([(STUB_INPUT_PARAMETERS,)])
    @patch("requests.sessions.Session.get", side_effect=Util.mocked_requests)
    def test_get_vulnerability(self, input_parameters: Dict[str, Any], mock_post: MagicMock) -> None:
        actual = self.action.run(input_parameters)
        expected = {Output.FILTERED_VULNERABILITY: {"risk_rating": "3", "last_opened": "2023-04-28"}}
        validate(actual, GetVulnerabilityOutput.schema)
        mock_post.assert_called_once()
        self.assertEqual(actual, expected)
