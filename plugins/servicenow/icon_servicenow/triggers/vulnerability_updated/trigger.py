import insightconnect_plugin_runtime
import time

from insightconnect_plugin_runtime.exceptions import PluginException

from .schema import VulnerabilityUpdatedInput, VulnerabilityUpdatedOutput, Input, Output, Component

# Custom imports below


class VulnerabilityUpdated(insightconnect_plugin_runtime.Trigger):
    def __init__(self):
        super(self.__class__, self).__init__(
            name="vulnerability_updated",
            description=Component.DESCRIPTION,
            input=VulnerabilityUpdatedInput(),
            output=VulnerabilityUpdatedOutput(),
        )

    def run(self, params={}):
        urls = list(
            map(lambda system_id: f"{self.connection.vulnerability_url}/{system_id}", params.get(Input.SYSTEM_ID, []))
        )
        previous_vulnerabilities = list(
            map(
                lambda url: self.connection.request.make_request(
                    url, "GET", params=f"sysparm_fields={params.get(Input.MONITORED_FIELDS)}"
                )
                .get("resource", {})
                .get("result"),
                urls,
            )
        )

        while True:
            current_vulnerabilities = list(
                map(
                    lambda url: self.connection.request.make_request(
                        url, "GET", params=f"sysparm_fields={params.get(Input.MONITORED_FIELDS)}"
                    )
                    .get("resource", {})
                    .get("result"),
                    urls,
                )
            )

            changed_vulnerabilities = []
            for previous_vulnerability, current_vulnerability, system_id in zip(
                previous_vulnerabilities, current_vulnerabilities, params.get(Input.SYSTEM_ID, [])
            ):
                changed_fields = {
                    key: {"previous": previous_vulnerability[key], "current": current_vulnerability[key]}
                    for key in previous_vulnerability
                    if current_vulnerability.get(key) != previous_vulnerability[key]
                }
                if changed_fields:
                    changed_vulnerabilities.append({"sys_id": system_id, "changed_fields": changed_fields})

            if changed_vulnerabilities:
                self.send({Output.UPDATED_VULNERABILITIES: changed_vulnerabilities})

            previous_vulnerabilities = current_vulnerabilities
            time.sleep(params.get(Input.INTERVAL, 5))
