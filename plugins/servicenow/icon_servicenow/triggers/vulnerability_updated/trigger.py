import insightconnect_plugin_runtime
import time


from .schema import VulnerabilityUpdatedInput, VulnerabilityUpdatedOutput, Input, Output, Component

# Custom imports below
from insightconnect_plugin_runtime.helper import clean


class VulnerabilityUpdated(insightconnect_plugin_runtime.Trigger):
    def __init__(self):
        super(self.__class__, self).__init__(
            name="vulnerability_updated",
            description=Component.DESCRIPTION,
            input=VulnerabilityUpdatedInput(),
            output=VulnerabilityUpdatedOutput(),
        )

    def run(self, params={}):
        interval = params.get(Input.INTERVAL, 5)
        system_ids = "^OR".join(list(map(lambda system_id: f"sys_id={system_id}", params.get(Input.SYSTEM_IDS, []))))
        monitored_fields = {"sysparm_fields": f"sys_id,{params.get(Input.MONITORED_FIELDS)}"}
        query = {"sysparm_query": system_ids}

        previous_vulnerabilities = (
            self.connection.request.make_request(
                self.connection.vulnerability_url, "GET", params=clean({**query, **monitored_fields})
            )
            .get("resource", {})
            .get("result")
        )

        while True:
            current_vulnerabilities = (
                self.connection.request.make_request(
                    self.connection.vulnerability_url, "GET", params=clean({**query, **monitored_fields})
                )
                .get("resource", {})
                .get("result")
            )

            changed_vulnerabilities = []
            for previous_vulnerability, current_vulnerability in zip(previous_vulnerabilities, current_vulnerabilities):
                changed_fields = {
                    key: {"previous": previous_vulnerability[key], "current": current_vulnerability[key]}
                    for key in previous_vulnerability
                    if current_vulnerability.get(key) != previous_vulnerability[key]
                }
                if changed_fields:
                    changed_vulnerabilities.append(
                        {
                            "sys_id": current_vulnerability.get("sys_id", "NO SYSTEM ID"),
                            "changed_fields": changed_fields,
                        }
                    )

            if changed_vulnerabilities:
                self.logger.info("Changes found. Sending...")
                self.send({Output.UPDATED_VULNERABILITIES: changed_vulnerabilities})
            else:
                self.logger.info(f"No changes found. Sleeping for {interval}...")

            previous_vulnerabilities = current_vulnerabilities
            time.sleep(interval)
