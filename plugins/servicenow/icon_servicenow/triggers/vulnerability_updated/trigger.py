import insightconnect_plugin_runtime
import time

from insightconnect_plugin_runtime.exceptions import PluginException

from .schema import VulnerabilityUpdatedInput, VulnerabilityUpdatedOutput, Input, Output, Component

# Custom imports below


class VulnerabilityUpdated(insightconnect_plugin_runtime.Trigger):
    def __init__(self):
        super(self.__class__, self).__init__(
            name="vulnerability_updated",
            description=Component.DESCRIPTION,
            input=VulnerabilityUpdatedInput(),
            output=VulnerabilityUpdatedOutput(),
        )

    def run(self, params={}):
        url = f"{self.connection.vulnerability_url}/{params.get(Input.SYSTEM_ID, '')}"
        response = self.connection.request.make_request(
            url, "GET", params=f"sysparm_fields={params.get(Input.MONITORED_FIELDS)}"
        )

        try:
            prev_incident = response["resource"].get("result")
        except KeyError as error:
            raise PluginException(preset=PluginException.Preset.UNKNOWN, data=response.text) from error

        while True:
            response = self.connection.request.make_request(
                url, "GET", params=f"sysparm_fields={params.get(Input.MONITORED_FIELDS)}"
            )
            try:
                current_incident = response["resource"].get("result")
            except KeyError as error:
                raise PluginException(preset=PluginException.Preset.UNKNOWN, data=response.text) from error

            changed_fields = {}
            for key, value in prev_incident.items():
                if current_incident.get(key) != value:
                    changed_fields[key] = {
                        "previous": value,
                        "current": current_incident.get(key),
                    }

            if len(changed_fields) > 0:
                self.send({Output.CHANGED_FIELDS: changed_fields})

            prev_incident = current_incident
            time.sleep(params.get(Input.INTERVAL, 5))
