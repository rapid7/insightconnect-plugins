import insightconnect_plugin_runtime
from insightconnect_plugin_runtime.exceptions import PluginException

from .schema import Component, GetVulnerabilityInput, GetVulnerabilityOutput, Input, Output

# Custom imports below


class GetVulnerability(insightconnect_plugin_runtime.Action):
    def __init__(self):
        super(self.__class__, self).__init__(
            name="get_vulnerability",
            description=Component.DESCRIPTION,
            input=GetVulnerabilityInput(),
            output=GetVulnerabilityOutput(),
        )

    def run(self, params={}):
        url = f"{self.connection.vulnerability_url}/{params.get(Input.SYSTEM_ID, '')}"
        response = self.connection.request.make_request(url, "GET")

        fields = params.get(Input.FILTERING_FIELDS, "").split(",")
        filtered_vulnerability = {}

        try:
            for field in fields:
                filtered_vulnerability[field] = response["resource"]["result"].get(field, "")
        except KeyError as error:
            raise PluginException(preset=PluginException.Preset.UNKNOWN, data=response.text) from error

        return {Output.FILTERED_VULNERABILITY: filtered_vulnerability}
