# GENERATED BY KOMAND SDK - DO NOT EDIT
import komand
import json


class Component:
    DESCRIPTION = "Run Chaosreader on a PCAP or snoop file"


class Input:
    DUMP = "dump"
    EXCLUDE = "exclude"
    

class Output:
    ETHERNET_COUNT = "ethernet_count"
    FILE_COUNT = "file_count"
    FILES = "files"
    IP_COUNT = "ip_count"
    PROTO_COUNT = "proto_count"
    SESSIONS = "sessions"
    TCP_COUNT = "tcp_count"
    UDP_COUNT = "udp_count"
    

class RunInput(komand.Input):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "dump": {
      "type": "string",
      "title": "PCAP or Snoop File",
      "displayType": "bytes",
      "description": "Base64 encoded PCAP or snoop file",
      "format": "bytes",
      "order": 1
    },
    "exclude": {
      "type": "string",
      "title": "Exclude",
      "description": "Exclude traffic/files",
      "enum": [
        "None",
        "Info",
        "Raw",
        "TCP",
        "UDP",
        "ICMP"
      ],
      "order": 2
    }
  },
  "required": [
    "dump"
  ]
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)


class RunOutput(komand.Output):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "ethernet_count": {
      "type": "array",
      "title": "Ethernet Type Count",
      "description": "List of ethernet types and their count",
      "items": {
        "$ref": "#/definitions/count"
      },
      "order": 8
    },
    "file_count": {
      "type": "integer",
      "title": "File Count",
      "description": "Number of files extracted",
      "order": 2
    },
    "files": {
      "type": "array",
      "title": "Files",
      "description": "Extracted files",
      "items": {
        "type": "string",
        "displayType": "bytes",
        "format": "bytes"
      },
      "order": 1
    },
    "ip_count": {
      "type": "array",
      "title": "IP Count",
      "description": "List of IPs and their count",
      "items": {
        "$ref": "#/definitions/count"
      },
      "order": 4
    },
    "proto_count": {
      "type": "array",
      "title": "IP Protocol Count",
      "description": "List of IP protocols and their count",
      "items": {
        "$ref": "#/definitions/count"
      },
      "order": 5
    },
    "sessions": {
      "type": "array",
      "title": "Sessions",
      "description": "List of sessions found in traffic",
      "items": {
        "type": "string"
      },
      "order": 3
    },
    "tcp_count": {
      "type": "array",
      "title": "TCP Port Count",
      "description": "List of TCP ports and their count",
      "items": {
        "$ref": "#/definitions/count"
      },
      "order": 6
    },
    "udp_count": {
      "type": "array",
      "title": "UDP Port Count",
      "description": "List of UDP ports and their count",
      "items": {
        "$ref": "#/definitions/count"
      },
      "order": 7
    }
  },
  "definitions": {
    "count": {
      "type": "object",
      "title": "count",
      "properties": {
        "count": {
          "type": "integer",
          "title": "Count",
          "description": "Count of protocol source",
          "order": 2
        },
        "source": {
          "type": "string",
          "title": "Source",
          "description": "Protocol source",
          "order": 1
        }
      }
    }
  }
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)
