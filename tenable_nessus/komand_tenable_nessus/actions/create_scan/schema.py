# GENERATED BY KOMAND SDK - DO NOT EDIT
import komand
import json


class Component:
    DESCRIPTION = "Create a new scan"


class Input:
    DESCRIPTION = "description"
    SCAN_NAME = "scan_name"
    SCANNER_NAME = "scanner_name"
    TARGETS = "targets"
    TEMPLATE_NAME = "template_name"
    

class Output:
    MESSAGE = "message"
    NEW_SCAN = "new_scan"
    

class CreateScanInput(komand.Input):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "description": {
      "type": "string",
      "title": "Description",
      "description": "Additional information to attach to the scan",
      "order": 3
    },
    "scan_name": {
      "type": "string",
      "title": "Scan Name",
      "description": "Name to label the new scan",
      "order": 2
    },
    "scanner_name": {
      "type": "string",
      "title": "Scanner Name",
      "description": "Name of the scanner to use",
      "order": 4
    },
    "targets": {
      "type": "array",
      "title": "Targets",
      "description": "IP addresses or host names to scan",
      "items": {
        "type": "string"
      },
      "order": 5
    },
    "template_name": {
      "type": "string",
      "title": "Template Name",
      "description": "Name of the template to use",
      "order": 1
    }
  },
  "required": [
    "scan_name",
    "scanner_name",
    "targets",
    "template_name"
  ]
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)


class CreateScanOutput(komand.Output):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "message": {
      "type": "string",
      "title": "Message",
      "description": "Return message",
      "order": 1
    },
    "new_scan": {
      "$ref": "#/definitions/scan",
      "title": "New Scan",
      "description": "Data describing the newly created scan",
      "order": 2
    }
  },
  "required": [
    "message",
    "new_scan"
  ],
  "definitions": {
    "scan": {
      "type": "object",
      "title": "scan",
      "properties": {
        "control": {
          "type": "boolean",
          "title": "Control",
          "order": 2
        },
        "creation_date": {
          "type": "integer",
          "title": "Creation Date",
          "order": 7
        },
        "enabled": {
          "type": "boolean",
          "title": "Enabled",
          "order": 5
        },
        "folder_id": {
          "type": "integer",
          "title": "Folder Id",
          "order": 9
        },
        "last_modification_date": {
          "type": "integer",
          "title": "Last Modification Date",
          "order": 10
        },
        "name": {
          "type": "string",
          "title": "Name",
          "order": 12
        },
        "owner": {
          "type": "string",
          "title": "Owner",
          "order": 6
        },
        "read": {
          "type": "boolean",
          "title": "Read",
          "order": 4
        },
        "status": {
          "type": "string",
          "title": "Status",
          "order": 1
        },
        "type": {
          "type": "string",
          "title": "Type",
          "order": 11
        },
        "user_permissions": {
          "type": "integer",
          "title": "User Permissions",
          "order": 8
        },
        "uuid": {
          "type": "string",
          "title": "Uuid",
          "order": 3
        }
      }
    }
  }
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)
