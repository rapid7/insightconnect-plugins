# GENERATED BY KOMAND SDK - DO NOT EDIT
import komand
import json


class Component:
    DESCRIPTION = "Performs a SQLmap scan on target"


class Input:
    ACERT = "aCert"
    ACRED = "aCred"
    ATYPE = "aType"
    AGENT = "agent"
    ALERT = "alert"
    ANSWERS = "answers"
    BATCH = "batch"
    BINARYFIELDS = "binaryFields"
    BULKFILE = "bulkFile"
    CHARSET = "charset"
    CHECKWAF = "checkWaf"
    CLEANUP = "cleanup"
    CODE = "code"
    COL = "col"
    COMMONCOLUMNS = "commonColumns"
    COMMONTABLES = "commonTables"
    CONFIGFILE = "configFile"
    COOKIE = "cookie"
    CRAWLDEPTH = "crawlDepth"
    CSVDEL = "csvDel"
    DFILE = "dFile"
    DATA = "data"
    DATABASE = "database"
    DB = "db"
    DBMS = "dbms"
    DBMSCRED = "dbmsCred"
    DELAY = "delay"
    DEPENDENCIES = "dependencies"
    DIRECT = "direct"
    DNSNAME = "dnsName"
    DROPSETCOOKIE = "dropSetCookie"
    DUMMY = "dummy"
    DUMPALL = "dumpAll"
    DUMPFORMAT = "dumpFormat"
    DUMPTABLE = "dumpTable"
    ETA = "eta"
    EVALCODE = "evalCode"
    EXCLUDESYSDBS = "excludeSysDbs"
    EXTENSIVEFP = "extensiveFp"
    FIRSTCHAR = "firstChar"
    FLUSHSESSION = "flushSession"
    FORCEDNS = "forceDns"
    FORCESSL = "forceSsl"
    FORMS = "forms"
    FRESHQUERIES = "freshQueries"
    GETALL = "getAll"
    GETBANNER = "getBanner"
    GETCOLUMNS = "getColumns"
    GETCOUNT = "getCount"
    GETCURRENTDB = "getCurrentDb"
    GETCURRENTUSER = "getCurrentUser"
    GETDBS = "getDbs"
    GETHOSTNAME = "getHostname"
    GETPASSWORDHASHES = "getPasswordHashes"
    GETPRIVILEGES = "getPrivileges"
    GETROLES = "getRoles"
    GETSCHEMA = "getSchema"
    GETTABLES = "getTables"
    GETUSERS = "getUsers"
    GOOGLEDORK = "googleDork"
    GOOGLEPAGE = "googlePage"
    HEADERS = "headers"
    HEXCONVERT = "hexConvert"
    HOST = "host"
    HPP = "hpp"
    IDENTIFYWAF = "identifyWaf"
    IGNOREPROXY = "ignoreProxy"
    INVALIDBIGNUM = "invalidBignum"
    INVALIDLOGICAL = "invalidLogical"
    ISDBA = "isDba"
    KEEPALIVE = "keepAlive"
    LASTCHAR = "lastChar"
    LEVEL = "level"
    LIMITSTART = "limitStart"
    LIMITSTOP = "limitStop"
    LOADCOOKIES = "loadCookies"
    LOGFILE = "logFile"
    MNEMONICS = "mnemonics"
    MOBILE = "mobile"
    NOCAST = "noCast"
    NOESCAPE = "noEscape"
    NOTSTRING = "notString"
    NULLCONNECTION = "nullConnection"
    OPTIMIZE = "optimize"
    OS = "os"
    OSBOF = "osBof"
    OSCMD = "osCmd"
    PCRED = "pCred"
    PDEL = "pDel"
    PARSEERRORS = "parseErrors"
    PREDICTOUTPUT = "predictOutput"
    PREFIX = "prefix"
    PRIVESC = "privEsc"
    PROXY = "proxy"
    PURGEOUTPUT = "purgeOutput"
    QUERY = "query"
    RFILE = "rFile"
    RPARAM = "rParam"
    RANDOMAGENT = "randomAgent"
    REFERER = "referer"
    REGADD = "regAdd"
    REGDATA = "regData"
    REGDEL = "regDel"
    REGKEY = "regKey"
    REGREAD = "regRead"
    REGTYPE = "regType"
    REGVAL = "regVal"
    REGEXP = "regexp"
    REQUESTFILE = "requestFile"
    RETRIES = "retries"
    RISK = "risk"
    SAFREQ = "saFreq"
    SAFURL = "safUrl"
    SCOPE = "scope"
    SEARCH = "search"
    SECONDORDER = "secondOrder"
    SESSIONFILE = "sessionFile"
    SHLIB = "shLib"
    SKIP = "skip"
    SKIPURLENCODE = "skipUrlEncode"
    SMART = "smart"
    SQLFILE = "sqlFile"
    STRING = "string"
    SUFFIX = "suffix"
    TAMPER = "tamper"
    TBL = "tbl"
    TECH = "tech"
    TESTFILTER = "testFilter"
    TESTPARAMETER = "testParameter"
    TEXTONLY = "textOnly"
    THREADS = "threads"
    TIMESEC = "timeSec"
    TIMEOUT = "timeout"
    TITLES = "titles"
    UCHAR = "uChar"
    UCOLS = "uCols"
    UFROM = "uFrom"
    UDFINJECT = "udfInject"
    UPDATEALL = "updateAll"
    URL = "url"
    USER = "user"
    VERBOSE = "verbose"
    WFILE = "wFile"
    

class Output:
    RESULT = "result"
    

class ScanInput(komand.Input):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "aCert": {
      "type": "string",
      "title": "Authentication File",
      "displayType": "bytes",
      "description": "HTTP authentication PEM cert/private key file",
      "format": "bytes",
      "order": 72
    },
    "aCred": {
      "type": "string",
      "title": "Authentication Credential",
      "description": "HTTP authentication credentials (name:password)",
      "order": 131
    },
    "aType": {
      "type": "string",
      "title": "HTTP Authentication Type",
      "description": "HTTP authentication type (Basic, Digest, NTLM or PKI)",
      "order": 37
    },
    "agent": {
      "type": "string",
      "title": "User-Agent",
      "description": "HTTP User-Agent header value",
      "order": 114
    },
    "alert": {
      "type": "string",
      "title": "Alert",
      "description": "Run host OS command(s) when SQL injection is found",
      "order": 128
    },
    "answers": {
      "type": "string",
      "title": "Answers",
      "description": "Set question answers (e.g. 'quit=N,follow=N')",
      "order": 53
    },
    "batch": {
      "type": "boolean",
      "title": "Batch",
      "description": "Never ask for user input, use the default behaviour",
      "default": true,
      "order": 100
    },
    "binaryFields": {
      "type": "string",
      "title": "Binary Fields",
      "description": "Result fields having binary values (e.g. 'digest')",
      "order": 36
    },
    "bulkFile": {
      "type": "string",
      "title": "Bulkfile",
      "displayType": "bytes",
      "description": "Scan multiple targets given in a textual file",
      "format": "bytes",
      "order": 124
    },
    "charset": {
      "type": "string",
      "title": "Blind Charset",
      "description": "Blind SQL injection charset (e.g. '0123456789abcdef')",
      "order": 29
    },
    "checkWaf": {
      "type": "boolean",
      "title": "Check for WAF",
      "description": "Make a thorough testing for a WAF/IPS/IDS protection",
      "order": 43
    },
    "cleanup": {
      "type": "boolean",
      "title": "Clean Up",
      "description": "Clean up the DBMS from SQLmap specific UDF and tables",
      "default": false,
      "order": 121
    },
    "code": {
      "type": "string",
      "title": "HTTP Code",
      "description": "HTTP code to match when query is evaluated to True",
      "order": 8
    },
    "col": {
      "type": "string",
      "title": "COL",
      "description": "DBMS database table column(s) to enumerate",
      "order": 69
    },
    "commonColumns": {
      "type": "string",
      "title": "Common Columns",
      "description": "Check existence of common columns",
      "order": 142
    },
    "commonTables": {
      "type": "boolean",
      "title": "Common Tables",
      "description": "Check existence of common tables",
      "order": 91
    },
    "configFile": {
      "type": "string",
      "title": "Configuration File",
      "displayType": "bytes",
      "description": "Load options from a configuration INI file",
      "format": "bytes",
      "order": 86
    },
    "cookie": {
      "type": "string",
      "title": "HTTP Cookie",
      "description": "HTTP Cookie header value",
      "order": 56
    },
    "crawlDepth": {
      "type": "integer",
      "title": "Crawl Depth",
      "description": "Crawl the website starting from the target URL",
      "default": 1,
      "enum": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10
      ],
      "order": 1
    },
    "csvDel": {
      "type": "string",
      "title": "Delimiting CSV",
      "description": "Delimiting character used in CSV output (default: , )",
      "order": 48
    },
    "dFile": {
      "type": "string",
      "title": "File Destination",
      "description": "Back-end DBMS absolute filepath to write to",
      "order": 133
    },
    "data": {
      "type": "string",
      "title": "Data",
      "description": "Data string to be sent through POST",
      "order": 134
    },
    "database": {
      "type": "boolean",
      "title": "Database",
      "description": "DBMS database to enumerate",
      "order": 99
    },
    "db": {
      "type": "string",
      "title": "Database",
      "description": "DBMS database to enumerate",
      "order": 126
    },
    "dbms": {
      "type": "string",
      "title": "DBMS",
      "description": "Force back-end DBMS to this value",
      "order": 117
    },
    "dbmsCred": {
      "type": "string",
      "title": "Purge Output",
      "description": "DBMS authentication credentials (user:password)",
      "order": 105
    },
    "delay": {
      "type": "integer",
      "title": "Delay",
      "description": "Delay in seconds between each HTTP request",
      "order": 12
    },
    "dependencies": {
      "type": "boolean",
      "title": "SQLmap Dependencies",
      "description": "Check for missing (non-core) SQLmap dependencies",
      "order": 55
    },
    "direct": {
      "type": "string",
      "title": "Direct Database connection",
      "description": "Connection string for direct database connection",
      "order": 38
    },
    "dnsName": {
      "type": "string",
      "title": "Domain Name",
      "description": "Domain name used for DNS exfiltration attack",
      "order": 47
    },
    "dropSetCookie": {
      "type": "boolean",
      "title": "Drop Set Cookie",
      "description": "Ignore Set-Cookie header from response",
      "order": 18
    },
    "dummy": {
      "type": "boolean",
      "title": "Dummy",
      "description": "Dummy parameter value",
      "order": 90
    },
    "dumpAll": {
      "type": "boolean",
      "title": "Dump All",
      "description": "Dump all DBMS databases tables entries",
      "order": 88
    },
    "dumpFormat": {
      "type": "string",
      "title": "Dump Format",
      "description": "Format of dumped data",
      "default": "CSV",
      "enum": [
        "CSV",
        "HTML",
        "SQLITE"
      ],
      "order": 127
    },
    "dumpTable": {
      "type": "boolean",
      "title": "Dump Table",
      "description": "Dump DBMS database table entries",
      "default": false,
      "order": 98
    },
    "eta": {
      "type": "boolean",
      "title": "Estimated Time of Arrival",
      "description": "Display for each output the estimated time of arrival",
      "order": 65
    },
    "evalCode": {
      "type": "string",
      "title": "Evaluate Code",
      "description": "Evaluate provided Python code before the request (e.g.'import hashlib;id2=hashlib.md5(id).hexdigest()')",
      "order": 120
    },
    "excludeSysDbs": {
      "type": "boolean",
      "title": "Exclude DBMS System Databases",
      "description": "Exclude DBMS system databases when enumerating tables",
      "order": 4
    },
    "extensiveFp": {
      "type": "boolean",
      "title": "Extensive Fingerprint",
      "description": "Perform an extensive DBMS version fingerprint",
      "default": false,
      "order": 97
    },
    "firstChar": {
      "type": "string",
      "title": "First Character",
      "description": "First query output word character to retrieve",
      "order": 34
    },
    "flushSession": {
      "type": "boolean",
      "title": "Flush Session",
      "description": "Flush session files for current target",
      "default": false,
      "order": 102
    },
    "forceDns": {
      "type": "boolean",
      "title": "Force DNS",
      "description": "Force DNS",
      "order": 74
    },
    "forceSsl": {
      "type": "boolean",
      "title": "Force SSL",
      "description": "Force usage of SSL/HTTPS",
      "order": 85
    },
    "forms": {
      "type": "boolean",
      "title": "Forms",
      "description": "Parse and test forms on target URL",
      "order": 16
    },
    "freshQueries": {
      "type": "boolean",
      "title": "Fresh Queries",
      "description": "Ignore query results stored in session file",
      "order": 80
    },
    "getAll": {
      "type": "boolean",
      "title": "Get All",
      "description": "Retrieve everything",
      "order": 75
    },
    "getBanner": {
      "type": "boolean",
      "title": "Get Banner",
      "description": "Retrieve DBMS banner",
      "default": false,
      "order": 122
    },
    "getColumns": {
      "type": "boolean",
      "title": "Get Columns",
      "description": "Enumerate DBMS database table columns",
      "order": 137
    },
    "getCount": {
      "type": "boolean",
      "title": "Get Count",
      "description": "Retrieve number of entries for table(s)",
      "default": false,
      "order": 132
    },
    "getCurrentDb": {
      "type": "boolean",
      "title": "Get Current Database",
      "description": "Retrieve DBMS current database",
      "order": 51
    },
    "getCurrentUser": {
      "type": "boolean",
      "title": "Get Current User",
      "description": "Retrieve DBMS current user",
      "order": 23
    },
    "getDbs": {
      "type": "boolean",
      "title": "Get DBMS Databases",
      "description": "Enumerate DBMS databases",
      "order": 79
    },
    "getHostname": {
      "type": "boolean",
      "title": "Get Hostname",
      "description": "Retrieve DBMS server hostname",
      "default": false,
      "order": 111
    },
    "getPasswordHashes": {
      "type": "boolean",
      "title": "Get Password Hashes",
      "description": "Enumerate DBMS users password hashes",
      "order": 3
    },
    "getPrivileges": {
      "type": "boolean",
      "title": "Get Privileges",
      "description": "Enumerate DBMS users privileges",
      "order": 26
    },
    "getRoles": {
      "type": "string",
      "title": "Get Roles",
      "description": "Enumerate DBMS users roles",
      "order": 25
    },
    "getSchema": {
      "type": "boolean",
      "title": "Get Schema",
      "description": "Enumerate DBMS schema",
      "order": 41
    },
    "getTables": {
      "type": "boolean",
      "title": "Get Tables",
      "description": "Enumerate DBMS database tables",
      "default": false,
      "order": 113
    },
    "getUsers": {
      "type": "boolean",
      "title": "Get Users",
      "description": "Enumerate DBMS users",
      "order": 2
    },
    "googleDork": {
      "type": "string",
      "title": "Google Dork",
      "description": "Process Google dork results as target URLs",
      "order": 139
    },
    "googlePage": {
      "type": "integer",
      "title": "Google Page Number",
      "description": "Use Google dork results from specified page number",
      "order": 9
    },
    "headers": {
      "type": "object",
      "title": "Extra Headers",
      "description": "Extra headers as a JSON object { \\"Accept-Language\\": \\"fr\\", \\"ETag\\": 123 }",
      "order": 101
    },
    "hexConvert": {
      "type": "boolean",
      "title": "DBMS hex function(s)",
      "description": "Use DBMS hex function(s) for data retrieval",
      "order": 52
    },
    "host": {
      "type": "string",
      "title": "HTTP Host header",
      "description": "HTTP Host header value",
      "order": 54
    },
    "hpp": {
      "type": "boolean",
      "title": "HTTP Parameter Pollution",
      "description": "Use HTTP parameter pollution method",
      "default": false,
      "order": 119
    },
    "identifyWaf": {
      "type": "boolean",
      "title": "Direct Database connection",
      "description": "Connection string for direct database connection",
      "order": 42
    },
    "ignoreProxy": {
      "type": "boolean",
      "title": "Ignore Proxy",
      "description": "Ignore system default proxy settings",
      "order": 136
    },
    "invalidBignum": {
      "type": "boolean",
      "title": "Big Numbers for Invalidating",
      "description": "Use big numbers for invalidating values",
      "order": 77
    },
    "invalidLogical": {
      "type": "boolean",
      "title": "Logical Operations",
      "description": "Use logical operations for invalidating values",
      "order": 50
    },
    "isDba": {
      "type": "boolean",
      "title": "Is User a DBA",
      "description": "Detect if the DBMS current user is DBA",
      "order": 13
    },
    "keepAlive": {
      "type": "boolean",
      "title": "Keep Alive",
      "description": "Use persistent HTTP(s) connections",
      "order": 143
    },
    "lastChar": {
      "type": "string",
      "title": "Last Character",
      "description": "Last query output word character to retrieve",
      "order": 115
    },
    "level": {
      "type": "integer",
      "title": "Level",
      "description": "Level of tests to perform",
      "default": 1,
      "enum": [
        1,
        2,
        3,
        4,
        5
      ],
      "order": 30
    },
    "limitStart": {
      "type": "string",
      "title": "Limit Start",
      "description": "First dump table entry to retrieve",
      "order": 45
    },
    "limitStop": {
      "type": "string",
      "title": "Limit Stop",
      "description": "Last dump table entry to retrieve",
      "order": 60
    },
    "loadCookies": {
      "type": "string",
      "title": "Load Cookies from file",
      "displayType": "bytes",
      "description": "File containing cookies in Netscape/wget format",
      "format": "bytes",
      "order": 46
    },
    "logFile": {
      "type": "string",
      "title": "Log File",
      "displayType": "bytes",
      "description": "Parse target(s) from Burp or WebScarab proxy log file",
      "format": "bytes",
      "order": 67
    },
    "mnemonics": {
      "type": "string",
      "title": "Mnemonics",
      "description": "Use short mnemonics (e.g. 'flu,bat,ban,tec=EU')",
      "order": 61
    },
    "mobile": {
      "type": "boolean",
      "title": "Mobile",
      "description": "Imitate smartphone through HTTP User-Agent header",
      "order": 138
    },
    "noCast": {
      "type": "boolean",
      "title": "No Payload Casting",
      "description": "Turn off payload casting mechanism",
      "order": 63
    },
    "noEscape": {
      "type": "boolean",
      "title": "No Escape",
      "description": "Turn off string escaping mechanism",
      "default": false,
      "order": 110
    },
    "notString": {
      "type": "string",
      "title": "Not String",
      "description": "String to match when query is evaluated to False",
      "order": 24
    },
    "nullConnection": {
      "type": "boolean",
      "title": "Null Connection",
      "description": "Retrieve page length without actual HTTP response body",
      "default": false,
      "order": 108
    },
    "optimize": {
      "type": "boolean",
      "title": "Optimize",
      "description": "Turn on all optimization switches",
      "order": 59
    },
    "os": {
      "type": "string",
      "title": "DBMS Operating System",
      "description": "Force back-end DBMS operating system to this value",
      "order": 68
    },
    "osBof": {
      "type": "boolean",
      "title": "Buffer Overflow Exploitation",
      "description": "Stored procedure buffer overflow exploitationn",
      "order": 49
    },
    "osCmd": {
      "type": "string",
      "title": "Operating System Command",
      "description": "Execute an operating system command",
      "order": 103
    },
    "pCred": {
      "type": "string",
      "title": "Proxy Credential",
      "description": "Proxy authentication credentials (name:password)",
      "order": 32
    },
    "pDel": {
      "type": "string",
      "title": "Parameter Delimiter",
      "description": "Character used for splitting parameter values",
      "order": 82
    },
    "parseErrors": {
      "type": "boolean",
      "title": "Parse Errors",
      "description": "Parse and display DBMS error messages from responses",
      "default": false,
      "order": 130
    },
    "predictOutput": {
      "type": "boolean",
      "title": "Predict Output",
      "description": "Predict common queries output",
      "order": 15
    },
    "prefix": {
      "type": "string",
      "title": "Prefix String",
      "description": "Injection payload prefix string",
      "order": 7
    },
    "privEsc": {
      "type": "boolean",
      "title": "Privilege Escalation",
      "description": "Database process user privilege escalation",
      "order": 73
    },
    "proxy": {
      "type": "string",
      "title": "Proxy",
      "description": "Use a proxy to connect to the target URL",
      "order": 57
    },
    "purgeOutput": {
      "type": "boolean",
      "title": "Purge Output",
      "description": "Safely remove all content from output directory",
      "default": false,
      "order": 95
    },
    "query": {
      "type": "string",
      "title": "SQL Query",
      "description": "SQL statement to be executed",
      "order": 10
    },
    "rFile": {
      "type": "string",
      "title": "Read File",
      "description": "Read a file from the back-end DBMS file system",
      "order": 70
    },
    "rParam": {
      "type": "string",
      "title": "Random Parameters",
      "description": "Randomly change value for given parameter(s)",
      "order": 22
    },
    "randomAgent": {
      "type": "boolean",
      "title": "Random Agent",
      "description": "Use randomly selected HTTP User-Agent header value",
      "order": 11
    },
    "referer": {
      "type": "string",
      "title": "HTTP Referer",
      "description": "HTTP Referer header value",
      "order": 94
    },
    "regAdd": {
      "type": "boolean",
      "title": "Add Windows Registry",
      "description": "Write a Windows registry key value data",
      "order": 135
    },
    "regData": {
      "type": "string",
      "title": "Windows Registry Data",
      "description": "Windows registry key value data",
      "order": 6
    },
    "regDel": {
      "type": "boolean",
      "title": "Windows Registry Delete",
      "description": "Delete a Windows registry key value",
      "default": false,
      "order": 106
    },
    "regKey": {
      "type": "string",
      "title": "Windows Registry Key",
      "description": "Windows registry key",
      "order": 44
    },
    "regRead": {
      "type": "boolean",
      "title": "Read Windows Registry",
      "description": "Read a Windows registry key value",
      "default": false,
      "order": 123
    },
    "regType": {
      "type": "string",
      "title": "Windows Registry Type",
      "description": "Windows registry key value type",
      "order": 58
    },
    "regVal": {
      "type": "string",
      "title": "Windows Registry Key Value",
      "description": "Windows registry key value",
      "order": 89
    },
    "regexp": {
      "type": "string",
      "title": "Regular Expression",
      "description": "Regexp to match when query is evaluated to True",
      "order": 78
    },
    "requestFile": {
      "type": "string",
      "title": "Request from a File",
      "displayType": "bytes",
      "description": "Load HTTP request from a file",
      "format": "bytes",
      "order": 14
    },
    "retries": {
      "type": "integer",
      "title": "Retries",
      "description": "Retries when the connection timeouts",
      "default": 3,
      "order": 96
    },
    "risk": {
      "type": "integer",
      "title": "Risk",
      "description": "Risk of tests to perform",
      "default": 1,
      "enum": [
        1,
        2,
        3
      ],
      "order": 20
    },
    "saFreq": {
      "type": "integer",
      "title": "Safe Frequency",
      "description": "Test requests between two visits to a given safe URL",
      "default": 0,
      "order": 39
    },
    "safUrl": {
      "type": "string",
      "title": "Safe URL",
      "description": "URL address to visit frequently during testing",
      "order": 125
    },
    "scope": {
      "type": "string",
      "title": "Scope",
      "description": "Regexp to filter targets from provided proxy log",
      "order": 87
    },
    "search": {
      "type": "boolean",
      "title": "Search Columns",
      "description": "Search column(s), table(s) and/or database name(s)",
      "default": false,
      "order": 92
    },
    "secondOrder": {
      "type": "string",
      "title": "Second Order",
      "description": "Resulting page URL searched for second-order response",
      "order": 31
    },
    "sessionFile": {
      "type": "string",
      "title": "Session File",
      "displayType": "bytes",
      "description": "Load session from a stored (.sqlite) file",
      "format": "bytes",
      "order": 112
    },
    "shLib": {
      "type": "string",
      "title": "Shared Library",
      "description": "Local path of the shared library",
      "order": 107
    },
    "skip": {
      "type": "string",
      "title": "Skip",
      "description": "Skip testing for given parameter(s)",
      "order": 17
    },
    "skipUrlEncode": {
      "type": "boolean",
      "title": "Skip URL Encoding",
      "description": "Skip URL encoding of payload data",
      "default": false,
      "order": 93
    },
    "smart": {
      "type": "boolean",
      "title": "Smart",
      "description": "Conduct thorough tests only if positive heuristic(s)",
      "order": 19
    },
    "sqlFile": {
      "type": "string",
      "title": "SQL File",
      "displayType": "bytes",
      "description": "Execute SQL statements from given file(s)",
      "format": "bytes",
      "order": 21
    },
    "string": {
      "type": "string",
      "title": "String Match",
      "description": "String to match when query is evaluated to True",
      "order": 116
    },
    "suffix": {
      "type": "string",
      "title": "Suffix",
      "description": "Injection payload suffix string",
      "order": 104
    },
    "tamper": {
      "type": "string",
      "title": "Tamper",
      "description": "Use given script(s) for tampering injection data",
      "order": 118
    },
    "tbl": {
      "type": "string",
      "title": "Table to Enumerate",
      "description": "DBMS database table(s) to enumerate",
      "order": 28
    },
    "tech": {
      "type": "string",
      "title": "Techniques",
      "description": "SQL injection techniques to use (default 'BEUSTQ')",
      "order": 140
    },
    "testFilter": {
      "type": "string",
      "title": "Test Filters",
      "description": "Select tests by payloads and/or titles (e.g. ROW)",
      "order": 64
    },
    "testParameter": {
      "type": "string",
      "title": "Testable parameter(s)",
      "description": "Testable parameter(s)",
      "order": 27
    },
    "textOnly": {
      "type": "boolean",
      "title": "Text Only",
      "description": "Compare pages based only on the textual content",
      "order": 141
    },
    "threads": {
      "type": "integer",
      "title": "Threads",
      "description": "Max number of concurrent HTTP(s) requests",
      "order": 66
    },
    "timeSec": {
      "type": "integer",
      "title": "Seconds Time Delay",
      "description": "Seconds to delay the DBMS response (default 5)",
      "default": 5,
      "order": 109
    },
    "timeout": {
      "type": "integer",
      "title": "Timeout",
      "description": "Seconds to wait before timeout connection (default 30)",
      "default": 30,
      "order": 33
    },
    "titles": {
      "type": "boolean",
      "title": "Titles",
      "description": "Compare pages based only on their titles",
      "order": 40
    },
    "uChar": {
      "type": "string",
      "title": "Union Character",
      "description": "Character to use for bruteforcing number of columns",
      "order": 5
    },
    "uCols": {
      "type": "string",
      "title": "Union Columns",
      "description": "Range of columns to test for UNION query SQL injection",
      "order": 81
    },
    "uFrom": {
      "type": "string",
      "title": "HTTP Cookie",
      "description": "Table to use in FROM part of UNION query SQL injection",
      "order": 62
    },
    "udfInject": {
      "type": "boolean",
      "title": "User-Defined Functions to Inject",
      "description": "Inject custom user-defined functions",
      "order": 84
    },
    "updateAll": {
      "type": "boolean",
      "title": "Update SQLmap",
      "description": "Update SQLmap",
      "order": 35
    },
    "url": {
      "type": "string",
      "title": "Target URL",
      "description": "Target URL (e.g. 'http://www.site.com/vuln.php?id=1')",
      "order": 76
    },
    "user": {
      "type": "string",
      "title": "User",
      "description": "DBMS user to enumerate",
      "order": 129
    },
    "verbose": {
      "type": "integer",
      "title": "Verbosity Level",
      "description": "Verbosity level",
      "default": 1,
      "enum": [
        1,
        2,
        3,
        4,
        5,
        6
      ],
      "order": 71
    },
    "wFile": {
      "type": "string",
      "title": "Write File",
      "description": "Write a local file on the back-end DBMS file system",
      "order": 83
    }
  }
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)


class ScanOutput(komand.Output):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "result": {
      "type": "object",
      "title": "Result",
      "description": "Scan Complete",
      "order": 1
    }
  }
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)
