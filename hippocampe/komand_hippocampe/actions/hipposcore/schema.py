# GENERATED BY KOMAND SDK - DO NOT EDIT
import komand
import json


class Component:
    DESCRIPTION = "Return a score for each of the given observables. The score is ranged between 0 and -100 (0 = observable unknown, -100 = super evil observable)"


class Input:
    OBSERVABLES = "observables"
    

class Output:
    SCORES = "scores"
    

class HipposcoreInput(komand.Input):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "observables": {
      "type": "array",
      "title": "Observables",
      "description": "Observables to score",
      "items": {
        "$ref": "#/definitions/observable"
      },
      "order": 1
    }
  },
  "required": [
    "observables"
  ],
  "definitions": {
    "observable": {
      "type": "object",
      "title": "observable",
      "properties": {
        "type": {
          "type": "string",
          "title": "Type",
          "description": "Type of the observable (e.g. domain, ip)",
          "order": 2
        },
        "value": {
          "type": "string",
          "title": "Value",
          "description": "Value of the observable",
          "order": 1
        }
      },
      "required": [
        "type",
        "value"
      ]
    }
  }
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)


class HipposcoreOutput(komand.Output):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "scores": {
      "type": "array",
      "title": "Scores",
      "description": "List of given observables with their corresponding score",
      "items": {
        "$ref": "#/definitions/score"
      },
      "order": 1
    }
  },
  "required": [
    "scores"
  ],
  "definitions": {
    "score": {
      "type": "object",
      "title": "score",
      "properties": {
        "hipposcore": {
          "type": "number",
          "title": "Hipposcore",
          "description": "Score value",
          "order": 2
        },
        "observable": {
          "type": "string",
          "title": "Observable",
          "description": "Observable",
          "order": 1
        }
      }
    }
  }
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)
