package http

// Code generated by the Komand Go SDK Generator. DO NOT EDIT

import (
	"fmt"
	"net/http"
	"time"

	"github.com/rapid7/komand-plugins/extractit/connection"
)

// NewServer returns a new http server
func NewServer(port int, c *connection.Cache) (*http.Server, error) {
	// TODO each plugin needs a unique port to expose
	// but internally, can all use a common port
	addr := fmt.Sprintf(":%d", port)
	// TODO make these configurable somehow
	readTimeout := time.Second * time.Duration(600)
	writeTimeout := time.Second * time.Duration(600)

	mux := http.NewServeMux()
	// one for each action
	mux.Handle("/actions/date_extractor", NewDateExtractorHandler(c))
	mux.Handle("/actions/date_extractor/test", NewDateExtractorHandler(c))
	mux.Handle("/actions/domain_extractor", NewDomainExtractorHandler(c))
	mux.Handle("/actions/domain_extractor/test", NewDomainExtractorHandler(c))
	mux.Handle("/actions/email_extractor", NewEmailExtractorHandler(c))
	mux.Handle("/actions/email_extractor/test", NewEmailExtractorHandler(c))
	mux.Handle("/actions/filepath_extractor", NewFilepathExtractorHandler(c))
	mux.Handle("/actions/filepath_extractor/test", NewFilepathExtractorHandler(c))
	mux.Handle("/actions/ioc_extractor", NewIocExtractorHandler(c))
	mux.Handle("/actions/ioc_extractor/test", NewIocExtractorHandler(c))
	mux.Handle("/actions/ip_extractor", NewIPExtractorHandler(c))
	mux.Handle("/actions/ip_extractor/test", NewIPExtractorHandler(c))
	mux.Handle("/actions/mac_extractor", NewMacExtractorHandler(c))
	mux.Handle("/actions/mac_extractor/test", NewMacExtractorHandler(c))
	mux.Handle("/actions/md5_extractor", NewMd5ExtractorHandler(c))
	mux.Handle("/actions/md5_extractor/test", NewMd5ExtractorHandler(c))
	mux.Handle("/actions/sha1_extractor", NewSha1ExtractorHandler(c))
	mux.Handle("/actions/sha1_extractor/test", NewSha1ExtractorHandler(c))
	mux.Handle("/actions/sha256_extractor", NewSha256ExtractorHandler(c))
	mux.Handle("/actions/sha256_extractor/test", NewSha256ExtractorHandler(c))
	mux.Handle("/actions/sha512_extractor", NewSha512ExtractorHandler(c))
	mux.Handle("/actions/sha512_extractor/test", NewSha512ExtractorHandler(c))
	mux.Handle("/actions/url_extractor", NewURLExtractorHandler(c))
	mux.Handle("/actions/url_extractor/test", NewURLExtractorHandler(c))

	s := &http.Server{
		Addr:           addr,
		Handler:        mux,
		ReadTimeout:    readTimeout,
		WriteTimeout:   writeTimeout,
		MaxHeaderBytes: 1 << 20,
	}
	return s, nil
}
