# GENERATED BY KOMAND SDK - DO NOT EDIT
import komand
import json


class Component:
    DESCRIPTION = "Check an email for compromise"


class Input:
    BREACH = "breach"
    INCLUDE_UNVERIFIED = "include_unverified"
    TRUNCATE_RESPONSE = "truncate_response"
    USER = "user"
    

class Output:
    BREACHES = "breaches"
    FOUND = "found"
    

class LookupUserInput(komand.Input):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "breach": {
      "type": "string",
      "title": "Breach Site",
      "description": "Breach Site to check e.g. adobe.com. If blank will check all known breaches",
      "order": 2
    },
    "include_unverified": {
      "type": "boolean",
      "title": "Include Unverified",
      "description": "If true will include breaches that are unverified",
      "default": false,
      "order": 3
    },
    "truncate_response": {
      "type": "boolean",
      "title": "Truncate Response",
      "description": "If true only name of breach will be shown",
      "default": true,
      "order": 4
    },
    "user": {
      "type": "string",
      "title": "Account",
      "description": "Email to check",
      "order": 1
    }
  },
  "required": [
    "include_unverified",
    "truncate_response",
    "user"
  ]
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)


class LookupUserOutput(komand.Output):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "breaches": {
      "type": "array",
      "title": "Breaches",
      "description": "List of details for each breach found or email",
      "items": {
        "$ref": "#/definitions/domain"
      },
      "order": 2
    },
    "found": {
      "type": "boolean",
      "title": "Found",
      "description": "Found",
      "order": 1
    }
  },
  "required": [
    "found"
  ],
  "definitions": {
    "domain": {
      "type": "object",
      "title": "domain",
      "properties": {
        "AddedDate": {
          "type": "string",
          "title": "Added Date",
          "description": "The date and time (precision to the minute) the breach was added to the system in ISO 8601 format",
          "order": 5
        },
        "BreachDate": {
          "type": "string",
          "title": "Breach Date",
          "description": "The date (with no time) the breach originally occurred on in ISO 8601 format",
          "order": 4
        },
        "DataClasses": {
          "type": "array",
          "title": "Data Classes",
          "description": "This attribute describes the nature of the data compromised in the breach and contains an alphabetically ordered string array of impacted data classes",
          "items": {
            "type": "string"
          },
          "order": 9
        },
        "Description": {
          "type": "string",
          "title": "Description",
          "description": "Contains an overview of the breach represented in HTML markup. The description may include markup such as emphasis and strong tags as well as hyperlinks",
          "order": 8
        },
        "Domain": {
          "type": "string",
          "title": "Domain",
          "description": "The domain of the primary website the breach occurred on",
          "order": 3
        },
        "IsActive": {
          "type": "boolean",
          "title": "Is Active",
          "description": "Indicates if the breach investigation is ongoing.",
          "order": 13
        },
        "IsFabricated": {
          "type": "boolean",
          "title": "Is Fabricated",
          "description": "Indicates that the breach is considered fabricated. A fabricated breach is unlikely to have been hacked from the indicated website and usually contains a large amount of manufactured data. However, it still contains legitimate email addresses and asserts that the account owners were compromised in the alleged breach",
          "order": 11
        },
        "IsRetired": {
          "type": "boolean",
          "title": "Is Retired",
          "description": "Indicates if the breach has been retired",
          "order": 14
        },
        "IsSensitive": {
          "type": "boolean",
          "title": "Is Sensitive",
          "description": "Indicates if the breach is considered sensitive. The public API will not return any accounts for a breach flagged as sensitive",
          "order": 12
        },
        "IsSpamList": {
          "type": "boolean",
          "title": "Is Spam List",
          "description": "Indicates if the breach is considered a spam list. This flag has no impact on any other attributes but it means that the data has not come as a result of a security compromise",
          "order": 15
        },
        "IsVerified": {
          "type": "boolean",
          "title": "Is Verified",
          "description": "Indicates that the breach is considered verified",
          "order": 10
        },
        "LogoType": {
          "type": "string",
          "title": "Logo Type",
          "description": "Indicates what type of file the breach logo is",
          "order": 16
        },
        "ModifiedDate": {
          "type": "string",
          "title": "Modified Date",
          "description": "The date and time (precision to the minute) the breach was modified in ISO 8601 format",
          "order": 6
        },
        "Name": {
          "type": "string",
          "title": "Name",
          "description": "A Pascal-cased name representing the breach which is unique across all other breaches",
          "order": 2
        },
        "PwnCount": {
          "type": "integer",
          "title": "Pwn Count",
          "description": "The total number of accounts loaded into the system",
          "order": 7
        },
        "Title": {
          "type": "string",
          "title": "Title",
          "description": "A descriptive title for the breach suitable for displaying to end users",
          "order": 1
        }
      }
    }
  }
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)
