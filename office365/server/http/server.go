package http

// Code generated by the Komand Go SDK Generator. DO NOT EDIT

import (
	"fmt"
	"net/http"
	"time"

	"github.com/rapid7/komand-plugins/office365/connection"
)

// NewServer returns a new http server
func NewServer(port int, c *connection.Cache) (*http.Server, error) {
	// TODO each plugin needs a unique port to expose
	// but internally, can all use a common port
	addr := fmt.Sprintf(":%d", port)
	// TODO make these configurable somehow
	readTimeout := time.Second * time.Duration(600)
	writeTimeout := time.Second * time.Duration(600)

	mux := http.NewServeMux()
	// one for each action
	mux.Handle("/actions/copy_folder", NewCopyFolderHandler(c))
	mux.Handle("/actions/copy_folder/test", NewCopyFolderHandler(c))
	mux.Handle("/actions/copy_message", NewCopyMessageHandler(c))
	mux.Handle("/actions/copy_message/test", NewCopyMessageHandler(c))
	mux.Handle("/actions/create_and_send", NewCreateAndSendHandler(c))
	mux.Handle("/actions/create_and_send/test", NewCreateAndSendHandler(c))
	mux.Handle("/actions/create_attachment", NewCreateAttachmentHandler(c))
	mux.Handle("/actions/create_attachment/test", NewCreateAttachmentHandler(c))
	mux.Handle("/actions/create_folder", NewCreateFolderHandler(c))
	mux.Handle("/actions/create_folder/test", NewCreateFolderHandler(c))
	mux.Handle("/actions/delete_attachment", NewDeleteAttachmentHandler(c))
	mux.Handle("/actions/delete_attachment/test", NewDeleteAttachmentHandler(c))
	mux.Handle("/actions/delete_folder", NewDeleteFolderHandler(c))
	mux.Handle("/actions/delete_folder/test", NewDeleteFolderHandler(c))
	mux.Handle("/actions/delete_message", NewDeleteMessageHandler(c))
	mux.Handle("/actions/delete_message/test", NewDeleteMessageHandler(c))
	mux.Handle("/actions/forward_message", NewForwardMessageHandler(c))
	mux.Handle("/actions/forward_message/test", NewForwardMessageHandler(c))
	mux.Handle("/actions/get_attachments", NewGetAttachmentsHandler(c))
	mux.Handle("/actions/get_attachments/test", NewGetAttachmentsHandler(c))
	mux.Handle("/actions/get_contacts", NewGetContactsHandler(c))
	mux.Handle("/actions/get_contacts/test", NewGetContactsHandler(c))
	mux.Handle("/actions/get_folders", NewGetFoldersHandler(c))
	mux.Handle("/actions/get_folders/test", NewGetFoldersHandler(c))
	mux.Handle("/actions/get_messages", NewGetMessagesHandler(c))
	mux.Handle("/actions/get_messages/test", NewGetMessagesHandler(c))
	mux.Handle("/actions/most_recently_sent", NewMostRecentlySentHandler(c))
	mux.Handle("/actions/most_recently_sent/test", NewMostRecentlySentHandler(c))
	mux.Handle("/actions/move_folder", NewMoveFolderHandler(c))
	mux.Handle("/actions/move_folder/test", NewMoveFolderHandler(c))
	mux.Handle("/actions/move_message", NewMoveMessageHandler(c))
	mux.Handle("/actions/move_message/test", NewMoveMessageHandler(c))
	mux.Handle("/actions/reply_to_message", NewReplyToMessageHandler(c))
	mux.Handle("/actions/reply_to_message/test", NewReplyToMessageHandler(c))
	mux.Handle("/triggers/new_message/test", NewNewMessageTriggerHandler(c))

	s := &http.Server{
		Addr:           addr,
		Handler:        mux,
		ReadTimeout:    readTimeout,
		WriteTimeout:   writeTimeout,
		MaxHeaderBytes: 1 << 20,
	}
	return s, nil
}
