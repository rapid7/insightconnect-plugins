# GENERATED BY KOMAND SDK - DO NOT EDIT
import komand
import json


class Component:
    DESCRIPTION = "Perform second-factor authentication"


class Input:
    ASYNC = "async"
    DEVICE = "device"
    FACTOR = "factor"
    IPADDR = "ipaddr"
    OPTIONS = "options"
    USER_ID = "user_id"
    USERNAME = "username"
    

class Output:
    RESULT = "result"
    STATUS = "status"
    STATUS_MSG = "status_msg"
    TRUSTED_DEVICE_TOKEN = "trusted_device_token"
    TXID = "txid"
    

class AuthInput(komand.Input):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "async": {
      "type": "boolean",
      "title": "Async",
      "description": "Set to true for an async response",
      "order": 5
    },
    "device": {
      "type": "string",
      "title": "Device",
      "description": "Device ID to use for auth",
      "default": "auto",
      "order": 6
    },
    "factor": {
      "type": "string",
      "title": "Factor",
      "description": "Factor to use for authentication",
      "default": "auto",
      "enum": [
        "auto",
        "push",
        "passcode",
        "sms",
        "phone"
      ],
      "order": 3
    },
    "ipaddr": {
      "type": "string",
      "title": "Ipaddr",
      "description": "The IP address of the user to be authenticated, in dotted quad format. This will cause an 'allow' response to be sent if appropriate for requests from a trusted network",
      "order": 4
    },
    "options": {
      "type": "object",
      "title": "Options",
      "description": "Additional options required by the API",
      "order": 7
    },
    "user_id": {
      "type": "string",
      "title": "User Id",
      "description": "User ID",
      "order": 1
    },
    "username": {
      "type": "string",
      "title": "Username",
      "description": "Username is required if user_id is not provided",
      "order": 2
    }
  }
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)


class AuthOutput(komand.Output):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "result": {
      "type": "string",
      "title": "Result",
      "description": "Either allow or deny",
      "order": 1
    },
    "status": {
      "type": "string",
      "title": "Status",
      "description": "Status",
      "order": 2
    },
    "status_msg": {
      "type": "string",
      "title": "Status Msg",
      "description": "Status message",
      "order": 3
    },
    "trusted_device_token": {
      "type": "string",
      "title": "Trusted Device Token",
      "description": "Trusted device token",
      "order": 4
    },
    "txid": {
      "type": "string",
      "title": "Txid",
      "description": "TX ID",
      "order": 5
    }
  }
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)
