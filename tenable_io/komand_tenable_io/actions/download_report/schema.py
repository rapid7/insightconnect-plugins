# GENERATED BY KOMAND SDK - DO NOT EDIT
import komand
import json


class Component:
    DESCRIPTION = "Download the Base64-encoded report generated by a completed scan"


class Input:
    FILE_FORMAT = "file_format"
    NAME = "name"
    REPORT_TYPE = "report_type"
    

class Output:
    SCAN_REPORT = "scan_report"
    

class DownloadReportInput(komand.Input):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "file_format": {
      "type": "string",
      "title": "File Format",
      "description": "File format to download the report in",
      "enum": [
        "CSV",
        "HTML",
        "NESSUS",
        "PDF"
      ],
      "order": 3
    },
    "name": {
      "type": "string",
      "title": "Name",
      "description": "The name of the scan to download. In case of conflicts, the most recent scan of this name will be used",
      "order": 1
    },
    "report_type": {
      "type": "string",
      "title": "Report Type",
      "description": "The class of report to generate",
      "enum": [
        "Vulnerabilities by Host",
        "Vulnerabilities by Plugin",
        "Executive Summary"
      ],
      "order": 2
    }
  }
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)


class DownloadReportOutput(komand.Output):
    schema = json.loads("""
   {
  "type": "object",
  "title": "Variables",
  "properties": {
    "scan_report": {
      "$ref": "#/definitions/file",
      "title": "Scan Report",
      "description": "The Base64 encoded report",
      "order": 1
    }
  },
  "definitions": {
    "file": {
      "id": "file",
      "type": "object",
      "title": "File",
      "description": "File Object",
      "properties": {
        "content": {
          "type": "string",
          "title": "Content",
          "description": "File contents",
          "format": "bytes"
        },
        "filename": {
          "type": "string",
          "title": "Filename",
          "description": "Name of file"
        }
      }
    }
  }
}
    """)

    def __init__(self):
        super(self.__class__, self).__init__(self.schema)
